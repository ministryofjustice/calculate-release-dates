/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/validation/{prisonerId}/full-validation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Validates that the data for the given prisoner in NOMIS can be used to calculate a release date
     * @description This endpoint will validate that the data for the given prisoner in NOMIS can be supported by the calculate release dates engine
     */
    post: operations['validate']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/unused-deductions/{prisonerId}/calculation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Calculate unused deductions. */
    post: operations['calculate']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/specialist-support/genuine-override': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Store a genuine override
     * @description This endpoint will return a response model which indicates the success of storing a genuine override
     */
    post: operations['storeGenuineOverride']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/specialist-support/genuine-override/calculation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Store a genuine override
     * @description This endpoint will return a response model which indicates the success of storing a genuine override
     */
    post: operations['storeGenuineOverrideDates']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manual-calculation/{prisonerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Store a manual calculation
     * @description This endpoint will return a response model which indicates the success of storing a manual calculation
     */
    post: operations['storeManualCalculation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/comparison': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List all Comparisons performed using presets
     * @description This endpoint will return all the comparisons for your caseload
     */
    get: operations['getComparisons']
    put?: never
    /**
     * Create a record of a new calculation
     * @description This endpoint will create a new calculation and return the new calculation object
     */
    post: operations['createComparison']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/comparison/{comparisonReference}/mismatch/{mismatchReference}/discrepancy': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the latest discrepancy record for a comparison person
     * @description This endpoint returns the mismatch discrepancy for a particular mismatch
     */
    get: operations['getComparisonPersonDiscrepancy']
    put?: never
    /**
     * Create a comparison person discrepancy record
     * @description This endpoint will create a new comparison person discrepancy and return a summary of it
     */
    post: operations['createComparisonPersonDiscrepancy']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/comparison/manual': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List all comparisons which were performed manually
     * @description This endpoint will return all of the manually performed calculations recorded in the service. This is not limited by caseload, but requires the MANUAL_COMPARER role.
     */
    get: operations['getManualComparisons']
    put?: never
    /**
     * Create a record of a new manual calculation
     * @description This endpoint will create a new manual comparison and return the new manual comparison object
     */
    post: operations['createComparison_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/comparison/manual/{comparisonReference}/mismatch/{mismatchReference}/discrepancy': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the latest discrepancy record for a comparison person
     * @description This endpoint returns the mismatch discrepancy for a particular mismatch
     */
    get: operations['getComparisonPersonDiscrepancy_1']
    put?: never
    /**
     * Create a comparison person discrepancy record
     * @description This endpoint will create a new comparison person discrepancy and return a summary of it
     */
    post: operations['createComparisonPersonDiscrepancy_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/{prisonerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Calculate release dates for a prisoner - preliminary calculation, this does not publish to NOMIS
     * @description This endpoint will calculate release dates based on a prisoners latest booking - this is a PRELIMINARY calculation that will not be published to NOMIS
     */
    post: operations['calculate_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/{prisonerId}/test': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Calculate release dates for a prisoner - test calculation, this does not publish to NOMIS
     * @description This endpoint will calculate release dates based on a prisoners latest booking, this can includeinactive bookings of historic prisoners. Endpoint is used to test calculations against NOMIS.
     */
    post: operations['testCalculation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/relevant-remand/{prisonerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Calculate a release date at a point in time for the relevant remand tool.
     * @description This endpoint calculates the release date of an intersecting sentence, this is needed by therelevant remand tool in order to work out remand periods.
     */
    post: operations['relevantRemandCalculation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/record-a-recall/{prisonerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Calculate release dates for a prisoner - used explicitly by the record-a-recall service, this does not publish to NOMIS
     * @description This endpoint will calculate release dates based on a prisoners latest booking - this is a transitory calculation that will not be published to NOMIS
     */
    post: operations['calculateForRecall']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/confirm/{calculationRequestId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Calculate release dates and persist the results for a prisoners latest booking
     * @description This endpoint will calculate release dates based on a prisoners latest booking
     */
    post: operations['confirmCalculation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/working-day/previous/{date}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Find the previous working day from a given date
     * @description Finds the previous working day, adjusting for weekends and bank holidays
     */
    get: operations['previousWorkingDay']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/working-day/next/{date}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Find the next working day from a given date
     * @description Finds the next working day, adjusting for weekends and bank holidays
     */
    get: operations['nextWorkingDay']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/validation/{prisonerId}/supported-validation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Validates that the sentences for the given prisoner in NOMIS can be used to calculate a release date
     * @description This endpoint will validate that the data for the given prisoner in NOMIS can be supported by the calculate release dates engine
     */
    get: operations['validateSupported']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/validation/{prisonerId}/manual-entry-validation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Validates that the sentences for the given prisoner in NOMIS are ok adequate to record a manual date against for unsupported types
     * @description This endpoint will validate that the data for the given prisoner in NOMIS is of sufficient quality to allow a manual date to be recorded via CRD
     */
    get: operations['validateForManualEntry']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/specialist-support/genuine-override/calculation/{calculationReference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a genuine override
     * @description This endpoint will return a response model which returns a genuine override
     */
    get: operations['getGenuineOverride']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sentence-and-offence-information/{bookingId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get sentence and offence information
     * @description This endpoint will return a response model which lists sentence and offence information. It will notify if there have been any changed since last calculation
     */
    get: operations['getSentencesAndOffences']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reference-data/date-type': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the date type definitions
     * @description Returns the date types and their definitions
     */
    get: operations['getDateTypeDefinitions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-friday-release/{date}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Find the non friday release day from a given date
     * @description Finds the non friday release day, adjusting for weekends and bank holidays
     */
    get: operations['nonFridayReleaseDay']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manual-calculation/{bookingId}/has-recall-sentences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Determine if a booking has any recall sentences
     * @description This endpoint will return true if a booking has any recall sentences
     */
    get: operations['hasRecallSentences']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manual-calculation/{bookingId}/has-indeterminate-sentences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Determine if a booking has any indeterminate sentences
     * @description This endpoint will return true if a booking has any indeterminate sentences
     */
    get: operations['hasIndeterminateSentences']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/historicCalculations/{nomsId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get historic calculations for a prisoner
     * @description This endpoint will return a list of calculations performed for a given prisoner
     */
    get: operations['getCalculationResults']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/comparison/{comparisonReference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the people for a particular caseload
     * @description This endpoint return the people associated to a specific comparison
     */
    get: operations['getComparisonByShortReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/comparison/{comparisonReference}/mismatch/{mismatchReference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the mismatch for a particular comparison
     * @description This endpoint return the mismatch for a particular comparison
     */
    get: operations['getComparisonMismatchByShortReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/comparison/{comparisonReference}/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a count of the number of people compared for a particular caseload
     * @description This endpoint will count all the people associated to a specific comparison
     */
    get: operations['getCountOfPersonsInComparison']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/comparison/manual/{comparisonReference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the people for a particular caseload
     * @description This endpoint return the people associated to a specific comparison
     */
    get: operations['getComparisonByShortReference_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/comparison/manual/{comparisonReference}/mismatch/{mismatchReference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the mismatch for a particular comparison
     * @description This endpoint return the mismatch for a particular comparison
     */
    get: operations['getManualComparisonMismatchByShortReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/comparison/manual/{comparisonReference}/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a count of the number of people compared for a particular caseload
     * @description This endpoint will count all the people associated to a specific comparison
     */
    get: operations['getCountOfPersonsInComparison_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculationReference/{calculationReference}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get release dates for a calculationRequestId
     * @description This endpoint will return the release dates based on a calculationRequestId
     */
    get: operations['getCalculationResults_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/{prisonerId}/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get latest release dates for a prisoner
     * @description This endpoint will return the latest release dates for a prisoner. They may come from CRDS or NOMIS as identified by the source in the results.
     */
    get: operations['getLatestCalculation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/sentence-and-offences/{calculationRequestId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get sentences and offences for a calculationRequestId
     * @description This endpoint will return the sentences and offences based on a calculationRequestId
     */
    get: operations['getSentencesAndOffence']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/return-to-custody/{calculationRequestId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get return to custody date for a calculationRequestId
     * @description This endpoint will return the return to custody date based on a calculationRequestId
     */
    get: operations['getReturnToCustodyDate']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/results/{prisonerId}/{bookingId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get confirmed release dates for a prisoner's specific booking
     * @description This endpoint will return the confirmed release dates based on a prisoners booking
     */
    get: operations['getConfirmedCalculationResults']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/results/{calculationRequestId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get release dates for a calculationRequestId
     * @description This endpoint will return the release dates based on a calculationRequestId
     */
    get: operations['getCalculationResults_2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/release-dates/{calculationRequestId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get release dates summary for a calculation request id
     * @description This endpoint will return the list of release dates based on a calculation request id
     */
    get: operations['getKeyDatesForABooking']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/prisoner-details/{calculationRequestId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get prisoner details for a calculationRequestId
     * @description This endpoint will return the prisoner details based on a calculationRequestId
     */
    get: operations['getPrisonerDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/nomis-calculation-summary/{offenderSentCalculationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Nomis calculation summary with release dates for a offenderSentCalculationId
     * @description This endpoint will return the nomis calculation summary with release dates based on a offenderSentCalculationId
     */
    get: operations['getNomisCalculationSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/detailed-results/{calculationRequestId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get release dates for a calculationRequestId with additional details
     * @description This endpoint will return the release dates based on a calculationRequestId along with hints and full descriptions.
     */
    get: operations['getDetailedResults']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/calculation-user-input/{calculationRequestId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get user input for a calculationRequestId
     * @description This endpoint will return the user input based on a calculationRequestId
     */
    get: operations['getCalculationInput']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/breakdown/{calculationRequestId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get breakdown for a calculationRequestId
     * @description This endpoint will return the breakdown based on a calculationRequestId
     */
    get: operations['getCalculationBreakdown']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation/adjustments/{calculationRequestId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get adjustments for a calculationRequestId
     * @description This endpoint will return the adjustments based on a calculationRequestId
     */
    get: operations['get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/calculation-reasons/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getActiveCalculationReasons']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/booking-and-sentence-adjustments/{bookingId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get booking and sentence adjusments
     * @description This endpoint will return a response model which shows booking and sentence adjustments. It will notify if there are new adjustments since last calculation
     */
    get: operations['getBookingAndSentenceAdjustments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description List of sentences and the users input for each sentence */
    CalculationSentenceUserInput: {
      /** Format: int32 */
      sentenceSequence: number
      offenceCode: string
      /** @enum {string} */
      userInputType: 'ORIGINAL' | 'FOUR_TO_UNDER_SEVEN' | 'SECTION_250' | 'UPDATED'
      userChoice: boolean
    }
    CalculationUserInputs: {
      /** @description List of sentences and the users input for each sentence */
      sentenceCalculationUserInputs: components['schemas']['CalculationSentenceUserInput'][]
      /** @description A flag to indicate whether to calculate ERSED. */
      calculateErsed: boolean
      /** @description Whether to use offence indicators from another system for the calculation or user's input. */
      useOffenceIndicators: boolean
    }
    /** @description Validation message details */
    ValidationMessage: {
      /**
       * @description Validation code details
       * @enum {string}
       */
      code:
        | 'ADJUSTMENT_AFTER_RELEASE_ADA'
        | 'ADJUSTMENT_AFTER_RELEASE_RADA'
        | 'ADJUSTMENT_FUTURE_DATED_ADA'
        | 'ADJUSTMENT_FUTURE_DATED_RADA'
        | 'ADJUSTMENT_FUTURE_DATED_UAL'
        | 'A_FINE_SENTENCE_CONSECUTIVE'
        | 'A_FINE_SENTENCE_CONSECUTIVE_TO'
        | 'A_FINE_SENTENCE_MISSING_FINE_AMOUNT'
        | 'A_FINE_SENTENCE_WITH_PAYMENTS'
        | 'CUSTODIAL_PERIOD_EXTINGUISHED_REMAND'
        | 'CUSTODIAL_PERIOD_EXTINGUISHED_TAGGED_BAIL'
        | 'DTO_CONSECUTIVE_TO_SENTENCE'
        | 'DTO_HAS_SENTENCE_CONSECUTIVE_TO_IT'
        | 'EDS18_EDS21_EDSU18_SENTENCE_TYPE_INCORRECT'
        | 'EDS_LICENCE_TERM_LESS_THAN_ONE_YEAR'
        | 'EDS_LICENCE_TERM_MORE_THAN_EIGHT_YEARS'
        | 'FTR_SENTENCES_CONFLICT_WITH_EACH_OTHER'
        | 'FTR_TYPE_14_DAYS_BUT_LENGTH_IS_28'
        | 'FTR_TYPE_28_DAYS_BUT_LENGTH_IS_14'
        | 'FTR_14_DAYS_SENTENCE_GE_12_MONTHS'
        | 'FTR_14_DAYS_AGGREGATE_GE_12_MONTHS'
        | 'FTR_28_DAYS_SENTENCE_LT_12_MONTHS'
        | 'FTR_28_DAYS_AGGREGATE_LT_12_MONTHS'
        | 'FTR_TYPE_14_DAYS_SENTENCE_GE_12_MONTHS'
        | 'FTR_TYPE_14_DAYS_AGGREGATE_GE_12_MONTHS'
        | 'FTR_TYPE_28_DAYS_SENTENCE_LT_12_MONTHS'
        | 'FTR_TYPE_28_DAYS_AGGREGATE_LT_12_MONTHS'
        | 'LASPO_AR_SENTENCE_TYPE_INCORRECT'
        | 'MORE_THAN_ONE_IMPRISONMENT_TERM'
        | 'MORE_THAN_ONE_LICENCE_TERM'
        | 'MULTIPLE_SENTENCES_CONSECUTIVE_TO'
        | 'OFFENCE_DATE_AFTER_SENTENCE_RANGE_DATE'
        | 'OFFENCE_DATE_AFTER_SENTENCE_START_DATE'
        | 'OFFENCE_MISSING_DATE'
        | 'PRISONER_SUBJECT_TO_PTD'
        | 'REMAND_FROM_TO_DATES_REQUIRED'
        | 'REMAND_OVERLAPS_WITH_REMAND'
        | 'REMAND_OVERLAPS_WITH_SENTENCE'
        | 'SEC236A_SENTENCE_TYPE_INCORRECT'
        | 'SEC_91_SENTENCE_TYPE_INCORRECT'
        | 'SENTENCE_HAS_MULTIPLE_TERMS'
        | 'SENTENCE_HAS_NO_IMPRISONMENT_TERM'
        | 'SENTENCE_HAS_NO_LICENCE_TERM'
        | 'SOPC18_SOPC21_SENTENCE_TYPE_INCORRECT'
        | 'SOPC_LICENCE_TERM_NOT_12_MONTHS'
        | 'SDS_TORERA_EXCLUSION'
        | 'SOPC_TORERA_EXCLUSION'
        | 'UNSUPPORTED_ADJUSTMENT_LAWFULLY_AT_LARGE'
        | 'UNSUPPORTED_ADJUSTMENT_SPECIAL_REMISSION'
        | 'UNSUPPORTED_DTO_RECALL_SEC104_SEC105'
        | 'UNSUPPORTED_SENTENCE_TYPE'
        | 'ZERO_IMPRISONMENT_TERM'
        | 'UNSUPPORTED_CALCULATION_DTO_WITH_RECALL'
        | 'PRE_PCSC_DTO_WITH_ADJUSTMENT'
        | 'BOTUS_CONSECUTIVE_OR_CONCURRENT_TO_OTHER_SENTENCE'
        | 'UNSUPPORTED_SDS40_RECALL_SENTENCE_TYPE'
        | 'UNSUPPORTED_SDS40_CONSECUTIVE_SDS_BETWEEN_TRANCHE_COMMENCEMENTS'
        | 'UNSUPPORTED_OFFENCE_ENCOURAGING_OR_ASSISTING'
        | 'UNSUPPORTED_BREACH_97'
        | 'UNSUPPORTED_SUSPENDED_OFFENCE'
      arguments: string[]
      message: string
      /** @enum {string} */
      type:
        | 'UNSUPPORTED_SENTENCE'
        | 'UNSUPPORTED_CALCULATION'
        | 'VALIDATION'
        | 'UNSUPPORTED_OFFENCE'
        | 'SUSPENDED_OFFENCE'
        | 'MANUAL_ENTRY_JOURNEY_REQUIRED'
    }
    AdjustmentServiceAdjustment: {
      /** Format: uuid */
      id?: string
      /** Format: int64 */
      bookingId: number
      /** Format: int32 */
      sentenceSequence?: number
      person: string
      /** @enum {string} */
      adjustmentType:
        | 'REMAND'
        | 'TAGGED_BAIL'
        | 'UNLAWFULLY_AT_LARGE'
        | 'LAWFULLY_AT_LARGE'
        | 'ADDITIONAL_DAYS_AWARDED'
        | 'RESTORATION_OF_ADDITIONAL_DAYS_AWARDED'
        | 'SPECIAL_REMISSION'
        | 'UNUSED_DEDUCTIONS'
      /** Format: date */
      toDate?: string
      /** Format: date */
      fromDate?: string
      /** Format: int32 */
      days: number
      /** Format: int32 */
      effectiveDays: number
    }
    UnusedDeductionCalculationResponse: {
      /** Format: int32 */
      unusedDeductions?: number
      validationMessages: components['schemas']['ValidationMessage'][]
    }
    GenuineOverrideRequest: {
      reason: string
      originalCalculationRequest: string
      savedCalculation?: string
      isOverridden: boolean
    }
    GenuineOverrideResponse: {
      reason: string
      originalCalculationRequest: string
      savedCalculation: string
      isOverridden: boolean
    }
    GenuineOverrideDateRequest: {
      manualEntryRequest: components['schemas']['ManualEntryRequest']
      originalCalculationReference: string
    }
    ManualEntryRequest: {
      selectedManualEntryDates: components['schemas']['ManualEntrySelectedDate'][]
      /** Format: int64 */
      reasonForCalculationId: number
      otherReasonDescription?: string
    }
    ManualEntrySelectedDate: {
      /** @enum {string} */
      dateType:
        | 'CRD'
        | 'LED'
        | 'SED'
        | 'NPD'
        | 'ARD'
        | 'TUSED'
        | 'PED'
        | 'SLED'
        | 'HDCED'
        | 'NCRD'
        | 'ETD'
        | 'MTD'
        | 'LTD'
        | 'DPRRD'
        | 'PRRD'
        | 'ESED'
        | 'ERSED'
        | 'TERSED'
        | 'APD'
        | 'HDCAD'
        | 'None'
        | 'Tariff'
        | 'ROTL'
        | 'HDCED4PLUS'
      dateText: string
      date?: components['schemas']['SubmittedDate']
    }
    SubmittedDate: {
      /** Format: int32 */
      day: number
      /** Format: int32 */
      month: number
      /** Format: int32 */
      year: number
    }
    GenuineOverrideDateResponse: {
      calculationReference: string
      originalCalculationReference: string
    }
    ManualCalculationResponse: {
      enteredDates?: {
        [key: string]: string
      }
      /** Format: int64 */
      calculationRequestId: number
    }
    ComparisonInput: {
      criteria?: components['schemas']['JsonNode']
      /** @description The prison the analysis was run against */
      prison?: string
      /**
       * @description The type of comparison that was run
       * @enum {string}
       */
      comparisonType: 'ESTABLISHMENT_FULL' | 'MANUAL'
    }
    /** @description Criteria used in the comparison */
    JsonNode: Record<string, never>
    Comparison: {
      comparisonShortReference: string
      criteria: components['schemas']['JsonNode']
      prison?: string
      /** @enum {string} */
      comparisonType: 'ESTABLISHMENT_FULL' | 'MANUAL'
      /** Format: date-time */
      calculatedAt: string
      calculatedByUsername: string
      comparisonStatus: components['schemas']['ComparisonStatus']
      /** Format: int64 */
      numberOfPeopleCompared: number
      /** Format: int64 */
      numberOfPeopleComparisonFailedFor: number
      /** Format: int64 */
      numberOfMismatches: number
    }
    ComparisonStatus: {
      /** Format: int32 */
      id: number
      name: string
    }
    CreateComparisonDiscrepancyRequest: {
      /**
       * @description The impact of the discrepancy
       * @enum {string}
       */
      impact: 'POTENTIAL_RELEASE_IN_ERROR' | 'POTENTIAL_UNLAWFUL_DETENTION' | 'OTHER'
      /** @description The causes for the mismatch */
      causes: components['schemas']['DiscrepancyCause'][]
      /** @description Detail about the discrepancy */
      detail: string
      /**
       * @description The priority of resolving the discrepancy
       * @enum {string}
       */
      priority: 'LOW_RISK' | 'MEDIUM_RISK' | 'HIGH_RISK'
      /** @description The recommended action that needs to be taken for this discrepancy */
      action: string
    }
    /** @description The causes for the mismatch */
    DiscrepancyCause: {
      /**
       * @description A mismatch cause category
       * @enum {string}
       */
      category: 'CRD' | 'ERSED' | 'HDCED' | 'LED' | 'PED' | 'PRRD' | 'SED' | 'TUSED' | 'OTHER'
      /**
       * @description A subcategory for a cause of the mismatch
       * @enum {string}
       */
      subCategory:
        | 'SDS_PLUS'
        | 'NEW_RULES_NOT_APPLIED'
        | 'FOURTEEN_DAY_RULE_NOT_APPLIED'
        | 'INELIGIBLE_FOR_HDC'
        | 'RECALL_RELATED'
        | 'DATE_NOT_CALCULATED'
        | 'REMAND_OR_UAL_RELATED'
        | 'OTHER'
      /** @description Any other information on the mismatch cause */
      other?: string
    }
    ComparisonDiscrepancySummary: {
      /**
       * @description The impact of the discrepancy
       * @enum {string}
       */
      impact: 'POTENTIAL_RELEASE_IN_ERROR' | 'POTENTIAL_UNLAWFUL_DETENTION' | 'OTHER'
      /** @description The causes for the mismatch */
      causes: components['schemas']['DiscrepancyCause'][]
      /** @description Any extra detail about the discrepancy */
      detail?: string
      /**
       * @description The priority of resolving the discrepancy
       * @enum {string}
       */
      priority: 'LOW_RISK' | 'MEDIUM_RISK' | 'HIGH_RISK'
      /** @description The recommended action that needs to be taken for this discrepancy */
      action: string
    }
    ManualComparisonInput: {
      /** @description The prisoner ids the analysis was run against */
      prisonerIds: string[]
    }
    CalculationRequestModel: {
      calculationUserInputs?: components['schemas']['CalculationUserInputs']
      /** Format: int64 */
      calculationReasonId: number
      otherReasonDescription?: string
    }
    AFineSentence: {
      type: 'AFineSentence'
    } & (Omit<
      WithRequired<
        components['schemas']['AbstractSentence'],
        'consecutiveSentenceUUIDs' | 'identifier' | 'isSDSPlus' | 'offence' | 'sentencedAt'
      >,
      'type'
    > & {
      duration: components['schemas']['Duration']
      fineAmount?: number
    })
    AbstractSentence: {
      offence: components['schemas']['Offence']
      /** Format: date */
      sentencedAt: string
      /** Format: uuid */
      identifier: string
      consecutiveSentenceUUIDs: string[]
      /** Format: int32 */
      caseSequence?: number
      /** Format: int32 */
      lineSequence?: number
      caseReference?: string
      /** @enum {string} */
      recallType?: 'STANDARD_RECALL' | 'FIXED_TERM_RECALL_14' | 'FIXED_TERM_RECALL_28'
      isSDSPlus: boolean
      type: string
    }
    Adjustment: {
      /** Format: date */
      appliesToSentencesFrom: string
      /** Format: int32 */
      numberOfDays: number
      /** Format: date */
      fromDate?: string
      /** Format: date */
      toDate?: string
    }
    Adjustments: {
      adjustments?: {
        [key: string]: components['schemas']['Adjustment'][]
      }
    }
    Booking: {
      offender: components['schemas']['Offender']
      sentences: (
        | components['schemas']['AFineSentence']
        | components['schemas']['BotusSentence']
        | components['schemas']['DetentionAndTrainingOrderSentence']
        | components['schemas']['ExtendedDeterminateSentence']
        | components['schemas']['SopcSentence']
        | components['schemas']['StandardDeterminateSentence']
      )[]
      adjustments: components['schemas']['Adjustments']
      /** Format: date */
      returnToCustodyDate?: string
      fixedTermRecallDetails?: components['schemas']['FixedTermRecallDetails']
      /** Format: int64 */
      bookingId: number
      historicalTusedData?: components['schemas']['HistoricalTusedData']
    }
    BotusSentence: {
      type: 'BotusSentence'
    } & (Omit<
      WithRequired<
        components['schemas']['AbstractSentence'],
        'consecutiveSentenceUUIDs' | 'identifier' | 'isSDSPlus' | 'offence' | 'sentencedAt'
      >,
      'type'
    > & {
      duration: components['schemas']['Duration']
      /** Format: date */
      latestTusedDate?: string
      /** @enum {string} */
      latestTusedSource?: 'CRDS' | 'CRDS_OVERRIDDEN' | 'NOMIS' | 'NOMIS_OVERRIDDEN'
    })
    CalculatedReleaseDates: {
      dates: {
        [key: string]: string
      }
      /** Format: int64 */
      calculationRequestId: number
      /** Format: int64 */
      bookingId: number
      prisonerId: string
      /** @enum {string} */
      calculationStatus: 'PRELIMINARY' | 'CONFIRMED' | 'ERROR' | 'TEST' | 'RECORD_A_RECALL'
      calculationFragments?: components['schemas']['CalculationFragments']
      effectiveSentenceLength?: {
        /** Format: int32 */
        years?: number
        /** Format: int32 */
        months?: number
        /** Format: int32 */
        days?: number
        zero?: boolean
        negative?: boolean
        units?: {
          durationEstimated?: boolean
          duration?: {
            /** Format: int64 */
            seconds?: number
            zero?: boolean
            /** Format: int32 */
            nano?: number
            negative?: boolean
            positive?: boolean
          }
          timeBased?: boolean
          dateBased?: boolean
        }[]
        chronology?: {
          id?: string
          calendarType?: string
          isoBased?: boolean
        }
      }
      /** @enum {string} */
      calculationType:
        | 'CALCULATED'
        | 'MANUAL_DETERMINATE'
        | 'MANUAL_INDETERMINATE'
        | 'CALCULATED_WITH_APPROVED_DATES'
        | 'MANUAL_OVERRIDE'
        | 'CALCULATED_BY_SPECIALIST_SUPPORT'
      approvedDates?: {
        [key: string]: string
      }
      /** Format: uuid */
      calculationReference: string
      calculationReason?: components['schemas']['CalculationReason']
      otherReasonDescription?: string
      /** Format: date */
      calculationDate?: string
      /** @enum {string} */
      historicalTusedSource?: 'CRDS' | 'CRDS_OVERRIDDEN' | 'NOMIS' | 'NOMIS_OVERRIDDEN'
      /** @enum {string} */
      sdsEarlyReleaseAllocatedTranche?: 'TRANCHE_0' | 'TRANCHE_1' | 'TRANCHE_2'
      /** @enum {string} */
      sdsEarlyReleaseTranche?: 'TRANCHE_0' | 'TRANCHE_1' | 'TRANCHE_2'
      calculatedBooking?: components['schemas']['Booking']
    }
    CalculationFragments: {
      breakdownHtml: string
    }
    CalculationReason: {
      /** Format: int64 */
      id: number
      isOther: boolean
      displayName: string
    }
    DetentionAndTrainingOrderSentence: {
      type: 'DetentionAndTrainingOrderSentence'
    } & (Omit<
      WithRequired<
        components['schemas']['AbstractSentence'],
        'consecutiveSentenceUUIDs' | 'identifier' | 'isSDSPlus' | 'offence' | 'sentencedAt'
      >,
      'type'
    > & {
      duration: components['schemas']['Duration']
    })
    Duration: {
      durationElements: {
        [key: string]: number
      }
    }
    ExtendedDeterminateSentence: {
      type: 'ExtendedDeterminateSentence'
    } & (Omit<
      WithRequired<
        components['schemas']['AbstractSentence'],
        'consecutiveSentenceUUIDs' | 'identifier' | 'isSDSPlus' | 'offence' | 'sentencedAt'
      >,
      'type'
    > & {
      custodialDuration: components['schemas']['Duration']
      extensionDuration: components['schemas']['Duration']
      automaticRelease: boolean
    })
    FixedTermRecallDetails: {
      /** Format: int64 */
      bookingId: number
      /** Format: date */
      returnToCustodyDate: string
      /** Format: int32 */
      recallLength: number
    }
    HistoricalTusedData: {
      /** Format: date */
      tused?: string
      /** @enum {string} */
      historicalTusedSource: 'CRDS' | 'CRDS_OVERRIDDEN' | 'NOMIS' | 'NOMIS_OVERRIDDEN'
    }
    Offence: {
      /** Format: date */
      committedAt: string
      offenceCode?: string
    }
    Offender: {
      reference: string
      /** Format: date */
      dateOfBirth: string
      isActiveSexOffender: boolean
    }
    SopcSentence: {
      type: 'SopcSentence'
    } & (Omit<
      WithRequired<
        components['schemas']['AbstractSentence'],
        'consecutiveSentenceUUIDs' | 'identifier' | 'isSDSPlus' | 'offence' | 'sentencedAt'
      >,
      'type'
    > & {
      custodialDuration: components['schemas']['Duration']
      extensionDuration: components['schemas']['Duration']
      sdopcu18: boolean
    })
    StandardDeterminateSentence: {
      type: 'StandardDeterminateSentence'
    } & (Omit<
      WithRequired<
        components['schemas']['AbstractSentence'],
        'consecutiveSentenceUUIDs' | 'identifier' | 'isSDSPlus' | 'offence' | 'sentencedAt'
      >,
      'type'
    > & {
      duration: components['schemas']['Duration']
      /** @enum {string} */
      hasAnSDSEarlyReleaseExclusion: 'SEXUAL' | 'VIOLENT' | 'DOMESTIC_ABUSE' | 'NATIONAL_SECURITY' | 'TERRORISM' | 'NO'
    })
    CalculationResults: {
      calculatedReleaseDates?: components['schemas']['CalculatedReleaseDates']
      validationMessages: components['schemas']['ValidationMessage'][]
    }
    RelevantRemand: {
      /** Format: date */
      from: string
      /** Format: date */
      to: string
      /** Format: int32 */
      days: number
      /** Format: int32 */
      sentenceSequence: number
    }
    RelevantRemandCalculationRequest: {
      relevantRemands: components['schemas']['RelevantRemand'][]
      sentence: components['schemas']['RelevantRemandSentence']
      /** Format: date */
      calculateAt: string
    }
    RelevantRemandSentence: {
      /** Format: int32 */
      sequence: number
      /** Format: date */
      sentenceDate: string
      /** Format: date */
      recallDate?: string
      /** Format: int64 */
      bookingId: number
    }
    RelevantRemandCalculationResult: {
      /** Format: date */
      releaseDate?: string
      /** Format: date */
      postRecallReleaseDate?: string
      /** Format: int32 */
      unusedDeductions: number
      validationMessages: components['schemas']['ValidationMessage'][]
    }
    SubmitCalculationRequest: {
      calculationFragments: components['schemas']['CalculationFragments']
      approvedDates?: components['schemas']['ManualEntrySelectedDate'][]
      isSpecialistSupport?: boolean
    }
    WorkingDay: {
      /** Format: date */
      date: string
      adjustedForWeekend: boolean
      adjustedForBankHoliday: boolean
    }
    AnalysedSentenceAndOffence: {
      /** Format: int64 */
      bookingId: number
      /** Format: int32 */
      sentenceSequence: number
      /** Format: int32 */
      lineSequence: number
      /** Format: int32 */
      caseSequence: number
      /** Format: int32 */
      consecutiveToSequence?: number
      sentenceStatus: string
      sentenceCategory: string
      sentenceCalculationType: string
      sentenceTypeDescription: string
      /** Format: date */
      sentenceDate: string
      terms: components['schemas']['SentenceTerms'][]
      offence: components['schemas']['OffenderOffence']
      caseReference?: string
      courtDescription?: string
      fineAmount?: number
      /** @enum {string} */
      sentenceAndOffenceAnalysis: 'NEW' | 'UPDATED' | 'SAME'
      isSDSPlus: boolean
      /** @enum {string} */
      hasAnSDSEarlyReleaseExclusion: 'SEXUAL' | 'VIOLENT' | 'DOMESTIC_ABUSE' | 'NATIONAL_SECURITY' | 'TERRORISM' | 'NO'
    }
    OffenderOffence: {
      /** Format: int64 */
      offenderChargeId: number
      /** Format: date */
      offenceStartDate?: string
      /** Format: date */
      offenceEndDate?: string
      offenceCode: string
      offenceDescription: string
      indicators: string[]
    }
    SentenceTerms: {
      /** Format: int32 */
      years: number
      /** Format: int32 */
      months: number
      /** Format: int32 */
      weeks: number
      /** Format: int32 */
      days: number
      code: string
    }
    DateTypeDefinition: {
      type: string
      description: string
    }
    NonFridayReleaseDay: {
      /** Format: date */
      date: string
      usePolicy: boolean
    }
    CalculationViewConfiguration: {
      reference: string
      /** Format: int64 */
      calcId: number
    }
    HistoricCalculation: {
      offenderNo: string
      /** Format: date-time */
      calculationDate: string
      /** @enum {string} */
      calculationSource: 'NOMIS' | 'CRDS'
      calculationViewConfiguration?: components['schemas']['CalculationViewConfiguration']
      commentText?: string
      /** @enum {string} */
      calculationType?:
        | 'CALCULATED'
        | 'MANUAL_DETERMINATE'
        | 'MANUAL_INDETERMINATE'
        | 'CALCULATED_WITH_APPROVED_DATES'
        | 'MANUAL_OVERRIDE'
        | 'CALCULATED_BY_SPECIALIST_SUPPORT'
      establishment?: string
      /** Format: int64 */
      calculationRequestId?: number
      calculationReason?: string
      /** Format: int64 */
      offenderSentCalculationId?: number
    }
    ComparisonSummary: {
      comparisonShortReference: string
      prison?: string
      /** @enum {string} */
      comparisonType: 'ESTABLISHMENT_FULL' | 'MANUAL'
      /** Format: date-time */
      calculatedAt: string
      calculatedByUsername: string
      /** Format: int64 */
      numberOfMismatches: number
      /** Format: int64 */
      numberOfPeopleCompared: number
      /** Format: int64 */
      numberOfPeopleComparisonFailedFor: number
    }
    ComparisonMismatchSummary: {
      personId: string
      lastName?: string
      isValid: boolean
      isMatch: boolean
      validationMessages: components['schemas']['ValidationMessage'][]
      shortReference: string
      /** @enum {string} */
      misMatchType:
        | 'NONE'
        | 'RELEASE_DATES_MISMATCH'
        | 'VALIDATION_ERROR'
        | 'UNSUPPORTED_SENTENCE_TYPE'
        | 'FATAL_EXCEPTION'
      sdsSentencesIdentified: components['schemas']['JsonNode']
      establishment?: string
      fatalException?: string
    }
    ComparisonOverview: {
      comparisonShortReference: string
      prison?: string
      /** @enum {string} */
      comparisonType: 'ESTABLISHMENT_FULL' | 'MANUAL'
      /** Format: date-time */
      calculatedAt: string
      calculatedByUsername: string
      /** Format: int64 */
      numberOfMismatches: number
      /** Format: int64 */
      numberOfPeopleCompared: number
      /** Format: int64 */
      numberOfPeopleComparisonFailedFor: number
      mismatches: components['schemas']['ComparisonMismatchSummary'][]
      status: string
    }
    /** @description Adjustments details associated that are specifically added as part of a rule */
    AdjustmentDuration: {
      /**
       * Format: int64
       * @description Amount of adjustment
       */
      adjustmentValue: number
      /**
       * @description Unit of adjustment
       * @enum {string}
       */
      type:
        | 'Nanos'
        | 'Micros'
        | 'Millis'
        | 'Seconds'
        | 'Minutes'
        | 'Hours'
        | 'HalfDays'
        | 'Days'
        | 'Weeks'
        | 'Months'
        | 'Years'
        | 'Decades'
        | 'Centuries'
        | 'Millennia'
        | 'Eras'
        | 'Forever'
    }
    ComparisonPersonOverview: {
      personId: string
      lastName?: string
      isValid: boolean
      isMatch: boolean
      hasDiscrepancyRecord: boolean
      /** @enum {string} */
      mismatchType:
        | 'NONE'
        | 'RELEASE_DATES_MISMATCH'
        | 'VALIDATION_ERROR'
        | 'UNSUPPORTED_SENTENCE_TYPE'
        | 'FATAL_EXCEPTION'
      isActiveSexOffender?: boolean
      validationMessages: components['schemas']['ValidationMessage'][]
      shortReference: string
      /** Format: int64 */
      bookingId: number
      /** Format: date-time */
      calculatedAt: string
      crdsDates: {
        [key: string]: string
      }
      nomisDates: {
        [key: string]: string
      }
      overrideDates: {
        [key: string]: string
      }
      breakdownByReleaseDateType: {
        [key: string]: components['schemas']['ReleaseDateCalculationBreakdown']
      }
      sdsSentencesIdentified: components['schemas']['SentenceAndOffenceWithReleaseArrangements'][]
      fatalException?: string
    }
    /** @description Calculation breakdown details for a release date type */
    ReleaseDateCalculationBreakdown: {
      /**
       * @description Calculation rules used to determine this calculation.
       * @example [
       *       'HDCED_GE_MIN_PERIOD_LT_MIDPOINT'
       *     ]
       */
      rules: (
        | 'HDCED_GE_MIN_PERIOD_LT_MIDPOINT'
        | 'HDCED_GE_MIDPOINT_LT_MAX_PERIOD'
        | 'HDCED_MINIMUM_CUSTODIAL_PERIOD'
        | 'TUSED_LICENCE_PERIOD_LT_1Y'
        | 'LED_CONSEC_ORA_AND_NON_ORA'
        | 'UNUSED_ADA'
        | 'IMMEDIATE_RELEASE'
        | 'PED_EQUAL_TO_LATEST_NON_PED_CONDITIONAL_RELEASE'
        | 'PED_EQUAL_TO_LATEST_NON_PED_ACTUAL_RELEASE'
        | 'HDCED_ADJUSTED_TO_CONCURRENT_CONDITIONAL_RELEASE'
        | 'HDCED_ADJUSTED_TO_CONCURRENT_ACTUAL_RELEASE'
        | 'HDCED_ADJUSTED_TO_CONCURRENT_PRRD'
        | 'ERSED_MAX_PERIOD'
        | 'ERSED_MIN_EFFECTIVE_DATE'
        | 'ERSED_ADJUSTED_TO_CONCURRENT_TERM'
        | 'ERSED_BEFORE_SENTENCE_DATE'
        | 'ERSED_ADJUSTED_TO_MTD'
        | 'SDS_EARLY_RELEASE_ADJUSTED_TO_TRANCHE_1_COMMENCEMENT'
        | 'SDS_EARLY_RELEASE_ADJUSTED_TO_TRANCHE_2_COMMENCEMENT'
        | 'SDS_STANDARD_RELEASE_APPLIES'
        | 'SDS_EARLY_RELEASE_APPLIES'
      )[]
      /** @description Adjustments details associated that are specifically added as part of a rule */
      rulesWithExtraAdjustments: {
        [key: string]: components['schemas']['AdjustmentDuration']
      }
      /**
       * Format: int64
       * @description Amount of adjustment in days
       */
      adjustedDays: number
      /**
       * Format: date
       * @description Final release date (after all adjustments have been applied)
       */
      releaseDate: string
      /**
       * Format: date
       * @description Based on the screen design, the unadjusted date isn't derived in a consistent manner but is set as per the screen design
       */
      unadjustedDate: string
    }
    SentenceAndOffenceWithReleaseArrangements: {
      /** Format: int64 */
      bookingId: number
      /** Format: int32 */
      sentenceSequence: number
      /** Format: int32 */
      lineSequence: number
      /** Format: int32 */
      caseSequence: number
      /** Format: int32 */
      consecutiveToSequence?: number
      sentenceStatus: string
      sentenceCategory: string
      sentenceCalculationType: string
      sentenceTypeDescription: string
      /** Format: date */
      sentenceDate: string
      terms: components['schemas']['SentenceTerms'][]
      offence: components['schemas']['OffenderOffence']
      caseReference?: string
      courtDescription?: string
      fineAmount?: number
      isSDSPlus: boolean
      /** @enum {string} */
      hasAnSDSEarlyReleaseExclusion: 'SEXUAL' | 'VIOLENT' | 'DOMESTIC_ABUSE' | 'NATIONAL_SECURITY' | 'TERRORISM' | 'NO'
    }
    DetailedDate: {
      /** @enum {string} */
      type:
        | 'CRD'
        | 'LED'
        | 'SED'
        | 'NPD'
        | 'ARD'
        | 'TUSED'
        | 'PED'
        | 'SLED'
        | 'HDCED'
        | 'NCRD'
        | 'ETD'
        | 'MTD'
        | 'LTD'
        | 'DPRRD'
        | 'PRRD'
        | 'ESED'
        | 'ERSED'
        | 'TERSED'
        | 'APD'
        | 'HDCAD'
        | 'None'
        | 'Tariff'
        | 'ROTL'
        | 'HDCED4PLUS'
      description: string
      /** Format: date */
      date: string
      hints: components['schemas']['ReleaseDateHint'][]
    }
    LatestCalculation: {
      prisonerId: string
      /** Format: int64 */
      bookingId: number
      /** Format: date-time */
      calculatedAt: string
      /** Format: int64 */
      calculationRequestId?: number
      establishment?: string
      reason: string
      /** @enum {string} */
      source: 'NOMIS' | 'CRDS'
      dates: components['schemas']['DetailedDate'][]
    }
    ReleaseDateHint: {
      text: string
      link?: string
    }
    ReturnToCustodyDate: {
      /** Format: int64 */
      bookingId: number
      /** Format: date */
      returnToCustodyDate: string
    }
    CalculationContext: {
      /** Format: int64 */
      calculationRequestId: number
      /** Format: int64 */
      bookingId: number
      prisonerId: string
      /** @enum {string} */
      calculationStatus: 'PRELIMINARY' | 'CONFIRMED' | 'ERROR' | 'TEST' | 'RECORD_A_RECALL'
      /** Format: uuid */
      calculationReference: string
      calculationReason?: components['schemas']['CalculationReason']
      otherReasonDescription?: string
      /** Format: date */
      calculationDate?: string
      /** @enum {string} */
      calculationType:
        | 'CALCULATED'
        | 'MANUAL_DETERMINATE'
        | 'MANUAL_INDETERMINATE'
        | 'CALCULATED_WITH_APPROVED_DATES'
        | 'MANUAL_OVERRIDE'
        | 'CALCULATED_BY_SPECIALIST_SUPPORT'
    }
    ReleaseDatesAndCalculationContext: {
      calculation: components['schemas']['CalculationContext']
      dates: components['schemas']['DetailedDate'][]
    }
    Alert: {
      /** Format: date */
      dateCreated: string
      /** Format: date */
      dateExpires?: string
      alertType: string
      alertCode: string
    }
    AssignedLivingUnit: {
      agencyId: string
      locationId: number
      description: string
      agencyName: string
    }
    PrisonerDetails: {
      /** Format: int64 */
      bookingId: number
      offenderNo: string
      firstName: string
      lastName: string
      /** Format: date */
      dateOfBirth: string
      alerts: components['schemas']['Alert'][]
      agencyId: string
      assignedLivingUnit?: components['schemas']['AssignedLivingUnit']
    }
    NomisCalculationSummary: {
      reason: string
      /** Format: date-time */
      calculatedAt: string
      comment?: string
      releaseDates: components['schemas']['DetailedDate'][]
    }
    /** @description Calculation breakdown details */
    CalculationBreakdown: {
      concurrentSentences: components['schemas']['ConcurrentSentenceBreakdown'][]
      consecutiveSentence?: components['schemas']['ConsecutiveSentenceBreakdown']
      /** @description Breakdown details in a map keyed by release date type */
      breakdownByReleaseDateType: {
        [key: string]: components['schemas']['ReleaseDateCalculationBreakdown']
      }
      otherDates: {
        [key: string]: string
      }
      ersedNotApplicableDueToDtoLaterThanCrd: boolean
    }
    CalculationOriginalData: {
      prisonerDetails?: components['schemas']['PrisonerDetails']
      sentencesAndOffences?: components['schemas']['SentenceAndOffenceWithReleaseArrangements'][]
    }
    ConcurrentSentenceBreakdown: {
      /** Format: date */
      sentencedAt: string
      sentenceLength: string
      /** Format: int32 */
      sentenceLengthDays: number
      dates: {
        [key: string]: components['schemas']['DateBreakdown']
      }
      /** Format: int32 */
      lineSequence: number
      /** Format: int32 */
      caseSequence: number
      caseReference?: string
    }
    ConsecutiveSentenceBreakdown: {
      /** Format: date */
      sentencedAt: string
      sentenceLength: string
      /** Format: int32 */
      sentenceLengthDays: number
      dates: {
        [key: string]: components['schemas']['DateBreakdown']
      }
      sentenceParts: components['schemas']['ConsecutiveSentencePart'][]
    }
    ConsecutiveSentencePart: {
      /** Format: int32 */
      lineSequence: number
      /** Format: int32 */
      caseSequence: number
      caseReference?: string
      sentenceLength: string
      /** Format: int32 */
      sentenceLengthDays: number
      /** Format: int32 */
      consecutiveToLineSequence?: number
      /** Format: int32 */
      consecutiveToCaseSequence?: number
    }
    DateBreakdown: {
      /** Format: date */
      unadjusted: string
      /** Format: date */
      adjusted: string
      /** Format: int64 */
      daysFromSentenceStart: number
      /** Format: int64 */
      adjustedByDays: number
    }
    DetailedCalculationResults: {
      context: components['schemas']['CalculationContext']
      dates: {
        [key: string]: components['schemas']['DetailedDate']
      }
      approvedDates?: {
        [key: string]: components['schemas']['DetailedDate']
      }
      calculationOriginalData: components['schemas']['CalculationOriginalData']
      calculationBreakdown?: components['schemas']['CalculationBreakdown']
      /** @enum {string} */
      breakdownMissingReason?:
        | 'PRISON_API_DATA_MISSING'
        | 'BREAKDOWN_CHANGED_SINCE_LAST_CALCULATION'
        | 'UNSUPPORTED_CALCULATION_BREAKDOWN'
      /** @enum {string} */
      tranche?: 'TRANCHE_0' | 'TRANCHE_1' | 'TRANCHE_2'
    }
    BookingAdjustment: {
      active: boolean
      /** Format: date */
      fromDate: string
      /** Format: date */
      toDate?: string
      /** Format: int32 */
      numberOfDays: number
      /** @enum {string} */
      type:
        | 'ADDITIONAL_DAYS_AWARDED'
        | 'LAWFULLY_AT_LARGE'
        | 'RESTORED_ADDITIONAL_DAYS_AWARDED'
        | 'SPECIAL_REMISSION'
        | 'UNLAWFULLY_AT_LARGE'
    }
    BookingAndSentenceAdjustments: {
      bookingAdjustments: components['schemas']['BookingAdjustment'][]
      sentenceAdjustments: components['schemas']['SentenceAdjustment'][]
    }
    SentenceAdjustment: {
      /** Format: int32 */
      sentenceSequence: number
      active: boolean
      /** Format: date */
      fromDate?: string
      /** Format: date */
      toDate?: string
      /** Format: int32 */
      numberOfDays: number
      /** @enum {string} */
      type: 'RECALL_SENTENCE_REMAND' | 'RECALL_SENTENCE_TAGGED_BAIL' | 'REMAND' | 'TAGGED_BAIL' | 'UNUSED_REMAND'
    }
    AnalyzedBookingAdjustment: {
      active: boolean
      /** Format: date */
      fromDate: string
      /** Format: date */
      toDate?: string
      /** Format: int32 */
      numberOfDays: number
      /** @enum {string} */
      type:
        | 'ADDITIONAL_DAYS_AWARDED'
        | 'LAWFULLY_AT_LARGE'
        | 'RESTORED_ADDITIONAL_DAYS_AWARDED'
        | 'SPECIAL_REMISSION'
        | 'UNLAWFULLY_AT_LARGE'
      /** @enum {string} */
      analysisResult: 'NEW' | 'SAME'
    }
    AnalyzedBookingAndSentenceAdjustments: {
      bookingAdjustments: components['schemas']['AnalyzedBookingAdjustment'][]
      sentenceAdjustments: components['schemas']['AnalyzedSentenceAdjustment'][]
    }
    AnalyzedSentenceAdjustment: {
      /** Format: int32 */
      sentenceSequence: number
      active: boolean
      /** Format: date */
      fromDate?: string
      /** Format: date */
      toDate?: string
      /** Format: int32 */
      numberOfDays: number
      /** @enum {string} */
      type: 'RECALL_SENTENCE_REMAND' | 'RECALL_SENTENCE_TAGGED_BAIL' | 'REMAND' | 'TAGGED_BAIL' | 'UNUSED_REMAND'
      /** @enum {string} */
      analysisResult: 'NEW' | 'SAME'
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  validate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CalculationUserInputs']
      }
    }
    responses: {
      /** @description Validation job has run successfully, the response indicates if there are any errors */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
    }
  }
  calculate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdjustmentServiceAdjustment'][]
      }
    }
    responses: {
      /** @description Calculated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UnusedDeductionCalculationResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UnusedDeductionCalculationResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UnusedDeductionCalculationResponse']
        }
      }
    }
  }
  storeGenuineOverride: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GenuineOverrideRequest']
      }
    }
    responses: {
      /** @description Returns a GenuineOverrideResponse */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GenuineOverrideResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GenuineOverrideResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GenuineOverrideResponse']
        }
      }
    }
  }
  storeGenuineOverrideDates: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GenuineOverrideDateRequest']
      }
    }
    responses: {
      /** @description Returns a GenuineOverrideResponse */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GenuineOverrideDateResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GenuineOverrideDateResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GenuineOverrideDateResponse']
        }
      }
    }
  }
  storeManualCalculation: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ManualEntryRequest']
      }
    }
    responses: {
      /** @description Returns a ManualCalculationResponse */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ManualCalculationResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ManualCalculationResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ManualCalculationResponse']
        }
      }
    }
  }
  getComparisons: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a list of comparisons Comparison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonSummary'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonSummary'][]
        }
      }
    }
  }
  createComparison: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ComparisonInput']
      }
    }
    responses: {
      /** @description Returns a new Comparison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Comparison']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Comparison']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Comparison']
        }
      }
    }
  }
  getComparisonPersonDiscrepancy: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
        /**
         * @description The short reference of the mismatch
         * @example A1B2C3D4
         */
        mismatchReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a summary of a comparison person discrepancy */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonDiscrepancySummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonDiscrepancySummary']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonDiscrepancySummary']
        }
      }
    }
  }
  createComparisonPersonDiscrepancy: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
        /**
         * @description The short reference of the mismatch
         * @example A1B2C3D4
         */
        mismatchReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateComparisonDiscrepancyRequest']
      }
    }
    responses: {
      /** @description New discrepancy created and summary returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonDiscrepancySummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonDiscrepancySummary']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonDiscrepancySummary']
        }
      }
    }
  }
  getManualComparisons: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a list of comparisons Comparison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonSummary'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonSummary'][]
        }
      }
    }
  }
  createComparison_1: {
    parameters: {
      query?: never
      header: {
        Authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ManualComparisonInput']
      }
    }
    responses: {
      /** @description Returns a new Comparison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Comparison']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Comparison']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Comparison']
        }
      }
    }
  }
  getComparisonPersonDiscrepancy_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
        /**
         * @description The short reference of the mismatch
         * @example A1B2C3D4
         */
        mismatchReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a summary of a comparison person discrepancy */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonDiscrepancySummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonDiscrepancySummary']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonDiscrepancySummary']
        }
      }
    }
  }
  createComparisonPersonDiscrepancy_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
        /**
         * @description The short reference of the mismatch
         * @example A1B2C3D4
         */
        mismatchReference: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateComparisonDiscrepancyRequest']
      }
    }
    responses: {
      /** @description New discrepancy created and summary returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonDiscrepancySummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonDiscrepancySummary']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonDiscrepancySummary']
        }
      }
    }
  }
  calculate_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CalculationRequestModel']
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  testCalculation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CalculationRequestModel']
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationResults']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationResults']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationResults']
        }
      }
    }
  }
  relevantRemandCalculation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RelevantRemandCalculationRequest']
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RelevantRemandCalculationResult']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RelevantRemandCalculationResult']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RelevantRemandCalculationResult']
        }
      }
    }
  }
  calculateForRecall: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns calculated dates */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unprocessable request, the existing data cannot be used to perform a calculation */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  confirmCalculation: {
    parameters: {
      query?: never
      header?: never
      path: {
        calculationRequestId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubmitCalculationRequest']
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description No calculation exists for the passed calculationRequestId or the write to NOMIS has failed */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description The booking data that was used for the preliminary calculation has changed */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  previousWorkingDay: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The date to adjust
         * @example 2021-10-28
         */
        date: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns previous working day */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
    }
  }
  nextWorkingDay: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The date to adjust
         * @example 2021-10-28
         */
        date: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns next working day */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
    }
  }
  validateSupported: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Validation job has run successfully, the response indicates if there are any errors */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
    }
  }
  validateForManualEntry: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The prisoners ID (aka nomisId)
         * @example A1234AB
         */
        prisonerId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Validation job has run successfully, the response indicates if there are any errors */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
    }
  }
  getGenuineOverride: {
    parameters: {
      query?: never
      header?: never
      path: {
        calculationReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a GenuineOverrideResponse */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GenuineOverrideResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GenuineOverrideResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GenuineOverrideResponse']
        }
      }
      /** @description Not Found, a genuine override doesn't exist for the calculation reference */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GenuineOverrideResponse']
        }
      }
    }
  }
  getSentencesAndOffences: {
    parameters: {
      query?: never
      header?: never
      path: {
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a List<AnalyzedSentenceAndOffences */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalysedSentenceAndOffence'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalysedSentenceAndOffence'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalysedSentenceAndOffence'][]
        }
      }
    }
  }
  getDateTypeDefinitions: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the date types and their definitions */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DateTypeDefinition'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DateTypeDefinition'][]
        }
      }
    }
  }
  nonFridayReleaseDay: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The date to adjust
         * @example 2021-10-28
         */
        date: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns non friday release day */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonFridayReleaseDay']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonFridayReleaseDay']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonFridayReleaseDay']
        }
      }
    }
  }
  hasRecallSentences: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The booking ID to check against
         * @example 100001
         */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a boolean value */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': boolean
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': boolean
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': boolean
        }
      }
    }
  }
  hasIndeterminateSentences: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The booking ID to check against
         * @example 100001
         */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a boolean value */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': boolean
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': boolean
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': boolean
        }
      }
    }
  }
  getCalculationResults: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The nomsId of the prisoner
         * @example AD123A
         */
        nomsId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns historic calculations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HistoricCalculation'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HistoricCalculation'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HistoricCalculation'][]
        }
      }
      /** @description This prisoner id does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HistoricCalculation'][]
        }
      }
    }
  }
  getComparisonByShortReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a list of comparisons Comparison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonOverview']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonOverview']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonOverview']
        }
      }
    }
  }
  getComparisonMismatchByShortReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
        /**
         * @description The short reference of the mismatch
         * @example A1B2C3D4
         */
        mismatchReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a details of a comparison mismatch */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonPersonOverview']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonPersonOverview']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonPersonOverview']
        }
      }
    }
  }
  getCountOfPersonsInComparison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a list of comparisons Comparison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
    }
  }
  getComparisonByShortReference_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a list of comparisons Comparison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonOverview']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonOverview']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonOverview']
        }
      }
    }
  }
  getManualComparisonMismatchByShortReference: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
        /**
         * @description The short reference of the mismatch
         * @example A1B2C3D4
         */
        mismatchReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a details of a comparison mismatch */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonPersonOverview']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonPersonOverview']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComparisonPersonOverview']
        }
      }
    }
  }
  getCountOfPersonsInComparison_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a list of comparisons Comparison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
    }
  }
  getCalculationResults_1: {
    parameters: {
      query?: {
        checkForChange?: boolean
      }
      header?: never
      path: {
        /**
         * @description The calculationRequestId of the results
         * @example 123ABC
         */
        calculationReference: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns calculated dates */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  getLatestCalculation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the prisoner
         * @example ABC123
         */
        prisonerId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns calculated dates */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LatestCalculation']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LatestCalculation']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LatestCalculation']
        }
      }
      /** @description The prisoner could not be found or there are no calculations yet */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LatestCalculation']
        }
      }
    }
  }
  getSentencesAndOffence: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The calculationRequestId of the calculation
         * @example 123456
         */
        calculationRequestId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns sentences and offences */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceAndOffenceWithReleaseArrangements'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceAndOffenceWithReleaseArrangements'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceAndOffenceWithReleaseArrangements'][]
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceAndOffenceWithReleaseArrangements'][]
        }
      }
    }
  }
  getReturnToCustodyDate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The calculationRequestId of the calculation
         * @example 123456
         */
        calculationRequestId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns return to custody */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
    }
  }
  getConfirmedCalculationResults: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
        /**
         * @description The booking ID associated with the calculation
         * @example 100001
         */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns calculated dates */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description No confirmed calculation exists for this prisoner and booking */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  getCalculationResults_2: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The calculationRequestId of the results
         * @example 123456
         */
        calculationRequestId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns calculated dates */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  getKeyDatesForABooking: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The calculation request id of the offender
         * @example 123456
         */
        calculationRequestId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns list of release dates based on a calculation request id */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReleaseDatesAndCalculationContext']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReleaseDatesAndCalculationContext']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReleaseDatesAndCalculationContext']
        }
      }
      /** @description No release dates exists for this calculation request id */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReleaseDatesAndCalculationContext']
        }
      }
    }
  }
  getPrisonerDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The calculationRequestId of the calculation
         * @example 123456
         */
        calculationRequestId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns prisoner details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
    }
  }
  getNomisCalculationSummary: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderSentCalculationId of the offender booking or a calculation
         * @example 123456
         */
        offenderSentCalculationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns Nomis calculation summary with release dates based on a offenderSentCalculationId */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NomisCalculationSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NomisCalculationSummary']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NomisCalculationSummary']
        }
      }
      /** @description No nomis calculation summary - release dates exists for this offenderSentCalculationId */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NomisCalculationSummary']
        }
      }
    }
  }
  getDetailedResults: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The calculationRequestId of the results
         * @example 123456
         */
        calculationRequestId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns calculated dates */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DetailedCalculationResults']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DetailedCalculationResults']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DetailedCalculationResults']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DetailedCalculationResults']
        }
      }
    }
  }
  getCalculationInput: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The calculationRequestId of the calculation
         * @example 123456
         */
        calculationRequestId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns calculation inputs */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationUserInputs']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationUserInputs']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationUserInputs']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationUserInputs']
        }
      }
    }
  }
  getCalculationBreakdown: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The calculationRequestId of the breakdown
         * @example 123456
         */
        calculationRequestId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns breakdown of calculated dates */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
    }
  }
  get: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The calculationRequestId of the calculation
         * @example 123456
         */
        calculationRequestId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns adjustments */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
    }
  }
  getActiveCalculationReasons: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns list of active reasons */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationReason'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationReason'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationReason'][]
        }
      }
      /** @description No active calculation reasons were found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CalculationReason'][]
        }
      }
    }
  }
  getBookingAndSentenceAdjustments: {
    parameters: {
      query?: never
      header?: never
      path: {
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns a List<AnalyzedBookingAndSentenceAdjustments */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalyzedBookingAndSentenceAdjustments']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalyzedBookingAndSentenceAdjustments']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalyzedBookingAndSentenceAdjustments']
        }
      }
    }
  }
}
type WithRequired<T, K extends keyof T> = T & {
  [P in K]-?: T[P]
}
