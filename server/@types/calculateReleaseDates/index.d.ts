/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/validation/{prisonerId}/full-validation': {
    /**
     * Validates that the data for the given prisoner in NOMIS can be used to calculate a release date
     * @description This endpoint will validate that the data for the given prisoner in NOMIS can be supported by the calculate release dates engine
     */
    post: operations['validate']
  }
  '/calculation/{prisonerId}': {
    /**
     * Calculate release dates for a prisoner - preliminary calculation, this does not publish to NOMIS
     * @description This endpoint will calculate release dates based on a prisoners latest booking - this is a PRELIMINARY calculation that will not be published to NOMIS
     */
    post: operations['calculate']
  }
  '/calculation/{prisonerId}/test': {
    /**
     * Calculate release dates for a prisoner - test calculation, this does not publish to NOMIS
     * @description This endpoint will calculate release dates based on a prisoners latest booking, this can includeinactive bookings of historic prisoners. Endpoint is used to test calculations against NOMIS.
     */
    post: operations['testCalculation']
  }
  '/calculation/confirm/{calculationRequestId}': {
    /**
     * Calculate release dates and persist the results for a prisoners latest booking
     * @description This endpoint will calculate release dates based on a prisoners latest booking
     */
    post: operations['confirmCalculation']
  }
  '/working-day/previous/{date}': {
    /**
     * Find the previous working day from a given date
     * @description Finds the previous working day, adjusting for weekends and bank holidays
     */
    get: operations['previousWorkingDay']
  }
  '/working-day/next/{date}': {
    /**
     * Find the next working day from a given date
     * @description Finds the next working day, adjusting for weekends and bank holidays
     */
    get: operations['nextWorkingDay']
  }
  '/calculation/{prisonerId}/user-questions': {
    /**
     * Return which sentences and offences may be considered for different calculation rules
     * @description This endpoint will return which sentences and offences may be considered for different calculation rules.We will have to ask the user for clarification if any of the rules apply beacuse we cannot trust input data from NOMIS
     */
    get: operations['getCalculationUserQuestions']
  }
  '/calculation/sentence-and-offences/{calculationRequestId}': {
    /**
     * Get sentences and offences for a calculationRequestId
     * @description This endpoint will return the sentences and offences based on a calculationRequestId
     */
    get: operations['getSentencesAndOffence']
  }
  '/calculation/return-to-custody/{calculationRequestId}': {
    /**
     * Get return to custody date for a calculationRequestId
     * @description This endpoint will return the return to custody date based on a calculationRequestId
     */
    get: operations['getReturnToCustodyDate']
  }
  '/calculation/results/{prisonerId}/{bookingId}': {
    /**
     * Get confirmed release dates for a prisoner's specific booking
     * @description This endpoint will return the confirmed release dates based on a prisoners booking
     */
    get: operations['getConfirmedCalculationResults']
  }
  '/calculation/results/{calculationRequestId}': {
    /**
     * Get release dates for a calculationRequestId
     * @description This endpoint will return the release dates based on a calculationRequestId
     */
    get: operations['getCalculationResults']
  }
  '/calculation/prisoner-details/{calculationRequestId}': {
    /**
     * Get prisoner details for a calculationRequestId
     * @description This endpoint will return the prisoner details based on a calculationRequestId
     */
    get: operations['getPrisonerDetails']
  }
  '/calculation/calculation-user-input/{calculationRequestId}': {
    /**
     * Get user input for a calculationRequestId
     * @description This endpoint will return the user input based on a calculationRequestId
     */
    get: operations['getCalculationInput']
  }
  '/calculation/breakdown/{calculationRequestId}': {
    /**
     * Get breakdown for a calculationRequestId
     * @description This endpoint will return the breakdown based on a calculationRequestId
     */
    get: operations['getCalculationBreakdown']
  }
  '/calculation/adjustments/{calculationRequestId}': {
    /**
     * Get adjustments for a calculationRequestId
     * @description This endpoint will return the adjustments based on a calculationRequestId
     */
    get: operations['get']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description List of sentences and the users input for each sentence */
    CalculationSentenceUserInput: {
      /** Format: int32 */
      sentenceSequence: number
      offenceCode: string
      /** @enum {string} */
      userInputType: 'ORIGINAL' | 'FOUR_TO_UNDER_SEVEN' | 'SECTION_250' | 'UPDATED'
      userChoice: boolean
    }
    CalculationUserInputs: {
      /** @description List of sentences and the users input for each sentence */
      sentenceCalculationUserInputs: components['schemas']['CalculationSentenceUserInput'][]
      /** @description A flag to indicate whether to calculate ERSED. */
      calculateErsed: boolean
      /** @description Whether to use offence indicators from another system for the calculation or user's input. */
      useOffenceIndicators: boolean
    }
    /** @description Validation message details */
    ValidationMessage: {
      /**
       * @description Validation code details
       * @enum {string}
       */
      code:
        | 'ADJUSTMENT_AFTER_RELEASE_ADA'
        | 'ADJUSTMENT_AFTER_RELEASE_RADA'
        | 'ADJUSTMENT_AFTER_RELEASE_UAL'
        | 'ADJUSTMENT_FUTURE_DATED_ADA'
        | 'ADJUSTMENT_FUTURE_DATED_RADA'
        | 'ADJUSTMENT_FUTURE_DATED_UAL'
        | 'A_FINE_SENTENCE_CONSECUTIVE'
        | 'A_FINE_SENTENCE_CONSECUTIVE_TO'
        | 'A_FINE_SENTENCE_MISSING_FINE_AMOUNT'
        | 'A_FINE_SENTENCE_WITH_PAYMENTS'
        | 'CUSTODIAL_PERIOD_EXTINGUISHED_REMAND'
        | 'CUSTODIAL_PERIOD_EXTINGUISHED_TAGGED_BAIL'
        | 'EDS18_EDS21_EDSU18_SENTENCE_TYPE_INCORRECT'
        | 'EDS_LICENCE_TERM_LESS_THAN_ONE_YEAR'
        | 'EDS_LICENCE_TERM_MORE_THAN_EIGHT_YEARS'
        | 'FTR_SENTENCES_CONFLICT_WITH_EACH_OTHER'
        | 'FTR_TYPE_14_DAYS_BUT_LENGTH_IS_28'
        | 'FTR_TYPE_28_DAYS_BUT_LENGTH_IS_14'
        | 'FTR_14_DAYS_SENTENCE_GE_12_MONTHS'
        | 'FTR_14_DAYS_AGGREGATE_GE_12_MONTHS'
        | 'FTR_28_DAYS_SENTENCE_LT_12_MONTHS'
        | 'FTR_28_DAYS_AGGREGATE_LT_12_MONTHS'
        | 'FTR_TYPE_14_DAYS_SENTENCE_GE_12_MONTHS'
        | 'FTR_TYPE_14_DAYS_AGGREGATE_GE_12_MONTHS'
        | 'FTR_TYPE_28_DAYS_SENTENCE_LT_12_MONTHS'
        | 'FTR_TYPE_28_DAYS_AGGREGATE_LT_12_MONTHS'
        | 'LASPO_AR_SENTENCE_TYPE_INCORRECT'
        | 'MORE_THAN_ONE_IMPRISONMENT_TERM'
        | 'MORE_THAN_ONE_LICENCE_TERM'
        | 'MULTIPLE_SENTENCES_CONSECUTIVE_TO'
        | 'OFFENCE_DATE_AFTER_SENTENCE_RANGE_DATE'
        | 'OFFENCE_DATE_AFTER_SENTENCE_START_DATE'
        | 'OFFENCE_MISSING_DATE'
        | 'PRISONER_SUBJECT_TO_PTD'
        | 'REMAND_FROM_TO_DATES_REQUIRED'
        | 'REMAND_OVERLAPS_WITH_REMAND'
        | 'REMAND_OVERLAPS_WITH_SENTENCE'
        | 'SEC236A_SENTENCE_TYPE_INCORRECT'
        | 'SEC_91_SENTENCE_TYPE_INCORRECT'
        | 'SENTENCE_HAS_MULTIPLE_TERMS'
        | 'SENTENCE_HAS_NO_IMPRISONMENT_TERM'
        | 'SENTENCE_HAS_NO_LICENCE_TERM'
        | 'SOPC18_SOPC21_SENTENCE_TYPE_INCORRECT'
        | 'SOPC_LICENCE_TERM_NOT_12_MONTHS'
        | 'UNSUPPORTED_ADJUSTMENT_LAWFULLY_AT_LARGE'
        | 'UNSUPPORTED_ADJUSTMENT_SPECIAL_REMISSION'
        | 'UNSUPPORTED_SENTENCE_TYPE'
        | 'ZERO_IMPRISONMENT_TERM'
      arguments: string[]
      message: string
      /** @enum {string} */
      type: 'UNSUPPORTED_SENTENCE' | 'UNSUPPORTED_CALCULATION' | 'VALIDATION'
    }
    CalculatedReleaseDates: {
      dates: {
        [key: string]: string | undefined
      }
      /** Format: int64 */
      calculationRequestId: number
      /** Format: int64 */
      bookingId: number
      prisonerId: string
      /** @enum {string} */
      calculationStatus: 'PRELIMINARY' | 'CONFIRMED' | 'ERROR' | 'TEST'
      calculationFragments?: components['schemas']['CalculationFragments']
      effectiveSentenceLength?: {
        /** Format: int32 */
        years?: number
        /** Format: int32 */
        months?: number
        /** Format: int32 */
        days?: number
        zero?: boolean
        negative?: boolean
        units?: {
          durationEstimated?: boolean
          duration?: {
            /** Format: int64 */
            seconds?: number
            zero?: boolean
            /** Format: int32 */
            nano?: number
            negative?: boolean
            positive?: boolean
          }
          timeBased?: boolean
          dateBased?: boolean
        }[]
        chronology?: {
          id?: string
          calendarType?: string
          isoBased?: boolean
        }
      }
    }
    CalculationFragments: {
      breakdownHtml: string
    }
    CalculationResults: {
      calculatedReleaseDates?: components['schemas']['CalculatedReleaseDates']
      validationMessages: components['schemas']['ValidationMessage'][]
    }
    WorkingDay: {
      /** Format: date */
      date: string
      adjustedForWeekend: boolean
      adjustedForBankHoliday: boolean
    }
    CalculationSentenceQuestion: {
      /** Format: int32 */
      sentenceSequence: number
      /** @enum {string} */
      userInputType: 'ORIGINAL' | 'FOUR_TO_UNDER_SEVEN' | 'SECTION_250' | 'UPDATED'
    }
    CalculationUserQuestions: {
      sentenceQuestions: components['schemas']['CalculationSentenceQuestion'][]
    }
    OffenderOffence: {
      /** Format: int64 */
      offenderChargeId: number
      /** Format: date */
      offenceStartDate?: string
      /** Format: date */
      offenceEndDate?: string
      offenceCode: string
      offenceDescription: string
      indicators: string[]
      pcscSec250: boolean
      pcscSds: boolean
      pcscSdsPlus: boolean
      scheduleFifteenMaximumLife: boolean
    }
    SentenceAndOffences: {
      /** Format: int64 */
      bookingId: number
      /** Format: int32 */
      sentenceSequence: number
      /** Format: int32 */
      lineSequence: number
      /** Format: int32 */
      caseSequence: number
      /** Format: int32 */
      consecutiveToSequence?: number
      sentenceStatus: string
      sentenceCategory: string
      sentenceCalculationType: string
      sentenceTypeDescription: string
      /** Format: date */
      sentenceDate: string
      terms: components['schemas']['SentenceTerms'][]
      offences: components['schemas']['OffenderOffence'][]
      caseReference?: string
      courtDescription?: string
      fineAmount?: number
    }
    SentenceTerms: {
      /** Format: int32 */
      years: number
      /** Format: int32 */
      months: number
      /** Format: int32 */
      weeks: number
      /** Format: int32 */
      days: number
      code: string
    }
    ReturnToCustodyDate: {
      /** Format: int64 */
      bookingId: number
      /** Format: date */
      returnToCustodyDate: string
    }
    Alert: {
      /** Format: date */
      dateCreated: string
      /** Format: date */
      dateExpires?: string
      alertType: string
      alertCode: string
    }
    PrisonerDetails: {
      /** Format: int64 */
      bookingId: number
      offenderNo: string
      firstName: string
      lastName: string
      /** Format: date */
      dateOfBirth: string
      alerts: components['schemas']['Alert'][]
      agencyId: string
    }
    /** @description Adjustments details associated that are specifically added as part of a rule */
    AdjustmentDuration: {
      /**
       * Format: int32
       * @description Amount of adjustment
       */
      adjustmentValue: number
      /**
       * @description Unit of adjustment
       * @enum {string}
       */
      type:
        | 'Nanos'
        | 'Micros'
        | 'Millis'
        | 'Seconds'
        | 'Minutes'
        | 'Hours'
        | 'HalfDays'
        | 'Days'
        | 'Weeks'
        | 'Months'
        | 'Years'
        | 'Decades'
        | 'Centuries'
        | 'Millennia'
        | 'Eras'
        | 'Forever'
        | 'DAYS'
        | 'MONTHS'
    }
    /** @description Calculation breakdown details */
    CalculationBreakdown: {
      concurrentSentences: components['schemas']['ConcurrentSentenceBreakdown'][]
      consecutiveSentence?: components['schemas']['ConsecutiveSentenceBreakdown']
      /** @description Breakdown details in a map keyed by release date type */
      breakdownByReleaseDateType: {
        [key: string]: components['schemas']['ReleaseDateCalculationBreakdown'] | undefined
      }
      otherDates: {
        [key: string]: string | undefined
      }
    }
    ConcurrentSentenceBreakdown: {
      /** Format: date */
      sentencedAt: string
      sentenceLength: string
      /** Format: int32 */
      sentenceLengthDays: number
      dates: {
        [key: string]: components['schemas']['DateBreakdown'] | undefined
      }
      /** Format: int32 */
      lineSequence: number
      /** Format: int32 */
      caseSequence: number
      caseReference?: string
    }
    ConsecutiveSentenceBreakdown: {
      /** Format: date */
      sentencedAt: string
      sentenceLength: string
      /** Format: int32 */
      sentenceLengthDays: number
      dates: {
        [key: string]: components['schemas']['DateBreakdown'] | undefined
      }
      sentenceParts: components['schemas']['ConsecutiveSentencePart'][]
    }
    ConsecutiveSentencePart: {
      /** Format: int32 */
      lineSequence: number
      /** Format: int32 */
      caseSequence: number
      caseReference?: string
      sentenceLength: string
      /** Format: int32 */
      sentenceLengthDays: number
      /** Format: int32 */
      consecutiveToLineSequence?: number
      /** Format: int32 */
      consecutiveToCaseSequence?: number
    }
    DateBreakdown: {
      /** Format: date */
      unadjusted: string
      /** Format: date */
      adjusted: string
      /** Format: int64 */
      daysFromSentenceStart: number
      /** Format: int64 */
      adjustedByDays: number
    }
    /** @description Calculation breakdown details for a release date type */
    ReleaseDateCalculationBreakdown: {
      /**
       * @description Calculation rules used to determine this calculation.
       * @example [
       *   "HDCED_GE_12W_LT_18M"
       * ]
       */
      rules: (
        | 'HDCED_GE_12W_LT_18M'
        | 'HDCED_GE_18M_LT_4Y'
        | 'HDCED_MINIMUM_14D'
        | 'TUSED_LICENCE_PERIOD_LT_1Y'
        | 'LED_CONSEC_ORA_AND_NON_ORA'
        | 'UNUSED_ADA'
        | 'IMMEDIATE_RELEASE'
        | 'PED_EQUAL_TO_LATEST_NON_PED_CONDITIONAL_RELEASE'
        | 'PED_EQUAL_TO_LATEST_NON_PED_ACTUAL_RELEASE'
        | 'HDCED_ADJUSTED_TO_CONCURRENT_CONDITIONAL_RELEASE'
        | 'HDCED_ADJUSTED_TO_CONCURRENT_ACTUAL_RELEASE'
        | 'ERSED_TWO_THIRDS'
        | 'ERSED_HALFWAY'
        | 'ERSED_ONE_YEAR'
        | 'ERSED_ADJUSTED_TO_CONCURRENT_TERM'
        | 'ERSED_BEFORE_SENTENCE_DATE'
      )[]
      /** @description Adjustments details associated that are specifically added as part of a rule */
      rulesWithExtraAdjustments: {
        [key: string]: components['schemas']['AdjustmentDuration'] | undefined
      }
      /**
       * Format: int32
       * @description Amount of adjustment in days
       */
      adjustedDays: number
      /**
       * Format: date
       * @description Final release date (after all adjustments have been applied)
       */
      releaseDate: string
      /**
       * Format: date
       * @description Based on the screen design, the unadjusted date isn't derived in a consistent manner but is set as per the screen design
       */
      unadjustedDate: string
    }
    BookingAdjustment: {
      active: boolean
      /** Format: date */
      fromDate: string
      /** Format: date */
      toDate?: string
      /** Format: int32 */
      numberOfDays: number
      /** @enum {string} */
      type:
        | 'ADDITIONAL_DAYS_AWARDED'
        | 'LAWFULLY_AT_LARGE'
        | 'RESTORED_ADDITIONAL_DAYS_AWARDED'
        | 'SPECIAL_REMISSION'
        | 'UNLAWFULLY_AT_LARGE'
    }
    BookingAndSentenceAdjustments: {
      bookingAdjustments: components['schemas']['BookingAdjustment'][]
      sentenceAdjustments: components['schemas']['SentenceAdjustment'][]
    }
    SentenceAdjustment: {
      /** Format: int32 */
      sentenceSequence: number
      active: boolean
      /** Format: date */
      fromDate?: string
      /** Format: date */
      toDate?: string
      /** Format: int32 */
      numberOfDays: number
      /** @enum {string} */
      type: 'RECALL_SENTENCE_REMAND' | 'RECALL_SENTENCE_TAGGED_BAIL' | 'REMAND' | 'TAGGED_BAIL' | 'UNUSED_REMAND'
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export interface operations {
  validate: {
    /**
     * Validates that the data for the given prisoner in NOMIS can be used to calculate a release date
     * @description This endpoint will validate that the data for the given prisoner in NOMIS can be supported by the calculate release dates engine
     */
    parameters: {
      /**
       * @description The prisoners ID (aka nomsId)
       * @example A1234AB
       */
      path: {
        prisonerId: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CalculationUserInputs']
      }
    }
    responses: {
      /** @description Validation job has run successfully, the response indicates if there are any errors */
      200: {
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
    }
  }
  calculate: {
    /**
     * Calculate release dates for a prisoner - preliminary calculation, this does not publish to NOMIS
     * @description This endpoint will calculate release dates based on a prisoners latest booking - this is a PRELIMINARY calculation that will not be published to NOMIS
     */
    parameters: {
      /**
       * @description The prisoners ID (aka nomsId)
       * @example A1234AB
       */
      path: {
        prisonerId: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CalculationUserInputs']
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  testCalculation: {
    /**
     * Calculate release dates for a prisoner - test calculation, this does not publish to NOMIS
     * @description This endpoint will calculate release dates based on a prisoners latest booking, this can includeinactive bookings of historic prisoners. Endpoint is used to test calculations against NOMIS.
     */
    parameters: {
      /**
       * @description The prisoners ID (aka nomsId)
       * @example A1234AB
       */
      path: {
        prisonerId: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CalculationUserInputs']
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        content: {
          'application/json': components['schemas']['CalculationResults']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculationResults']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculationResults']
        }
      }
    }
  }
  confirmCalculation: {
    /**
     * Calculate release dates and persist the results for a prisoners latest booking
     * @description This endpoint will calculate release dates based on a prisoners latest booking
     */
    parameters: {
      path: {
        calculationRequestId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CalculationFragments']
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description No calculation exists for the passed calculationRequestId or the write to NOMIS has failed */
      404: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description The booking data that was used for the preliminary calculation has changed */
      412: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  previousWorkingDay: {
    /**
     * Find the previous working day from a given date
     * @description Finds the previous working day, adjusting for weekends and bank holidays
     */
    parameters: {
      /**
       * @description The date to adjust
       * @example 2021-10-28
       */
      path: {
        date: string
      }
    }
    responses: {
      /** @description Returns previous working day */
      200: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
    }
  }
  nextWorkingDay: {
    /**
     * Find the next working day from a given date
     * @description Finds the next working day, adjusting for weekends and bank holidays
     */
    parameters: {
      /**
       * @description The date to adjust
       * @example 2021-10-28
       */
      path: {
        date: string
      }
    }
    responses: {
      /** @description Returns next working day */
      200: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
    }
  }
  getCalculationUserQuestions: {
    /**
     * Return which sentences and offences may be considered for different calculation rules
     * @description This endpoint will return which sentences and offences may be considered for different calculation rules.We will have to ask the user for clarification if any of the rules apply beacuse we cannot trust input data from NOMIS
     */
    parameters: {
      /**
       * @description The prisoners ID (aka nomsId)
       * @example A1234AB
       */
      path: {
        prisonerId: string
      }
    }
    responses: {
      /** @description Returns questions for a calculation */
      200: {
        content: {
          'application/json': components['schemas']['CalculationUserQuestions']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculationUserQuestions']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculationUserQuestions']
        }
      }
    }
  }
  getSentencesAndOffence: {
    /**
     * Get sentences and offences for a calculationRequestId
     * @description This endpoint will return the sentences and offences based on a calculationRequestId
     */
    parameters: {
      /**
       * @description The calculationRequestId of the calculation
       * @example 123456
       */
      path: {
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns sentences and offences */
      200: {
        content: {
          'application/json': components['schemas']['SentenceAndOffences'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['SentenceAndOffences'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['SentenceAndOffences'][]
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['SentenceAndOffences'][]
        }
      }
    }
  }
  getReturnToCustodyDate: {
    /**
     * Get return to custody date for a calculationRequestId
     * @description This endpoint will return the return to custody date based on a calculationRequestId
     */
    parameters: {
      /**
       * @description The calculationRequestId of the calculation
       * @example 123456
       */
      path: {
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns return to custody */
      200: {
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
    }
  }
  getConfirmedCalculationResults: {
    /**
     * Get confirmed release dates for a prisoner's specific booking
     * @description This endpoint will return the confirmed release dates based on a prisoners booking
     */
    parameters: {
      /**
       * @description The prisoners ID (aka nomsId)
       * @example A1234AB
       */
      /**
       * @description The booking ID associated with the calculation
       * @example 100001
       */
      path: {
        prisonerId: string
        bookingId: number
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description No confirmed calculation exists for this prisoner and booking */
      404: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  getCalculationResults: {
    /**
     * Get release dates for a calculationRequestId
     * @description This endpoint will return the release dates based on a calculationRequestId
     */
    parameters: {
      /**
       * @description The calculationRequestId of the results
       * @example 123456
       */
      path: {
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  getPrisonerDetails: {
    /**
     * Get prisoner details for a calculationRequestId
     * @description This endpoint will return the prisoner details based on a calculationRequestId
     */
    parameters: {
      /**
       * @description The calculationRequestId of the calculation
       * @example 123456
       */
      path: {
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns prisoner details */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
    }
  }
  getCalculationInput: {
    /**
     * Get user input for a calculationRequestId
     * @description This endpoint will return the user input based on a calculationRequestId
     */
    parameters: {
      /**
       * @description The calculationRequestId of the calculation
       * @example 123456
       */
      path: {
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns calculation inputs */
      200: {
        content: {
          'application/json': components['schemas']['CalculationUserInputs']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculationUserInputs']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculationUserInputs']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['CalculationUserInputs']
        }
      }
    }
  }
  getCalculationBreakdown: {
    /**
     * Get breakdown for a calculationRequestId
     * @description This endpoint will return the breakdown based on a calculationRequestId
     */
    parameters: {
      /**
       * @description The calculationRequestId of the breakdown
       * @example 123456
       */
      path: {
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns breakdown of calculated dates */
      200: {
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
    }
  }
  get: {
    /**
     * Get adjustments for a calculationRequestId
     * @description This endpoint will return the adjustments based on a calculationRequestId
     */
    parameters: {
      /**
       * @description The calculationRequestId of the calculation
       * @example 123456
       */
      path: {
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns adjustments */
      200: {
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
    }
  }
}
