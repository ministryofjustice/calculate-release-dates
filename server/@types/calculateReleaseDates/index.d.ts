/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    put: operations['retryDlq']
  }
  '/queue-admin/retry-all-dlqs': {
    put: operations['retryAllDlqs']
  }
  '/queue-admin/purge-queue/{queueName}': {
    put: operations['purgeQueue']
  }
  '/validation/{prisonerId}/full-validation': {
    /**
     * Validates that the data for the given prisoner in NOMIS can be used to calculate a release date
     * @description This endpoint will validate that the data for the given prisoner in NOMIS can be supported by the calculate release dates engine
     */
    post: operations['validate']
  }

  '/comparison': {
    /**
     * List all Comparisons performed using presets
     * @description This endpoint will return all the comparisons for your caseload
     */
    get: operations['getComparisons']
    /**
     * Create a record of a new calculation
     * @description This endpoint will create a new calculation and return the new calculation object
     */
    post: operations['createComparison']
  }
  '/comparison/manual': {
    /**
     * List all comparisons which were performed manually
     * @description This endpoint will return all of the manually performed calculations recorded in the service. This is not limited by caseload, but requires the MANUAL_COMPARER role.
     */
    get: operations['getManualComparisons']
    /**
     * Create a record of a new manual calculation
     * @description This endpoint will create a new manual comparison and return the new manual comparison object
     */
    post: operations['createComparison_1']
  }

  '/calculation/{prisonerId}': {
    /**
     * Calculate release dates for a prisoner - preliminary calculation, this does not publish to NOMIS
     * @description This endpoint will calculate release dates based on a prisoners latest booking - this is a PRELIMINARY calculation that will not be published to NOMIS
     */
    post: operations['calculate']
  }
  '/calculation/{prisonerId}/test': {
    /**
     * Calculate release dates for a prisoner - test calculation, this does not publish to NOMIS
     * @description This endpoint will calculate release dates based on a prisoners latest booking, this can includeinactive bookings of historic prisoners. Endpoint is used to test calculations against NOMIS.
     */
    post: operations['testCalculation']
  }
  '/calculation/relevant-remand/{prisonerId}': {
    /**
     * Calculate a release date at a point in time for the relevant remand tool.
     * @description This endpoint calculates the release date of an intersecting sentence, this is needed by therelevant remand tool in order to work out remand periods.
     */
    post: operations['relevantRemandCalculation']
  }
  '/calculation/confirm/{calculationRequestId}': {
    /**
     * Calculate release dates and persist the results for a prisoners latest booking
     * @description This endpoint will calculate release dates based on a prisoners latest booking
     */
    post: operations['confirmCalculation']
  }
  '/working-day/previous/{date}': {
    /**
     * Find the previous working day from a given date
     * @description Finds the previous working day, adjusting for weekends and bank holidays
     */
    get: operations['previousWorkingDay']
  }
  '/working-day/next/{date}': {
    /**
     * Find the next working day from a given date
     * @description Finds the next working day, adjusting for weekends and bank holidays
     */
    get: operations['nextWorkingDay']
  }
  '/validation/{prisonerId}/supported-validation': {
    /**
     * Validates that the sentences for the given prisoner in NOMIS can be used to calculate a release date
     * @description This endpoint will validate that the data for the given prisoner in NOMIS can be supported by the calculate release dates engine
     */
    get: operations['validateSupported']
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    get: operations['getDlqMessages']
  }
  '/non-friday-release/{date}': {
    /**
     * Find the non friday release day from a given date
     * @description Finds the non friday release day, adjusting for weekends and bank holidays
     */
    get: operations['nonFridayReleaseDay']
  }
  '/manual-calculation/{bookingId}/has-indeterminate-sentences': {
    /**
     * Determine if a booking has any indeterminate sentences
     * @description This endpoint will return true if a booking has any indeterminate sentences
     */
    get: operations['hasIndeterminateSentences']
  }
  '/comparison/{comparisonReference}': {
    /**
     * Returns the people for a particular caseload
     * @description This endpoint return the people associated to a specific comparison
     */
    get: operations['getComparisonByShortReference']
  }
  '/comparison/{comparisonReference}/mismatch/{mismatchReference}': {
    /**
     * Returns the mismatch for a particular comparison
     * @description This endpoint return the mismatch for a particular comparison
     */
    get: operations['getComparisonMismatchByShortReference']
  }
  '/comparison/{comparisonReference}/count': {
    /**
     * Returns a count of the number of people compared for a particular caseload
     * @description This endpoint will count all the people associated to a specific comparison
     */
    get: operations['getCountOfPersonsInComparison']
  }
  '/comparison/manual/{comparisonReference}': {
    /**
     * Returns the people for a particular caseload
     * @description This endpoint return the people associated to a specific comparison
     */
    get: operations['getComparisonByShortReference_1']
  }
  '/comparison/manual/{comparisonReference}/mismatch/{mismatchReference}': {
    /**
     * Returns the mismatch for a particular comparison
     * @description This endpoint return the mismatch for a particular comparison
     */
    get: operations['getManualComparisonMismatchByShortReference']
  }
  '/comparison/manual/{comparisonReference}/count': {
    /**
     * Returns a count of the number of people compared for a particular caseload
     * @description This endpoint will count all the people associated to a specific comparison
     */
    get: operations['getCountOfPersonsInComparison_1']
  }
  '/calculationReference/{calculationReference}': {
    /**
     * Get release dates for a calculationRequestId
     * @description This endpoint will return the release dates based on a calculationRequestId
     */
    get: operations['getCalculationResults']
  }
  '/calculation/{prisonerId}/user-questions': {
    /**
     * Return which sentences and offences may be considered for different calculation rules
     * @description This endpoint will return which sentences and offences may be considered for different calculation rules.We will have to ask the user for clarification if any of the rules apply beacuse we cannot trust input data from NOMIS
     */
    get: operations['getCalculationUserQuestions']
  }
  '/calculation/sentence-and-offences/{calculationRequestId}': {
    /**
     * Get sentences and offences for a calculationRequestId
     * @description This endpoint will return the sentences and offences based on a calculationRequestId
     */
    get: operations['getSentencesAndOffence']
  }
  '/calculation/return-to-custody/{calculationRequestId}': {
    /**
     * Get return to custody date for a calculationRequestId
     * @description This endpoint will return the return to custody date based on a calculationRequestId
     */
    get: operations['getReturnToCustodyDate']
  }
  '/calculation/results/{prisonerId}/{bookingId}': {
    /**
     * Get confirmed release dates for a prisoner's specific booking
     * @description This endpoint will return the confirmed release dates based on a prisoners booking
     */
    get: operations['getConfirmedCalculationResults']
  }
  '/calculation/results/{calculationRequestId}': {
    /**
     * Get release dates for a calculationRequestId
     * @description This endpoint will return the release dates based on a calculationRequestId
     */
    get: operations['getCalculationResults']
  }
  '/calculation/prisoner-details/{calculationRequestId}': {
    /**
     * Get prisoner details for a calculationRequestId
     * @description This endpoint will return the prisoner details based on a calculationRequestId
     */
    get: operations['getPrisonerDetails']
  }
  '/calculation/calculation-user-input/{calculationRequestId}': {
    /**
     * Get user input for a calculationRequestId
     * @description This endpoint will return the user input based on a calculationRequestId
     */
    get: operations['getCalculationInput']
  }
  '/calculation/breakdown/{calculationRequestId}': {
    /**
     * Get breakdown for a calculationRequestId
     * @description This endpoint will return the breakdown based on a calculationRequestId
     */
    get: operations['getCalculationBreakdown']
  }
  '/calculation/adjustments/{calculationRequestId}': {
    /**
     * Get adjustments for a calculationRequestId
     * @description This endpoint will return the adjustments based on a calculationRequestId
     */
    get: operations['get']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    Message: {
      messageId?: string
      receiptHandle?: string
      body?: string
      attributes?: {
        [key: string]: string | undefined
      }
      messageAttributes?: {
        [key: string]: components['schemas']['MessageAttributeValue'] | undefined
      }
      md5OfMessageAttributes?: string
      md5OfBody?: string
    }
    MessageAttributeValue: {
      stringValue?: string
      binaryValue?: {
        /** Format: int32 */
        short?: number
        char?: string
        /** Format: int32 */
        int?: number
        /** Format: int64 */
        long?: number
        /** Format: float */
        float?: number
        /** Format: double */
        double?: number
        direct?: boolean
        readOnly?: boolean
      }
      stringListValues?: string[]
      binaryListValues?: {
        /** Format: int32 */
        short?: number
        char?: string
        /** Format: int32 */
        int?: number
        /** Format: int64 */
        long?: number
        /** Format: float */
        float?: number
        /** Format: double */
        double?: number
        direct?: boolean
        readOnly?: boolean
      }[]
      dataType?: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      messages: components['schemas']['Message'][]
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description List of sentences and the users input for each sentence */
    CalculationSentenceUserInput: {
      /** Format: int32 */
      sentenceSequence: number
      offenceCode: string
      /** @enum {string} */
      userInputType: 'ORIGINAL' | 'FOUR_TO_UNDER_SEVEN' | 'SECTION_250' | 'UPDATED'
      userChoice: boolean
    }
    CalculationUserInputs: {
      /** @description List of sentences and the users input for each sentence */
      sentenceCalculationUserInputs: components['schemas']['CalculationSentenceUserInput'][]
      /** @description A flag to indicate whether to calculate ERSED. */
      calculateErsed: boolean
      /** @description Whether to use offence indicators from another system for the calculation or user's input. */
      useOffenceIndicators: boolean
    }
    CalculationRequestModel: {
      userInputs: CalculationUserInputs
      calculationReasonId: number
      otherReasonDescription: string
    }
    /** @description Validation message details */
    ValidationMessage: {
      /**
       * @description Validation code details
       * @enum {string}
       */
      code:
        | 'ADJUSTMENT_AFTER_RELEASE_ADA'
        | 'ADJUSTMENT_AFTER_RELEASE_RADA'
        | 'ADJUSTMENT_FUTURE_DATED_ADA'
        | 'ADJUSTMENT_FUTURE_DATED_RADA'
        | 'ADJUSTMENT_FUTURE_DATED_UAL'
        | 'A_FINE_SENTENCE_CONSECUTIVE'
        | 'A_FINE_SENTENCE_CONSECUTIVE_TO'
        | 'A_FINE_SENTENCE_MISSING_FINE_AMOUNT'
        | 'A_FINE_SENTENCE_WITH_PAYMENTS'
        | 'CUSTODIAL_PERIOD_EXTINGUISHED_REMAND'
        | 'CUSTODIAL_PERIOD_EXTINGUISHED_TAGGED_BAIL'
        | 'DTO_RECALL'
        | 'DTO_CONSECUTIVE_TO_SENTENCE'
        | 'DTO_HAS_SENTENCE_CONSECUTIVE_TO_IT'
        | 'EDS18_EDS21_EDSU18_SENTENCE_TYPE_INCORRECT'
        | 'EDS_LICENCE_TERM_LESS_THAN_ONE_YEAR'
        | 'EDS_LICENCE_TERM_MORE_THAN_EIGHT_YEARS'
        | 'FTR_SENTENCES_CONFLICT_WITH_EACH_OTHER'
        | 'FTR_TYPE_14_DAYS_BUT_LENGTH_IS_28'
        | 'FTR_TYPE_28_DAYS_BUT_LENGTH_IS_14'
        | 'FTR_14_DAYS_SENTENCE_GE_12_MONTHS'
        | 'FTR_14_DAYS_AGGREGATE_GE_12_MONTHS'
        | 'FTR_28_DAYS_SENTENCE_LT_12_MONTHS'
        | 'FTR_28_DAYS_AGGREGATE_LT_12_MONTHS'
        | 'FTR_TYPE_14_DAYS_SENTENCE_GE_12_MONTHS'
        | 'FTR_TYPE_14_DAYS_AGGREGATE_GE_12_MONTHS'
        | 'FTR_TYPE_28_DAYS_SENTENCE_LT_12_MONTHS'
        | 'FTR_TYPE_28_DAYS_AGGREGATE_LT_12_MONTHS'
        | 'LASPO_AR_SENTENCE_TYPE_INCORRECT'
        | 'MORE_THAN_ONE_IMPRISONMENT_TERM'
        | 'MORE_THAN_ONE_LICENCE_TERM'
        | 'MULTIPLE_SENTENCES_CONSECUTIVE_TO'
        | 'OFFENCE_DATE_AFTER_SENTENCE_RANGE_DATE'
        | 'OFFENCE_DATE_AFTER_SENTENCE_START_DATE'
        | 'OFFENCE_MISSING_DATE'
        | 'PRISONER_SUBJECT_TO_PTD'
        | 'REMAND_FROM_TO_DATES_REQUIRED'
        | 'REMAND_OVERLAPS_WITH_REMAND'
        | 'REMAND_OVERLAPS_WITH_SENTENCE'
        | 'SEC236A_SENTENCE_TYPE_INCORRECT'
        | 'SEC_91_SENTENCE_TYPE_INCORRECT'
        | 'SENTENCE_HAS_MULTIPLE_TERMS'
        | 'SENTENCE_HAS_NO_IMPRISONMENT_TERM'
        | 'SENTENCE_HAS_NO_LICENCE_TERM'
        | 'SOPC18_SOPC21_SENTENCE_TYPE_INCORRECT'
        | 'SOPC_LICENCE_TERM_NOT_12_MONTHS'
        | 'UNSUPPORTED_ADJUSTMENT_LAWFULLY_AT_LARGE'
        | 'UNSUPPORTED_ADJUSTMENT_SPECIAL_REMISSION'
        | 'UNSUPPORTED_SENTENCE_TYPE'
        | 'ZERO_IMPRISONMENT_TERM'
        | 'UNSUPPORTED_CALCULATION_DTO_WITH_RECALL'
        | 'PRE_PCSC_DTO_WITH_ADJUSTMENT'
      arguments: string[]
      message: string
      /** @enum {string} */
      type: 'UNSUPPORTED_SENTENCE' | 'UNSUPPORTED_CALCULATION' | 'VALIDATION'
    }
    ComparisonInput: {
      criteria?: components['schemas']['JsonNode']
      /** @description The prison the analysis was run against */
      prison?: string
      /**
       * @description The type of comparison that was run
       * @enum {string}
       */
      comparisonType: 'ESTABLISHMENT_FULL' | 'ESTABLISHMENT_HDCED4PLUS' | 'MANUAL'
    }
    /** @description Criteria */
    JsonNode: Record<string, never>
    Comparison: {
      comparisonShortReference: string
      criteria: components['schemas']['JsonNode']
      prison?: string
      /** @enum {string} */
      comparisonType: 'ESTABLISHMENT_FULL' | 'ESTABLISHMENT_HDCED4PLUS' | 'MANUAL'
      /** Format: date-time */
      calculatedAt: string
      calculatedByUsername: string
      comparisonStatus: components['schemas']['ComparisonStatus']
      /** Format: int64 */
      numberOfPeopleCompared?: number
    }
    ComparisonStatus: {
      /** Format: int32 */
      id: number
      name: string
    }
    ManualComparisonInput: {
      /** @description The prisoner ids the analysis was run against */
      prisonerIds: string[]
    }
    CalculatedReleaseDates: {
      dates: {
        [key: string]: string | undefined
      }
      /** Format: int64 */
      calculationRequestId: number
      /** Format: int64 */
      bookingId: number
      calculationReference: string
      prisonerId: string
      /** @enum {string} */
      calculationStatus: 'PRELIMINARY' | 'CONFIRMED' | 'ERROR' | 'TEST'
      calculationFragments?: components['schemas']['CalculationFragments']
      effectiveSentenceLength?: {
        /** Format: int32 */
        years?: number
        /** Format: int32 */
        months?: number
        /** Format: int32 */
        days?: number
        zero?: boolean
        negative?: boolean
        units?: {
          durationEstimated?: boolean
          duration?: {
            /** Format: int64 */
            seconds?: number
            zero?: boolean
            /** Format: int32 */
            nano?: number
            negative?: boolean
            positive?: boolean
          }
          timeBased?: boolean
          dateBased?: boolean
        }[]
        chronology?: {
          id?: string
          calendarType?: string
          isoBased?: boolean
        }
      }
      approvedDates?: {
        [key: string]: string | undefined
      }
    }
    CalculationFragments: {
      breakdownHtml: string
    }
    SubmittedDate: {
      day: string
      month: string
      year: string
    }
    ManualEntryDate: {
      dateType: string
      dateText: string
      date?: components['schemas']['SubmittedDate']
    }
    SubmitCalculationRequest: {
      calculationFragments: components['schemas']['CalculationFragments']
      approvedDates: components['schemas']['ManualEntryDate'][]
      isSpecialistSupport?: boolean
    }
    CalculationResults: {
      calculatedReleaseDates?: components['schemas']['CalculatedReleaseDates']
      validationMessages: components['schemas']['ValidationMessage'][]
    }
    GenuineOverride: {
      reason: string
      originalCalculationRequest: string
      savedCalculation?: string
      isOverridden: boolean
    }
    ManualEntryDates: {
      selectedManualEntryDates: components['schemas']['ManualEntryDate'][]
    }
    ManualEntryRequest: {
      manualEntryDates: components['schemas']['ManualEntryDates']
      calculationReasonId: number
      otherReasonDescription: string
    }
    GenuineOverrideDateRequest: {
      manualEntryRequest: components['schemas']['ManualEntryDates']
      originalCalculationReference: string
    }
    GenuineOverrideDateResponse: {
      calculationReference: string
      originalCalculationReference: string
    }
    RelevantRemand: {
      /** Format: date */
      from: string
      /** Format: date */
      to: string
      /** Format: int32 */
      days: number
      /** Format: int32 */
      sentenceSequence: number
    }
    RelevantRemandCalculationRequest: {
      relevantRemands: components['schemas']['RelevantRemand'][]
      sentence: components['schemas']['RelevantRemandSentence']
    }
    RelevantRemandSentence: {
      /** Format: int32 */
      sequence: number
      /** Format: date */
      sentenceDate: string
      /** Format: int64 */
      bookingId: number
    }
    RelevantRemandCalculationResult: {
      /** Format: date */
      releaseDate?: string
      validationMessages: components['schemas']['ValidationMessage'][]
    }
    WorkingDay: {
      /** Format: date */
      date: string
      adjustedForWeekend: boolean
      adjustedForBankHoliday: boolean
    }
    DlqMessage: {
      body: {
        [key: string]: Record<string, never> | undefined
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    NonFridayReleaseDay: {
      /** Format: date */
      date: string
      usePolicy: boolean
    }
    ComparisonSummary: {
      comparisonShortReference: string
      prison?: string
      /** @enum {string} */
      comparisonType: 'ESTABLISHMENT_FULL' | 'ESTABLISHMENT_HDCED4PLUS' | 'MANUAL'
      /** Format: date-time */
      calculatedAt: string
      calculatedByUsername: string
      /** Format: int64 */
      numberOfMismatches: number
      /** Format: int64 */
      numberOfPeopleCompared: number
    }
    ComparisonMismatchSummary: {
      personId: string
      isValid: boolean
      isMatch: boolean
      validationMessages: components['schemas']['ValidationMessage'][]
      shortReference: string
      /** @enum {string} */
      misMatchType:
        | 'NONE'
        | 'RELEASE_DATES_MISMATCH'
        | 'VALIDATION_ERROR'
        | 'UNSUPPORTED_SENTENCE_TYPE'
        | 'VALIDATION_ERROR_HDC4_PLUS'
      hdcedFourPlusDate: string
    }
    ComparisonOverview: {
      comparisonShortReference: string
      prison?: string
      /** @enum {string} */
      comparisonType: 'ESTABLISHMENT_FULL' | 'ESTABLISHMENT_HDCED4PLUS' | 'MANUAL'
      /** Format: date-time */
      calculatedAt: string
      calculatedByUsername: string
      /** Format: int64 */
      numberOfMismatches: number
      /** Format: int64 */
      numberOfPeopleCompared: number
      mismatches: components['schemas']['ComparisonMismatchSummary'][]
      status: string
    }
    ComparisonPersonOverview: {
      personId: string
      isValid: boolean
      isMatch: boolean
      /** @enum {string} */
      mismatchType:
        | 'NONE'
        | 'RELEASE_DATES_MISMATCH'
        | 'VALIDATION_ERROR'
        | 'UNSUPPORTED_SENTENCE_TYPE'
        | 'VALIDATION_ERROR_HDC4_PLUS'
      isActiveSexOffender?: boolean
      validationMessages: components['schemas']['ValidationMessage'][]
      shortReference: string
      /** Format: int64 */
      bookingId: number
      /** Format: date-time */
      calculatedAt: string
      crdsDates: {
        [key: string]: string
      }
      nomisDates: {
        [key: string]: string
      }
      overrideDates: {
        [key: string]: string
      }
      breakdownByReleaseDateType: {
        [key: string]: components['schemas']['ReleaseDateCalculationBreakdown'] | undefined
      }
      sdsSentencesIdentified?: components['schemas']['SentenceAndOffences'][]
    }
    AnalyzedSentenceAndOffences: {
      /**
       * Format: int64
       * @description The bookingId this sentence and offence(s) relates to
       */
      bookingId?: number
      /**
       * Format: int32
       * @description Sentence sequence - a unique identifier a sentence on a booking
       */
      sentenceSequence?: number
      /**
       * Format: int32
       * @description This sentence is consecutive to this sequence (if populated)
       */
      consecutiveToSequence?: number
      /**
       * Format: int64
       * @description Sentence line sequence - a number representing the order
       */
      lineSequence?: number
      /**
       * Format: int64
       * @description Case sequence - a number representing the order of the case this sentence belongs to
       */
      caseSequence?: number
      /** @description Case reference - a string identifying the case this sentence belongs to */
      caseReference?: string
      /** @description Court description - a string describing the the court that the case was heard at */
      courtDescription?: string
      /** @description This sentence status: A = Active I = Inactive */
      sentenceStatus?: string
      /** @description The sentence category e.g. 2003 or Licence */
      sentenceCategory?: string
      /** @description The sentence calculation type e.g. R or ADIMP_ORA */
      sentenceCalculationType?: string
      /** @description The sentence type description e.g. Standard Determinate Sentence */
      sentenceTypeDescription?: string
      /**
       * Format: date
       * @description The sentenced date for this sentence (aka court date)
       */
      sentenceDate?: string
      /** @description The sentence terms of the sentence */
      terms?: components['schemas']['OffenderSentenceTerm'][]
      /** @description The offences related to this sentence (will usually only have one offence per sentence) */
      offences?: components['schemas']['OffenderOffence'][]
      /**
       * Format: double
       * @description The amount of fine related to the sentence and offence
       */
      fineAmount?: number
      sentenceAndOffenceAnalysis: 'NEW' | 'SAME' | 'CHANGED'
    }
    CalculationSentenceQuestion: {
      /** Format: int32 */
      sentenceSequence: number
      /** @enum {string} */
      userInputType: 'ORIGINAL' | 'FOUR_TO_UNDER_SEVEN' | 'SECTION_250' | 'UPDATED'
    }
    CalculationUserQuestions: {
      sentenceQuestions: components['schemas']['CalculationSentenceQuestion'][]
    }
    OffenderOffence: {
      /** Format: int64 */
      offenderChargeId: number
      /** Format: date */
      offenceStartDate?: string
      /** Format: date */
      offenceEndDate?: string
      offenceCode: string
      offenceDescription: string
      indicators: string[]
      pcscSec250: boolean
      pcscSds: boolean
      pcscSdsPlus: boolean
      scheduleFifteenMaximumLife: boolean
    }
    SentenceAndOffences: {
      /** Format: int64 */
      bookingId: number
      /** Format: int32 */
      sentenceSequence: number
      /** Format: int32 */
      lineSequence: number
      /** Format: int32 */
      caseSequence: number
      /** Format: int32 */
      consecutiveToSequence?: number
      sentenceStatus: string
      sentenceCategory: string
      sentenceCalculationType: string
      sentenceTypeDescription: string
      /** Format: date */
      sentenceDate: string
      terms: components['schemas']['SentenceTerms'][]
      offences: components['schemas']['OffenderOffence'][]
      caseReference?: string
      courtDescription?: string
      fineAmount?: number
    }
    SentenceTerms: {
      /** Format: int32 */
      years: number
      /** Format: int32 */
      months: number
      /** Format: int32 */
      weeks: number
      /** Format: int32 */
      days: number
      code: string
    }
    ReturnToCustodyDate: {
      /** Format: int64 */
      bookingId: number
      /** Format: date */
      returnToCustodyDate: string
    }
    Alert: {
      /** Format: date */
      dateCreated: string
      /** Format: date */
      dateExpires?: string
      alertType: string
      alertCode: string
    }
    PrisonerDetails: {
      /** Format: int64 */
      bookingId: number
      offenderNo: string
      firstName: string
      lastName: string
      /** Format: date */
      dateOfBirth: string
      alerts: components['schemas']['Alert'][]
      agencyId: string
    }
    /** @description Adjustments details associated that are specifically added as part of a rule */
    AdjustmentDuration: {
      /**
       * Format: int32
       * @description Amount of adjustment
       */
      adjustmentValue: number
      /**
       * @description Unit of adjustment
       * @enum {string}
       */
      type:
        | 'Nanos'
        | 'Micros'
        | 'Millis'
        | 'Seconds'
        | 'Minutes'
        | 'Hours'
        | 'HalfDays'
        | 'Days'
        | 'Weeks'
        | 'Months'
        | 'Years'
        | 'Decades'
        | 'Centuries'
        | 'Millennia'
        | 'Eras'
        | 'Forever'
    }
    /** @description Calculation breakdown details */
    CalculationBreakdown: {
      concurrentSentences: components['schemas']['ConcurrentSentenceBreakdown'][]
      consecutiveSentence?: components['schemas']['ConsecutiveSentenceBreakdown']
      /** @description Breakdown details in a map keyed by release date type */
      breakdownByReleaseDateType: {
        [key: string]: components['schemas']['ReleaseDateCalculationBreakdown'] | undefined
      }
      otherDates: {
        [key: string]: string | undefined
      }
    }
    ConcurrentSentenceBreakdown: {
      /** Format: date */
      sentencedAt: string
      sentenceLength: string
      /** Format: int32 */
      sentenceLengthDays: number
      dates: {
        [key: string]: components['schemas']['DateBreakdown'] | undefined
      }
      /** Format: int32 */
      lineSequence: number
      /** Format: int32 */
      caseSequence: number
      caseReference?: string
    }
    ConsecutiveSentenceBreakdown: {
      /** Format: date */
      sentencedAt: string
      sentenceLength: string
      /** Format: int32 */
      sentenceLengthDays: number
      dates: {
        [key: string]: components['schemas']['DateBreakdown'] | undefined
      }
      sentenceParts: components['schemas']['ConsecutiveSentencePart'][]
    }
    ConsecutiveSentencePart: {
      /** Format: int32 */
      lineSequence: number
      /** Format: int32 */
      caseSequence: number
      caseReference?: string
      sentenceLength: string
      /** Format: int32 */
      sentenceLengthDays: number
      /** Format: int32 */
      consecutiveToLineSequence?: number
      /** Format: int32 */
      consecutiveToCaseSequence?: number
    }
    DateBreakdown: {
      /** Format: date */
      unadjusted: string
      /** Format: date */
      adjusted: string
      /** Format: int64 */
      daysFromSentenceStart: number
      /** Format: int64 */
      adjustedByDays: number
    }
    /** @description Calculation breakdown details for a release date type */
    ReleaseDateCalculationBreakdown: {
      /**
       * @description Calculation rules used to determine this calculation.
       * @example [
       *   "HDCED_GE_MIN_PERIOD_LT_MIDPOINT"
       * ]
       */
      rules: (
        | 'HDCED_GE_MIN_PERIOD_LT_MIDPOINT'
        | 'HDCED_GE_MIDPOINT_LT_MAX_PERIOD'
        | 'HDCED_MINIMUM_CUSTODIAL_PERIOD'
        | 'CONSECUTIVE_SENTENCE_HDCED_MINIMUM_CUSTODIAL_PERIOD'
        | 'CONSECUTIVE_SENTENCE_HDCED_MINIMUM_CUSTODIAL_PERIOD_LAST_SENTENCE_SDS'
        | 'TUSED_LICENCE_PERIOD_LT_1Y'
        | 'LED_CONSEC_ORA_AND_NON_ORA'
        | 'UNUSED_ADA'
        | 'IMMEDIATE_RELEASE'
        | 'PED_EQUAL_TO_LATEST_NON_PED_CONDITIONAL_RELEASE'
        | 'PED_EQUAL_TO_LATEST_NON_PED_ACTUAL_RELEASE'
        | 'HDCED_ADJUSTED_TO_CONCURRENT_CONDITIONAL_RELEASE'
        | 'HDCED_ADJUSTED_TO_CONCURRENT_ACTUAL_RELEASE'
        | 'ERSED_TWO_THIRDS'
        | 'ERSED_HALFWAY'
        | 'ERSED_ONE_YEAR'
        | 'ERSED_ADJUSTED_TO_CONCURRENT_TERM'
        | 'ERSED_BEFORE_SENTENCE_DATE'
        | 'ERSED_ADJUSTED_TO_MTD'
      )[]
      /** @description Adjustments details associated that are specifically added as part of a rule */
      rulesWithExtraAdjustments: {
        [key: string]: components['schemas']['AdjustmentDuration'] | undefined
      }
      /**
       * Format: int32
       * @description Amount of adjustment in days
       */
      adjustedDays: number
      /**
       * Format: date
       * @description Final release date (after all adjustments have been applied)
       */
      releaseDate: string
      /**
       * Format: date
       * @description Based on the screen design, the unadjusted date isn't derived in a consistent manner but is set as per the screen design
       */
      unadjustedDate: string
    }
    BookingAdjustment: {
      active: boolean
      /** Format: date */
      fromDate: string
      /** Format: date */
      toDate?: string
      /** Format: int32 */
      numberOfDays: number
      /** @enum {string} */
      type:
        | 'ADDITIONAL_DAYS_AWARDED'
        | 'LAWFULLY_AT_LARGE'
        | 'RESTORED_ADDITIONAL_DAYS_AWARDED'
        | 'SPECIAL_REMISSION'
        | 'UNLAWFULLY_AT_LARGE'
    }
    BookingAndSentenceAdjustments: {
      bookingAdjustments: components['schemas']['BookingAdjustment'][]
      sentenceAdjustments: components['schemas']['SentenceAdjustment'][]
    }
    SentenceAdjustment: {
      /** Format: int32 */
      sentenceSequence: number
      active: boolean
      /** Format: date */
      fromDate?: string
      /** Format: date */
      toDate?: string
      /** Format: int32 */
      numberOfDays: number
      /** @enum {string} */
      type: 'RECALL_SENTENCE_REMAND' | 'RECALL_SENTENCE_TAGGED_BAIL' | 'REMAND' | 'TAGGED_BAIL' | 'UNUSED_REMAND'
    }
    CalculationReason: {
      id: number
      isOther: boolean
      displayName: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>

export interface operations {
  retryDlq: {
    parameters: {
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      path: {
        queueName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  /**
   * Validates that the data for the given prisoner in NOMIS can be used to calculate a release date
   * @description This endpoint will validate that the data for the given prisoner in NOMIS can be supported by the calculate release dates engine
   */
  validate: {
    parameters: {
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CalculationUserInputs']
      }
    }
    responses: {
      /** @description Validation job has run successfully, the response indicates if there are any errors */
      200: {
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
    }
  }
  /**
   * List all Comparisons performed using presets
   * @description This endpoint will return all the comparisons for your caseload
   */
  getComparisons: {
    responses: {
      /** @description Returns a list of comparisons Comparison */
      200: {
        content: {
          'application/json': components['schemas']['ComparisonSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ComparisonSummary'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ComparisonSummary'][]
        }
      }
    }
  }
  /**
   * Create a record of a new calculation
   * @description This endpoint will create a new calculation and return the new calculation object
   */
  createComparison: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ComparisonInput']
      }
    }
    responses: {
      /** @description Returns a new Comparison */
      200: {
        content: {
          'application/json': components['schemas']['Comparison']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['Comparison']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['Comparison']
        }
      }
    }
  }
  /**
   * List all comparisons which were performed manually
   * @description This endpoint will return all of the manually performed calculations recorded in the service. This is not limited by caseload, but requires the MANUAL_COMPARER role.
   */
  getManualComparisons: {
    responses: {
      /** @description Returns a list of comparisons Comparison */
      200: {
        content: {
          'application/json': components['schemas']['ComparisonSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ComparisonSummary'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ComparisonSummary'][]
        }
      }
    }
  }
  /**
   * Create a record of a new manual calculation
   * @description This endpoint will create a new manual comparison and return the new manual comparison object
   */
  createComparison_1: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ManualComparisonInput']
      }
    }
    responses: {
      /** @description Returns a new Comparison */
      200: {
        content: {
          'application/json': components['schemas']['Comparison']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['Comparison']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['Comparison']
        }
      }
    }
  }

  /**
   * Calculate release dates for a prisoner - preliminary calculation, this does not publish to NOMIS
   * @description This endpoint will calculate release dates based on a prisoners latest booking - this is a PRELIMINARY calculation that will not be published to NOMIS
   */
  calculate: {
    parameters: {
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CalculationUserInputs']
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  /**
   * Calculate release dates for a prisoner - test calculation, this does not publish to NOMIS
   * @description This endpoint will calculate release dates based on a prisoners latest booking, this can includeinactive bookings of historic prisoners. Endpoint is used to test calculations against NOMIS.
   */
  testCalculation: {
    parameters: {
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CalculationUserInputs']
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        content: {
          'application/json': components['schemas']['CalculationResults']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculationResults']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculationResults']
        }
      }
    }
  }
  /**
   * Calculate a release date at a point in time for the relevant remand tool.
   * @description This endpoint calculates the release date of an intersecting sentence, this is needed by therelevant remand tool in order to work out remand periods.
   */
  relevantRemandCalculation: {
    parameters: {
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RelevantRemandCalculationRequest']
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        content: {
          'application/json': components['schemas']['RelevantRemandCalculationResult']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['RelevantRemandCalculationResult']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['RelevantRemandCalculationResult']
        }
      }
    }
  }
  /**
   * Calculate release dates and persist the results for a prisoners latest booking
   * @description This endpoint will calculate release dates based on a prisoners latest booking
   */
  confirmCalculation: {
    parameters: {
      path: {
        calculationRequestId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CalculationFragments']
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description No calculation exists for the passed calculationRequestId or the write to NOMIS has failed */
      404: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description The booking data that was used for the preliminary calculation has changed */
      412: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  /**
   * Find the previous working day from a given date
   * @description Finds the previous working day, adjusting for weekends and bank holidays
   */
  previousWorkingDay: {
    parameters: {
      path: {
        /**
         * @description The date to adjust
         * @example 2021-10-28
         */
        date: string
      }
    }
    responses: {
      /** @description Returns previous working day */
      200: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
    }
  }
  /**
   * Find the next working day from a given date
   * @description Finds the next working day, adjusting for weekends and bank holidays
   */
  nextWorkingDay: {
    parameters: {
      path: {
        /**
         * @description The date to adjust
         * @example 2021-10-28
         */
        date: string
      }
    }
    responses: {
      /** @description Returns next working day */
      200: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
    }
  }
  /**
   * Validates that the sentences for the given prisoner in NOMIS can be used to calculate a release date
   * @description This endpoint will validate that the data for the given prisoner in NOMIS can be supported by the calculate release dates engine
   */
  validateSupported: {
    parameters: {
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
      }
    }
    responses: {
      /** @description Validation job has run successfully, the response indicates if there are any errors */
      200: {
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ValidationMessage'][]
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query: {
        maxMessages?: number
      }
      path: {
        dlqName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }

  /**
   * Find the non friday release day from a given date
   * @description Finds the non friday release day, adjusting for weekends and bank holidays
   */
  nonFridayReleaseDay: {
    parameters: {
      path: {
        /**
         * @description The date to adjust
         * @example 2021-10-28
         */
        date: string
      }
    }
    responses: {
      /** @description Returns non friday release day */
      200: {
        content: {
          'application/json': components['schemas']['NonFridayReleaseDay']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['NonFridayReleaseDay']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['NonFridayReleaseDay']
        }
      }
    }
  }
  /**
   * Determine if a booking has any indeterminate sentences
   * @description This endpoint will return true if a booking has any indeterminate sentences
   */
  hasIndeterminateSentences: {
    parameters: {
      path: {
        /**
         * @description The booking ID to check against
         * @example 100001
         */
        bookingId: number
      }
    }
    responses: {
      /** @description Returns a boolean value */
      200: {
        content: {
          'application/json': boolean
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': boolean
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': boolean
        }
      }
    }
  }

  /**
   * Returns the people for a particular caseload
   * @description This endpoint return the people associated to a specific comparison
   */
  getComparisonByShortReference: {
    parameters: {
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
      }
    }
    responses: {
      /** @description Returns a list of comparisons Comparison */
      200: {
        content: {
          'application/json': components['schemas']['ComparisonOverview']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ComparisonOverview']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ComparisonOverview']
        }
      }
    }
  }
  /**
   * Returns the mismatch for a particular comparison
   * @description This endpoint return the mismatch for a particular comparison
   */
  getComparisonMismatchByShortReference: {
    parameters: {
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
        /**
         * @description The short reference of the mismatch
         * @example A1B2C3D4
         */
        mismatchReference: string
      }
    }
    responses: {
      /** @description Returns a details of a comparison mismatch */
      200: {
        content: {
          'application/json': components['schemas']['ComparisonPersonOverview']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ComparisonPersonOverview']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ComparisonPersonOverview']
        }
      }
    }
  }
  /**
   * Returns a count of the number of people compared for a particular caseload
   * @description This endpoint will count all the people associated to a specific comparison
   */
  getCountOfPersonsInComparison: {
    parameters: {
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
      }
    }
    responses: {
      /** @description Returns a list of comparisons Comparison */
      200: {
        content: {
          'application/json': number
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': number
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /**
   * Returns the people for a particular caseload
   * @description This endpoint return the people associated to a specific comparison
   */
  getComparisonByShortReference_1: {
    parameters: {
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
      }
    }
    responses: {
      /** @description Returns a list of comparisons Comparison */
      200: {
        content: {
          'application/json': components['schemas']['ComparisonOverview']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ComparisonOverview']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ComparisonOverview']
        }
      }
    }
  }
  /**
   * Returns the mismatch for a particular comparison
   * @description This endpoint return the mismatch for a particular comparison
   */
  getManualComparisonMismatchByShortReference: {
    parameters: {
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
        /**
         * @description The short reference of the mismatch
         * @example A1B2C3D4
         */
        mismatchReference: string
      }
    }
    responses: {
      /** @description Returns a details of a comparison mismatch */
      200: {
        content: {
          'application/json': components['schemas']['ComparisonPersonOverview']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ComparisonPersonOverview']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ComparisonPersonOverview']
        }
      }
    }
  }
  /**
   * Returns a count of the number of people compared for a particular caseload
   * @description This endpoint will count all the people associated to a specific comparison
   */
  getCountOfPersonsInComparison_1: {
    parameters: {
      path: {
        /**
         * @description The short reference of the comparison
         * @example A1B2C3D4
         */
        comparisonReference: string
      }
    }
    responses: {
      /** @description Returns a list of comparisons Comparison */
      200: {
        content: {
          'application/json': number
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': number
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /**
   * Return which sentences and offences may be considered for different calculation rules
   * @description This endpoint will return which sentences and offences may be considered for different calculation rules.We will have to ask the user for clarification if any of the rules apply beacuse we cannot trust input data from NOMIS
   */
  getCalculationUserQuestions: {
    parameters: {
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
      }
    }
    responses: {
      /** @description Returns questions for a calculation */
      200: {
        content: {
          'application/json': components['schemas']['CalculationUserQuestions']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculationUserQuestions']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculationUserQuestions']
        }
      }
    }
  }
  /**
   * Get sentences and offences for a calculationRequestId
   * @description This endpoint will return the sentences and offences based on a calculationRequestId
   */
  getSentencesAndOffence: {
    parameters: {
      path: {
        /**
         * @description The calculationRequestId of the calculation
         * @example 123456
         */
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns sentences and offences */
      200: {
        content: {
          'application/json': components['schemas']['SentenceAndOffences'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['SentenceAndOffences'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['SentenceAndOffences'][]
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['SentenceAndOffences'][]
        }
      }
    }
  }
  /**
   * Get return to custody date for a calculationRequestId
   * @description This endpoint will return the return to custody date based on a calculationRequestId
   */
  getReturnToCustodyDate: {
    parameters: {
      path: {
        /**
         * @description The calculationRequestId of the calculation
         * @example 123456
         */
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns return to custody */
      200: {
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
    }
  }
  /**
   * Get confirmed release dates for a prisoner's specific booking
   * @description This endpoint will return the confirmed release dates based on a prisoners booking
   */
  getConfirmedCalculationResults: {
    parameters: {
      path: {
        /**
         * @description The prisoners ID (aka nomsId)
         * @example A1234AB
         */
        prisonerId: string
        /**
         * @description The booking ID associated with the calculation
         * @example 100001
         */
        bookingId: number
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description No confirmed calculation exists for this prisoner and booking */
      404: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  /**
   * Get release dates for a calculationRequestId
   * @description This endpoint will return the release dates based on a calculationRequestId
   */
  getCalculationResults: {
    parameters: {
      path: {
        /**
         * @description The calculationRequestId of the results
         * @example 123456
         */
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns calculated dates */
      200: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['CalculatedReleaseDates']
        }
      }
    }
  }
  /**
   * Get prisoner details for a calculationRequestId
   * @description This endpoint will return the prisoner details based on a calculationRequestId
   */
  getPrisonerDetails: {
    parameters: {
      path: {
        /**
         * @description The calculationRequestId of the calculation
         * @example 123456
         */
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns prisoner details */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
    }
  }
  /**
   * Get user input for a calculationRequestId
   * @description This endpoint will return the user input based on a calculationRequestId
   */
  getCalculationInput: {
    parameters: {
      path: {
        /**
         * @description The calculationRequestId of the calculation
         * @example 123456
         */
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns calculation inputs */
      200: {
        content: {
          'application/json': components['schemas']['CalculationUserInputs']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculationUserInputs']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculationUserInputs']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['CalculationUserInputs']
        }
      }
    }
  }
  getActiveCalculationReasons: {
    responses: {
      /** @description Returns list of active reasons */
      200: {
        content: {
          'application/json': components['schemas']['CalculationReason'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculationReason'][]
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculationReason'][]
        }
      }
      /** @description No active calculation reasons were found */
      404: {
        content: {
          'application/json': components['schemas']['CalculationReason'][]
        }
      }
    }
  }
  /**
   * Get breakdown for a calculationRequestId
   * @description This endpoint will return the breakdown based on a calculationRequestId
   */
  getCalculationBreakdown: {
    parameters: {
      path: {
        /**
         * @description The calculationRequestId of the breakdown
         * @example 123456
         */
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns breakdown of calculated dates */
      200: {
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
    }
  }
  /**
   * Get adjustments for a calculationRequestId
   * @description This endpoint will return the adjustments based on a calculationRequestId
   */
  get: {
    parameters: {
      path: {
        /**
         * @description The calculationRequestId of the calculation
         * @example 123456
         */
        calculationRequestId: number
      }
    }
    responses: {
      /** @description Returns adjustments */
      200: {
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
      /** @description No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
    }
  }
}
