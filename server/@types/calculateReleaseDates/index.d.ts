/* eslint-disable camelcase */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/test/calculation-by-booking': {
    /** This endpoint will calculate release dates based on a prisoners booking data (e.g. sentences and adjustments) */
    post: operations['calculate']
  }
  '/calculation/{prisonerId}': {
    /** This endpoint will calculate release dates based on a prisoners latest booking - this is a PRELIMINARY calculation that will not be published to NOMIS */
    post: operations['calculate_1']
  }
  '/calculation/{prisonerId}/confirm/{calculationRequestId}': {
    /** This endpoint will calculate release dates based on a prisoners latest booking */
    post: operations['confirmCalculation']
  }
  '/working-day/previous/{date}': {
    /** Finds the previous working day, adjusting for weekends and bank holidays */
    get: operations['previousWorkingDay']
  }
  '/working-day/next/{date}': {
    /** Finds the next working day, adjusting for weekends and bank holidays */
    get: operations['nextWorkingDay']
  }
  '/calculation/{prisonerId}/validate': {
    /** This endpoint will validate that the data for the given prisoner in NOMIS can be supported by the calculate release dates engine */
    get: operations['validate']
  }
  '/calculation/sentence-and-offences/{calculationRequestId}': {
    /** This endpoint will return the sentences and offences based on a calculationRequestId */
    get: operations['getSentencesAndOffence']
  }
  '/calculation/return-to-custody/{calculationRequestId}': {
    /** This endpoint will return the return to custody date based on a calculationRequestId */
    get: operations['getReturnToCustodyDate']
  }
  '/calculation/results/{prisonerId}/{bookingId}': {
    /** This endpoint will return the confirmed release dates based on a prisoners booking */
    get: operations['getConfirmedCalculationResults']
  }
  '/calculation/results/{calculationRequestId}': {
    /** This endpoint will return the release dates based on a calculationRequestId */
    get: operations['getCalculationResults']
  }
  '/calculation/prisoner-details/{calculationRequestId}': {
    /** This endpoint will return the prisoner details based on a calculationRequestId */
    get: operations['getPrisonerDetails']
  }
  '/calculation/breakdown/{calculationRequestId}': {
    /** This endpoint will return the breakdown based on a calculationRequestId */
    get: operations['getCalculationBreakdown']
  }
  '/calculation/adjustments/{calculationRequestId}': {
    /** This endpoint will return the adjustments based on a calculationRequestId */
    get: operations['get']
  }
}

export interface components {
  schemas: {
    Adjustment: {
      appliesToSentencesFrom: string
      numberOfDays: number
      fromDate?: string
      toDate?: string
    }
    Adjustments: {
      adjustments?: { [key: string]: components['schemas']['Adjustment'][] }
    }
    Booking: {
      offender: components['schemas']['Offender']
      sentences: components['schemas']['Sentence'][]
      adjustments: components['schemas']['Adjustments']
      returnToCustodyDate?: string
      bookingId: number
    }
    Duration: {
      durationElements: { [key: string]: number }
    }
    Offence: {
      committedAt: string
      isScheduleFifteen: boolean
      isScheduleFifteenMaximumLife: boolean
    }
    Offender: {
      reference: string
      dateOfBirth: string
      isActiveSexOffender: boolean
    }
    Sentence: {
      offence: components['schemas']['Offence']
      duration: components['schemas']['Duration']
      sentencedAt: string
      identifier: string
      consecutiveSentenceUUIDs: string[]
      caseSequence?: number
      lineSequence?: number
      caseReference?: string
      sentenceType: 'STANDARD_DETERMINATE' | 'STANDARD_RECALL' | 'FIXED_TERM_RECALL_14' | 'FIXED_TERM_RECALL_28'
    }
    BookingCalculation: {
      dates: { [key: string]: string }
      calculationRequestId: number
      effectiveSentenceLength: {
        years?: number
        months?: number
        days?: number
        negative?: boolean
        zero?: boolean
        chronology?: {
          id?: string
          calendarType?: string
        }
        units?: {
          dateBased?: boolean
          timeBased?: boolean
          duration?: {
            seconds?: number
            nano?: number
            negative?: boolean
            zero?: boolean
          }
          durationEstimated?: boolean
        }[]
      }
      calculationFragments?: components['schemas']['CalculationFragments']
      bookingId: number
      prisonerId: string
    }
    CalculationFragments: {
      breakdownHtml: string
    }
    WorkingDay: {
      date: string
      adjustedForWeekend: boolean
      adjustedForBankHoliday: boolean
    }
    ValidationMessage: {
      message: string
      code:
        | 'UNSUPPORTED_SENTENCE_TYPE'
        | 'OFFENCE_DATE_AFTER_SENTENCE_START_DATE'
        | 'OFFENCE_DATE_AFTER_SENTENCE_RANGE_DATE'
        | 'SENTENCE_HAS_NO_DURATION'
        | 'OFFENCE_MISSING_DATE'
        | 'REMAND_FROM_TO_DATES_REQUIRED'
        | 'SENTENCE_HAS_MULTIPLE_TERMS'
        | 'REMAND_OVERLAPS_WITH_REMAND'
        | 'REMAND_OVERLAPS_WITH_SENTENCE'
        | 'CUSTODIAL_PERIOD_EXTINGUISHED'
      sentenceSequence?: number
      arguments: string[]
    }
    ValidationMessages: {
      type: 'UNSUPPORTED' | 'VALIDATION' | 'VALID'
      messages: components['schemas']['ValidationMessage'][]
    }
    OffenderOffence: {
      offenderChargeId: number
      offenceStartDate?: string
      offenceEndDate?: string
      offenceCode: string
      offenceDescription: string
      indicators: string[]
    }
    SentenceAndOffences: {
      bookingId: number
      sentenceSequence: number
      lineSequence: number
      caseSequence: number
      consecutiveToSequence?: number
      sentenceStatus: string
      sentenceCategory: string
      sentenceCalculationType: string
      sentenceTypeDescription: string
      sentenceDate: string
      terms: components['schemas']['SentenceTerms'][]
      offences: components['schemas']['OffenderOffence'][]
      caseReference?: string
    }
    SentenceTerms: {
      years: number
      months: number
      weeks: number
      days: number
    }
    ReturnToCustodyDate: {
      bookingId: number
      returnToCustodyDate: string
    }
    Alert: {
      dateCreated: string
      dateExpires?: string
      alertType: string
      alertCode: string
    }
    PrisonerDetails: {
      bookingId: number
      offenderNo: string
      firstName: string
      lastName: string
      dateOfBirth: string
      alerts: components['schemas']['Alert'][]
    }
    /** Adjustments details associated that are specifically added as part of a rule */
    AdjustmentDuration: {
      /** Amount of adjustment */
      adjustmentValue: number
      /** Unit of adjustment */
      type:
        | 'Nanos'
        | 'Micros'
        | 'Millis'
        | 'Seconds'
        | 'Minutes'
        | 'Hours'
        | 'HalfDays'
        | 'Days'
        | 'Weeks'
        | 'Months'
        | 'Years'
        | 'Decades'
        | 'Centuries'
        | 'Millennia'
        | 'Eras'
        | 'Forever'
    }
    /** Calculation breakdown details */
    CalculationBreakdown: {
      concurrentSentences: components['schemas']['ConcurrentSentenceBreakdown'][]
      consecutiveSentence?: components['schemas']['ConsecutiveSentenceBreakdown']
      /** Breakdown details in a map keyed by release date type */
      breakdownByReleaseDateType: {
        [key: string]: components['schemas']['ReleaseDateCalculationBreakdown']
      }
    }
    ConcurrentSentenceBreakdown: {
      sentencedAt: string
      sentenceLength: string
      sentenceLengthDays: number
      dates: { [key: string]: components['schemas']['DateBreakdown'] }
      lineSequence: number
      caseSequence: number
      caseReference?: string
    }
    ConsecutiveSentenceBreakdown: {
      sentencedAt: string
      sentenceLength: string
      sentenceLengthDays: number
      dates: { [key: string]: components['schemas']['DateBreakdown'] }
      sentenceParts: components['schemas']['ConsecutiveSentencePart'][]
    }
    ConsecutiveSentencePart: {
      lineSequence: number
      caseSequence: number
      caseReference?: string
      sentenceLength: string
      sentenceLengthDays: number
      consecutiveToLineSequence?: number
      consecutiveToCaseSequence?: number
    }
    DateBreakdown: {
      unadjusted: string
      adjusted: string
      daysFromSentenceStart: number
      adjustedByDays: number
    }
    /** Calculation breakdown details for a release date type */
    ReleaseDateCalculationBreakdown: {
      /** Calculation rules used to determine this calculation. */
      rules: (
        | 'HDCED_GE_12W_LT_18M'
        | 'HDCED_GE_18M_LT_4Y'
        | 'HDCED_MINIMUM_14D'
        | 'TUSED_LICENCE_PERIOD_LT_1Y'
        | 'LED_CONSEC_ORA_AND_NON_ORA'
      )[]
      /** Adjustments details associated that are specifically added as part of a rule */
      rulesWithExtraAdjustments: {
        [key: string]: components['schemas']['AdjustmentDuration']
      }
      /** Amount of adjustment in days */
      adjustedDays: number
      /** Final release date (after all adjustments have been applied) */
      releaseDate: string
      /** Based on the screen design, the unadjusted date isn't derived in a consistent manner but is set as per the screen design */
      unadjustedDate: string
    }
    BookingAdjustments: {
      active: boolean
      fromDate: string
      toDate?: string
      numberOfDays: number
      type:
        | 'ADDITIONAL_DAYS_AWARDED'
        | 'LAWFULLY_AT_LARGE'
        | 'RESTORED_ADDITIONAL_DAYS_AWARDED'
        | 'SPECIAL_REMISSION'
        | 'UNLAWFULLY_AT_LARGE'
    }
    BookingAndSentenceAdjustments: {
      bookingAdjustments: components['schemas']['BookingAdjustments'][]
      sentenceAdjustments: components['schemas']['SentenceAdjustments'][]
    }
    SentenceAdjustments: {
      sentenceSequence: number
      active: boolean
      fromDate?: string
      toDate?: string
      numberOfDays: number
      type: 'RECALL_SENTENCE_REMAND' | 'RECALL_SENTENCE_TAGGED_BAIL' | 'REMAND' | 'TAGGED_BAIL' | 'UNUSED_REMAND'
    }
  }
}

export interface operations {
  /** This endpoint will calculate release dates based on a prisoners booking data (e.g. sentences and adjustments) */
  calculate: {
    responses: {
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Booking']
      }
    }
  }
  /** This endpoint will calculate release dates based on a prisoners latest booking - this is a PRELIMINARY calculation that will not be published to NOMIS */
  calculate_1: {
    parameters: {
      path: {
        /** The prisoners ID (aka nomsId) */
        prisonerId: string
      }
    }
    responses: {
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
    }
  }
  /** This endpoint will calculate release dates based on a prisoners latest booking */
  confirmCalculation: {
    parameters: {
      path: {
        /** The prisoners ID (aka nomsId) */
        prisonerId: string
        /** The calculation request ID of the calculation to be confirmed */
        calculationRequestId: number
      }
    }
    responses: {
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
      /** No calculation exists for the passed calculationRequestId or the write to NOMIS has failed */
      404: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
      /** The booking data that was used for the preliminary calculation has changed */
      412: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CalculationFragments']
      }
    }
  }
  /** Finds the previous working day, adjusting for weekends and bank holidays */
  previousWorkingDay: {
    parameters: {
      path: {
        /** The date to adjust */
        date: string
      }
    }
    responses: {
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
    }
  }
  /** Finds the next working day, adjusting for weekends and bank holidays */
  nextWorkingDay: {
    parameters: {
      path: {
        /** The date to adjust */
        date: string
      }
    }
    responses: {
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['WorkingDay']
        }
      }
    }
  }
  /** This endpoint will validate that the data for the given prisoner in NOMIS can be supported by the calculate release dates engine */
  validate: {
    parameters: {
      path: {
        /** The prisoners ID (aka nomsId) */
        prisonerId: string
      }
    }
    responses: {
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ValidationMessages']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ValidationMessages']
        }
      }
    }
  }
  /** This endpoint will return the sentences and offences based on a calculationRequestId */
  getSentencesAndOffence: {
    parameters: {
      path: {
        /** The calculationRequestId of the calculation */
        calculationRequestId: number
      }
    }
    responses: {
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['SentenceAndOffences'][]
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['SentenceAndOffences'][]
        }
      }
      /** No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['SentenceAndOffences'][]
        }
      }
    }
  }
  /** This endpoint will return the return to custody date based on a calculationRequestId */
  getReturnToCustodyDate: {
    parameters: {
      path: {
        /** The calculationRequestId of the calculation */
        calculationRequestId: number
      }
    }
    responses: {
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
      /** No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['ReturnToCustodyDate']
        }
      }
    }
  }
  /** This endpoint will return the confirmed release dates based on a prisoners booking */
  getConfirmedCalculationResults: {
    parameters: {
      path: {
        /** The prisoners ID (aka nomsId) */
        prisonerId: string
        /** The booking ID associated with the calculation */
        bookingId: number
      }
    }
    responses: {
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
      /** No confirmed calculation exists for this prisoner and booking */
      404: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
    }
  }
  /** This endpoint will return the release dates based on a calculationRequestId */
  getCalculationResults: {
    parameters: {
      path: {
        /** The calculationRequestId of the results */
        calculationRequestId: number
      }
    }
    responses: {
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
      /** No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['BookingCalculation']
        }
      }
    }
  }
  /** This endpoint will return the prisoner details based on a calculationRequestId */
  getPrisonerDetails: {
    parameters: {
      path: {
        /** The calculationRequestId of the calculation */
        calculationRequestId: number
      }
    }
    responses: {
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
      /** No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
    }
  }
  /** This endpoint will return the breakdown based on a calculationRequestId */
  getCalculationBreakdown: {
    parameters: {
      path: {
        /** The calculationRequestId of the breakdown */
        calculationRequestId: number
      }
    }
    responses: {
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
      /** No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['CalculationBreakdown']
        }
      }
    }
  }
  /** This endpoint will return the adjustments based on a calculationRequestId */
  get: {
    parameters: {
      path: {
        /** The calculationRequestId of the calculation */
        calculationRequestId: number
      }
    }
    responses: {
      /** Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
      /** Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
      /** No calculation exists for this calculationRequestId */
      404: {
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
    }
  }
}
