/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/queue-admin/retry-dlq/{dlqName}': {
    put: operations['retryDlq']
  }
  '/queue-admin/retry-all-dlqs': {
    put: operations['retryAllDlqs']
  }
  '/queue-admin/purge-queue/{queueName}': {
    put: operations['purgeQueue']
  }
  '/prisoner-index/switch-index': {
    /** current index will be switched both indexed have to be complete, requires PRISONER_INDEX role */
    put: operations['switchIndex']
  }
  '/prisoner-index/queue-housekeeping': {
    /** This is an internal service which isn't exposed to the outside world. It is called from a Kubernetes CronJob named `index-housekeeping-cronjob` */
    put: operations['indexQueueHousekeeping']
  }
  '/prisoner-index/mark-complete': {
    /** Swaps to the newly built index, requires PRISONER_INDEX role */
    put: operations['indexComplete']
  }
  '/prisoner-index/index/prisoner/{prisonerNumber}': {
    /** Requires PRISONER_INDEX role */
    put: operations['indexPrisoner']
  }
  '/prisoner-index/cancel-index': {
    /** Only cancels if indexing is in progress, requires PRISONER_INDEX role */
    put: operations['cancelIndex']
  }
  '/prisoner-index/build-index': {
    /** Old index is left untouched and will be maintained whilst new index is built, requires PRISONER_INDEX role */
    put: operations['buildIndex']
  }
  '/restricted-patient-search/match-restricted-patients': {
    /** Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role */
    post: operations['findByCriteria']
  }
  '/prisoner-search/prisoner-numbers': {
    /** Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role */
    post: operations['findByNumbers']
  }
  '/prisoner-search/match': {
    /** Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role */
    post: operations['findByCriteria_1']
  }
  '/prisoner-search/match-prisoners': {
    /** Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role */
    post: operations['findByCriteria_2']
  }
  '/prisoner-search/booking-ids': {
    /** Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role */
    post: operations['findByIds']
  }
  '/prisoner-detail': {
    /**
     * Search terms and identifiers can be provided in either or mixed case and are converted to the appropriate case.
     *       This endpoint will find both exact values (full term matched) or wildcards supporting the '*' and '?' symbols.
     *       The '*' symbol will match any number of characters e.g. firstName='J*' will match 'John', 'Jane', and 'James'.
     *       The '?' symbol will match any letter substituted at that position. e.g. firstName='t?ny' will match 'Tony' and 'Tiny'
     *       Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
     */
    post: operations['prisonerDetailSearch']
  }
  '/match-prisoners': {
    /** Specify the request criteria to match against, role required is ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH */
    post: operations['matchPrisoners']
  }
  '/keyword': {
    /**
     * Words and identifiers can be provided in either or mixed case and will be matched against all indexed text and keyword fields.
     *       Identifiers within the [and, or, not, exact] terms are detected and converted to the appropriate case.
     *       Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
     */
    post: operations['keywordSearch']
  }
  '/global-search': {
    /** Requires ROLE_GLOBAL_SEARCH role or ROLE_PRISONER_SEARCH role */
    post: operations['globalFindByCriteria']
  }
  '/synthetic-monitor': {
    get: operations['syntheticMonitor']
  }
  '/prisoner-search/prison/{prisonId}': {
    /** Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role */
    get: operations['findByPrison']
  }
}

export interface components {
  schemas: {
    Message: {
      messageId?: string
      receiptHandle?: string
      body?: string
      attributes?: { [key: string]: string }
      messageAttributes?: {
        [key: string]: components['schemas']['MessageAttributeValue']
      }
      md5OfBody?: string
      md5OfMessageAttributes?: string
    }
    MessageAttributeValue: {
      stringValue?: string
      binaryValue?: {
        short?: number
        char?: string
        int?: number
        long?: number
        float?: number
        double?: number
        direct?: boolean
        readOnly?: boolean
      }
      stringListValues?: string[]
      binaryListValues?: {
        short?: number
        char?: string
        int?: number
        long?: number
        float?: number
        double?: number
        direct?: boolean
        readOnly?: boolean
      }[]
      dataType?: string
    }
    RetryDlqResult: {
      messagesFoundCount: number
      messages: components['schemas']['Message'][]
    }
    PurgeQueueResult: {
      messagesFoundCount: number
    }
    IndexStatus: {
      id: string
      currentIndex: 'INDEX_A' | 'INDEX_B'
      startIndexTime?: string
      endIndexTime?: string
      inProgress: boolean
      inError: boolean
    }
    Prisoner: {
      /** Prisoner Number */
      prisonerNumber?: string
      /** PNC Number */
      pncNumber?: string
      /** PNC Number */
      pncNumberCanonicalShort?: string
      /** PNC Number */
      pncNumberCanonicalLong?: string
      /** CRO Number */
      croNumber?: string
      /** Booking No. */
      bookingId?: string
      /** Book Number */
      bookNumber?: string
      /** First Name */
      firstName?: string
      /** Middle Names */
      middleNames?: string
      /** Last name */
      lastName?: string
      /** Date of Birth */
      dateOfBirth?: string
      /** Gender */
      gender?: string
      /** Ethnicity */
      ethnicity?: string
      /** Youth Offender? */
      youthOffender?: boolean
      /** Marital Status */
      maritalStatus?: string
      /** Religion */
      religion?: string
      /** Nationality */
      nationality?: string
      /** Status of the prisoner */
      status?: string
      /** Last Movement Type Code of prisoner */
      lastMovementTypeCode?: string
      /** Last Movement Reason of prisoner */
      lastMovementReasonCode?: string
      /** In/Out Status */
      inOutStatus?: 'IN,OUT'
      /** Prison ID */
      prisonId?: string
      /** Prison Name */
      prisonName?: string
      /** In prison cell location */
      cellLocation?: string
      /** Aliases Names and Details */
      aliases?: components['schemas']['PrisonerAlias'][]
      /** Alerts */
      alerts?: components['schemas']['PrisonerAlert'][]
      /** Cell Sharing Risk Assessment */
      csra?: string
      /** Prisoner Category */
      category?: string
      /** Legal Status */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
      /** The prisoner's imprisonment status code. */
      imprisonmentStatus?: string
      /** The prisoner's imprisonment status description. */
      imprisonmentStatusDescription?: string
      /** Most serious offence for this sentence */
      mostSeriousOffence?: string
      /** Indicates that the offender has been recalled */
      recall?: boolean
      /** Indicates the the offender has an indeterminate sentence */
      indeterminateSentence?: boolean
      /** Start Date for this sentence */
      sentenceStartDate?: string
      /** Actual of most likely Release Date */
      releaseDate?: string
      /** Release Date Confirmed */
      confirmedReleaseDate?: string
      /** Sentence Expiry Date */
      sentenceExpiryDate?: string
      /** Licence Expiry Date */
      licenceExpiryDate?: string
      /** HDC Eligibility Date */
      homeDetentionCurfewEligibilityDate?: string
      /** HDC Actual Date */
      homeDetentionCurfewActualDate?: string
      /** HDC End Date */
      homeDetentionCurfewEndDate?: string
      /** Top-up supervision start date */
      topupSupervisionStartDate?: string
      /** Top-up supervision expiry date */
      topupSupervisionExpiryDate?: string
      /** Days added to sentence term due to adjustments. */
      additionalDaysAwarded?: number
      /** Release date for Non determinant sentence (if applicable). This will be based on one of ARD, CRD, NPD or PRRD. */
      nonDtoReleaseDate?: string
      /** Indicates which type of non-DTO release date is the effective release date. One of 'ARD’, 'CRD’, ‘NPD’ or 'PRRD’. */
      nonDtoReleaseDateType?: 'ARD' | 'CRD' | 'NPD' | 'PRRD'
      /** Date prisoner was received into the prison */
      receptionDate?: string
      /** Parole  Eligibility Date */
      paroleEligibilityDate?: string
      /** Automatic Release Date. If automaticReleaseOverrideDate is available then it will be set as automaticReleaseDate */
      automaticReleaseDate?: string
      /** Post Recall Release Date. if postRecallReleaseOverrideDate is available then it will be set as postRecallReleaseDate */
      postRecallReleaseDate?: string
      /** Conditional Release Date. If conditionalReleaseOverrideDate is available then it will be set as conditionalReleaseDate */
      conditionalReleaseDate?: string
      /** Actual Parole Date */
      actualParoleDate?: string
      /** current prison or outside with last movement information. */
      locationDescription?: string
      /** Indicates a restricted patient */
      restrictedPatient: boolean
      /** Supporting prison ID for POM */
      supportingPrisonId?: string
      /** Which hospital the offender has been discharged to */
      dischargedHospitalId?: string
      /** Hospital name to which the offender was discharged */
      dischargedHospitalDescription?: string
      /** Date of discharge */
      dischargeDate?: string
      /** Any additional discharge details */
      dischargeDetails?: string
    }
    /** Alerts */
    PrisonerAlert: {
      /** Alert Type */
      alertType: string
      /** Alert Code */
      alertCode: string
    }
    /** Aliases Names and Details */
    PrisonerAlias: {
      /** First Name */
      firstName: string
      /** Middle names */
      middleNames?: string
      /** Last name */
      lastName: string
      /** Date of birth */
      dateOfBirth: string
      /** Gender */
      gender?: string
      /** Ethnicity */
      ethnicity?: string
    }
    /** Search Criteria for Prisoner Search */
    RestrictedPatientSearchCriteria: {
      /** Prisoner identifier, one of prisoner number, book number, booking ID or PNC */
      prisonerIdentifier?: string
      /** First Name */
      firstName?: string
      /** Last Name */
      lastName?: string
      /** List of supporting Prison Ids to restrict the search by. Unrestricted if not supplied or null */
      supportingPrisonIds?: string[]
    }
    Pageable: {
      offset?: number
      sort?: components['schemas']['Sort']
      pageSize?: number
      pageNumber?: number
      paged?: boolean
      unpaged?: boolean
    }
    Sort: {
      sorted?: boolean
      unsorted?: boolean
      empty?: boolean
    }
    PagePrisoner: {
      totalElements?: number
      totalPages?: number
      size?: number
      content?: components['schemas']['Prisoner'][]
      number?: number
      sort?: components['schemas']['Sort']
      last?: boolean
      first?: boolean
      numberOfElements?: number
      pageable?: components['schemas']['Pageable']
      empty?: boolean
    }
    PrisonerNumbers: {
      /** List of prisoner numbers to search by */
      prisonerNumbers: string[]
    }
    /** Search Criteria for Prisoner Search */
    PrisonSearch: {
      /** Prisoner identifier, one of prisoner number, book number, booking ID or PNC */
      prisonerIdentifier?: string
      /** First Name */
      firstName?: string
      /** Last Name */
      lastName?: string
      /** Prison Id, Prison Id or OUT or TRN */
      prisonId?: string
      /** Include aliases in search */
      includeAliases: boolean
    }
    /** Search Criteria for Prisoner Search */
    SearchCriteria: {
      /** Prisoner identifier, one of prisoner number, book number, booking ID or PNC */
      prisonerIdentifier?: string
      /** First Name */
      firstName?: string
      /** Last Name */
      lastName?: string
      /** List of Prison Ids (can include OUT and TRN) to restrict the search by. Unrestricted if not supplied or null */
      prisonIds?: string[]
      /** Include aliases in search */
      includeAliases: boolean
      /** Include restricted patients in search */
      includeRestrictivePatients: boolean
    }
    BookingIds: {
      /** List of bookingIds to search by */
      bookingIds: number[]
    }
    /** Pagination options. Will default to the first page if omitted. */
    PaginationRequest: {
      /** The page number required in the paginated response */
      page: number
      /** The number of results to return for paginated response */
      size: number
    }
    PrisonerDetailRequest: {
      /** Prisoner first name */
      firstName?: string
      /** Prisoner last name */
      lastName?: string
      /** Prisoner number (aka. offenderId, nomisId) */
      nomsNumber?: string
      /** Police National Computer (PNC) number */
      pncNumber?: string
      /** Criminal Records Office (CRO) number */
      croNumber?: string
      /** Fuzzy matching. Allow a one character difference in spelling in word lengths below five and two differences above. */
      fuzzyMatch?: boolean
      /** List of prison codes to filter results by */
      prisonIds?: string[]
      pagination: components['schemas']['PaginationRequest']
    }
    PrisonerDetailResponse: {
      totalElements?: number
      totalPages?: number
      size?: number
      content?: components['schemas']['Prisoner'][]
      number?: number
      sort?: components['schemas']['Sort']
      last?: boolean
      first?: boolean
      numberOfElements?: number
      pageable?: components['schemas']['Pageable']
      empty?: boolean
    }
    ErrorResponse: {
      /** Status of Error Code */
      status: number
      /** Developer Information message */
      developerMessage?: string
      /** Internal Error Code */
      errorCode?: number
      /** Error message information */
      userMessage?: string
      /** Additional information about the error */
      moreInfo?: string
    }
    MatchRequest: {
      /** Prisoner first name */
      firstName?: string
      /** Prisoner last Name */
      lastName: string
      /** Prisoner date of birth */
      dateOfBirth?: string
      /** Police National Computer (PNC) number */
      pncNumber?: string
      /** Criminal Records Office (CRO) number */
      croNumber?: string
      /** The Prisoner NOMIS Id (aka prison number/offender no in DPS) */
      nomsNumber?: string
    }
    /** List of prisoners that share the same possibility of being the match */
    PrisonerMatch: {
      prisoner: components['schemas']['Prisoner']
    }
    PrisonerMatches: {
      /** List of prisoners that share the same possibility of being the match */
      matches: components['schemas']['PrisonerMatch'][]
      /** How the match was performed */
      matchedBy:
        | 'ALL_SUPPLIED'
        | 'ALL_SUPPLIED_ALIAS'
        | 'HMPPS_KEY'
        | 'EXTERNAL_KEY'
        | 'NAME'
        | 'PARTIAL_NAME'
        | 'PARTIAL_NAME_DOB_LENIENT'
        | 'NOTHING'
    }
    KeywordRequest: {
      /** Match where any of the keywords are present in any text field */
      orWords?: string
      /** Match where all keywords are present in any text field */
      andWords?: string
      /** Filter results where any of these words are present in any text field */
      notWords?: string
      /** Match only prisoners where the full phrase is present in any text field */
      exactPhrase?: string
      /** Fuzzy matching. Allow a one character difference in spelling in word lengths below five and two differences above. */
      fuzzyMatch?: boolean
      /** List of prison codes to filter results */
      prisonIds?: string[]
      pagination: components['schemas']['PaginationRequest']
    }
    KeywordResponse: {
      totalElements?: number
      totalPages?: number
      size?: number
      content?: components['schemas']['Prisoner'][]
      number?: number
      sort?: components['schemas']['Sort']
      last?: boolean
      first?: boolean
      numberOfElements?: number
      pageable?: components['schemas']['Pageable']
      empty?: boolean
    }
    /** Search Criteria for Global Prisoner Search */
    GlobalSearchCriteria: {
      /** Prisoner identifier, one of prisoner number, book number, booking ID or PNC */
      prisonerIdentifier?: string
      /** First Name */
      firstName?: string
      /** Last Name */
      lastName?: string
      /** Gender, F - Female, M - Male, NK - Not Known / Not Recorded or NS - Not Specified (Indeterminate) */
      gender?: 'M' | 'F' | 'NK' | 'NS' | 'ALL'
      /** Location, All or Inside or Outside */
      location?: string
      /** Date of birth */
      dateOfBirth?: string
      /** Include aliases in search */
      includeAliases: boolean
    }
  }
}

export interface operations {
  retryDlq: {
    parameters: {
      path: {
        dlqName: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      path: {
        queueName: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  /** current index will be switched both indexed have to be complete, requires PRISONER_INDEX role */
  switchIndex: {
    responses: {
      /** Unable to switch indexes - one is marked as in progress or in error */
      409: {
        content: {
          'application/json': components['schemas']['IndexStatus']
        }
      }
    }
  }
  /** This is an internal service which isn't exposed to the outside world. It is called from a Kubernetes CronJob named `index-housekeeping-cronjob` */
  indexQueueHousekeeping: {
    responses: {
      /** Unable to marked index complete as it is in error */
      409: unknown
    }
  }
  /** Swaps to the newly built index, requires PRISONER_INDEX role */
  indexComplete: {
    parameters: {
      query: {
        ignoreThreshold?: boolean
      }
    }
    responses: {
      /** Unable to marked index complete as it is in error */
      409: {
        content: {
          'application/json': components['schemas']['IndexStatus']
        }
      }
    }
  }
  /** Requires PRISONER_INDEX role */
  indexPrisoner: {
    parameters: {
      path: {
        prisonerNumber: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Prisoner']
        }
      }
    }
  }
  /** Only cancels if indexing is in progress, requires PRISONER_INDEX role */
  cancelIndex: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['IndexStatus']
        }
      }
    }
  }
  /** Old index is left untouched and will be maintained whilst new index is built, requires PRISONER_INDEX role */
  buildIndex: {
    responses: {
      /** Unable to build index - it is marked as in progress or in error */
      409: {
        content: {
          'application/json': components['schemas']['IndexStatus']
        }
      }
    }
  }
  /** Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role */
  findByCriteria: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          searchCriteria?: components['schemas']['RestrictedPatientSearchCriteria']
          pageable?: components['schemas']['Pageable']
        }
      }
    }
  }
  /** Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role */
  findByNumbers: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerNumbers']
      }
    }
  }
  /** Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role */
  findByCriteria_1: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonSearch']
      }
    }
  }
  /** Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role */
  findByCriteria_2: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SearchCriteria']
      }
    }
  }
  /** Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role */
  findByIds: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Prisoner'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BookingIds']
      }
    }
  }
  /**
   * Search terms and identifiers can be provided in either or mixed case and are converted to the appropriate case.
   *       This endpoint will find both exact values (full term matched) or wildcards supporting the '*' and '?' symbols.
   *       The '*' symbol will match any number of characters e.g. firstName='J*' will match 'John', 'Jane', and 'James'.
   *       The '?' symbol will match any letter substituted at that position. e.g. firstName='t?ny' will match 'Tony' and 'Tiny'
   *       Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
   */
  prisonerDetailSearch: {
    responses: {
      /** Search successfully performed */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerDetailResponse']
        }
      }
      /** Incorrect information provided to perform prisoner match */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to search for prisoner data */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerDetailRequest']
      }
    }
  }
  /** Specify the request criteria to match against, role required is ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH */
  matchPrisoners: {
    responses: {
      /** Search successfully performed */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerMatches']
        }
      }
      /** Incorrect information provided to perform prisoner match */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to search for prisoner data */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MatchRequest']
      }
    }
  }
  /**
   * Words and identifiers can be provided in either or mixed case and will be matched against all indexed text and keyword fields.
   *       Identifiers within the [and, or, not, exact] terms are detected and converted to the appropriate case.
   *       Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role.
   */
  keywordSearch: {
    responses: {
      /** Search successfully performed */
      200: {
        content: {
          'application/json': components['schemas']['KeywordResponse']
        }
      }
      /** Incorrect information provided to perform prisoner match */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Incorrect permissions to search for prisoner data */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['KeywordRequest']
      }
    }
  }
  /** Requires ROLE_GLOBAL_SEARCH role or ROLE_PRISONER_SEARCH role */
  globalFindByCriteria: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': {
          globalSearchCriteria?: components['schemas']['GlobalSearchCriteria']
          pageable?: components['schemas']['Pageable']
        }
      }
    }
  }
  syntheticMonitor: {
    responses: {
      /** OK */
      200: unknown
    }
  }
  /** Requires ROLE_GLOBAL_SEARCH or ROLE_PRISONER_SEARCH role */
  findByPrison: {
    parameters: {
      path: {
        prisonId: string
      }
      query: {
        'include-restricted-patients'?: boolean
        pageable: components['schemas']['Pageable']
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PagePrisoner']
        }
      }
    }
  }
}
