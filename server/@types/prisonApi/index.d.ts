/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/users/me/activeCaseLoad': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update working caseload for current user.
     * @description Update working caseload for current user.
     */
    put: operations['updateMyActiveCaseLoad']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/users/add/default/{caseload}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Add the NWEB caseload to specified caseload.
     * @description Requires role MAINTAIN_ACCESS_ROLES or MAINTAIN_ACCESS_ROLES_ADMIN
     */
    put: operations['addApiAccessForCaseload']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/splash-screen/{moduleName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get splash screen by module name
     * @description Returns a splash screen by module name. Requires PRISON_API__SPLASH_SCREEN__RO.
     */
    get: operations['getSplashScreenByModuleName']
    /**
     * Update a splash screen
     * @description Updates an existing splash screen. Requires PRISON_API__SPLASH_SCREEN__RW.
     */
    put: operations['updateSplashScreen']
    /**
     * Create a new splash screen
     * @description Creates a new splash screen. Requires PRISON_API__SPLASH_SCREEN__RW.
     */
    post: operations['createSplashScreen']
    /**
     * Delete a splash screen
     * @description Deletes an existing splash screen. Requires PRISON_API__SPLASH_SCREEN__RW.
     */
    delete: operations['deleteSplashScreen']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/splash-screen/{moduleName}/condition/{conditionType}/{conditionValue}/{blockAccess}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update a condition
     * @description Updates an existing condition. Requires PRISON_API__SPLASH_SCREEN__RW.
     */
    put: operations['updateCondition']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/smoketest/offenders/{offenderNo}/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Sets the status for this offender to IN if it currently OUT, with smoke test data */
    put: operations['offenderStatusSetup']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/smoketest/offenders/{offenderNo}/release': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Releases this offender, with smoke test data */
    put: operations['releasePrisoner']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/smoketest/offenders/{offenderNo}/recall': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Recalls this offender, with smoke test data */
    put: operations['recallPrisoner']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/reference-domains/domains/{domain}/codes/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Reference code detail for reference domain and code (with sub-codes).
     * @description Reference code detail for reference domain and code (with sub-codes).<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getReferenceCodeByDomainAndCode']
    /** Updates a reference code */
    put: operations['updateReferenceCode']
    /** Creates a reference code */
    post: operations['createReferenceCode']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/person/{prisonerNumber}/distinguishing-mark/{seqId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a specific distinguishing mark associated with a prisoner
     * @description Requires role PRISON_API__PRISONER_PROFILE__RW
     */
    get: operations['getIdentifyingMark']
    /**
     * Update an existing distinguishing mark
     * @description Requires role PRISON_API__PRISONER_PROFILE__RW
     */
    put: operations['updateMark']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/person/photo/{photoId}/image': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update the content of an image
     * @description Requires role PRISON_API__PRISONER_PROFILE__RW
     */
    put: operations['updateImage']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/transfer-out': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** *** BETA *** Marks a prisoner as in transit from their current prison location to a new prison. Must be an active prisoner in currently inside a prison, requires the TRANSFER_PRISONER role */
    put: operations['transferOutPrisoner']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/transfer-in': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** *** BETA *** Transfer a prisoner into a prison. Must be an out prisoner in currently in transfer status, requires the TRANSFER_PRISONER role */
    put: operations['transferInPrisoner']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/temporary-absence-out': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** *** ALPHA *** transfer a prisoner to a temporary absence with the option to release the prisoners bed, requires the TRANSFER_PRISONER_ALPHA role. Only support scenarios are unscheduled to city and scheduled to address */
    put: operations['transferOutPrisonerToTemporaryAbsence']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/temporary-absence-arrival': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Transfer a prisoner into a prison from temporary absence. Must be an out prisoner in currently in TAP status, requires the TRANSFER_PRISONER role */
    put: operations['temporaryAbsenceArrival']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/smoker': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update the prisoner's smoker status on the current alias. Requires the PRISON_API__PRISONER_PROFILE__RW role. */
    put: operations['updateSmokerStatus']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/sexual-orientation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update the prisoner's sexual orientation on the latest booking. Requires the PRISON_API__PRISONER_PROFILE__RW role. */
    put: operations['updateSexualOrientation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/religion': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update the prisoner's religion on the current alias. Requires the PRISON_API__PRISONER_PROFILE__RW role. */
    put: operations['updateReligion']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/release': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** *** BETA *** Releases a prisoner from their current prison location. Must be an active prisoner in currently inside a prison, requires the RELEASE_PRISONER role */
    put: operations['releasePrisoner_1']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/recall': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Recalls a prisoner into prison. TRANSFER_PRISONER role */
    put: operations['recallPrisoner_1']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/phone-numbers/{phoneNumberId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update a phone number for the prisoner */
    put: operations['updateOffenderPhoneNumber']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/nationality': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update the prisoner's nationality on the current alias. Requires the PRISON_API__PRISONER_PROFILE__RW role. */
    put: operations['updateNationality']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/military-records/{militarySeq}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update the prisoner's military record. Requires the PRISON_API__PRISONER_PROFILE__RW role. */
    put: operations['updateMilitaryRecord']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/living-unit/{internalLocationDescription}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Move the prisoner to the specified cell.
     * @description Unilink specific version of /api/bookings/{bookingId}/living-unit/{internalLocationDescription}.<br/>
     *           Requires either a valid user token or a token with UNILINK role.
     */
    put: operations['moveToCellOrReception']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/email-addresses/{emailAddressId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update an email number for the prisoner */
    put: operations['updateOffenderEmailAddress']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/discharge-to-hospital': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Discharges a prisoner to hospital, requires the RELEASE_PRISONER role */
    put: operations['dischargePrisonerToHospital']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/court-transfer-out': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** *** ALPHA *** transfer a prisoner to a court with the option to release the prisoners bed, requires the TRANSFER_PRISONER_ALPHA role */
    put: operations['transferOutPrisonerToCourt']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/court-transfer-in': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Transfer a prisoner into a prison from court. Must be an out prisoner in currently in transfer status, requires the TRANSFER_PRISONER role */
    put: operations['courtTransferIn']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/core-person-record/secondary-language': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Adds or replaces core person record secondary language data.
     * @description Requires the PRISON_API__PRISONER_PROFILE__RW role.
     */
    put: operations['addSecondaryLanguage']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/core-person-record/physical-attributes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get core person record physical attributes of a prisoner
     * @description Requires the PRISON_API__PRISONER_PROFILE__RW role.
     */
    get: operations['getPhysicalAttributes']
    /**
     * Update core person record physical attributes of a prisoner.
     * @description Requires the PRISON_API__PRISONER_PROFILE__RW role.
     */
    put: operations['updatePhysicalAttributes']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/core-person-record/language-preferences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update core person record language preferences of a prisoner.
     * @description Requires the PRISON_API__PRISONER_PROFILE__RW role.
     */
    put: operations['updateLanguagePreferences']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/birth-place': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update the prisoner's birth place on the current alias. Requires the PRISON_API__PRISONER_PROFILE__RW role. */
    put: operations['updateBirthPlaceOfCurrentAlias']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/birth-country': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update the prisoner's birth country on the current alias. Requires the PRISON_API__PRISONER_PROFILE__RW role. */
    put: operations['updateBirthCountryOfCurrentAlias']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-sentences/booking/{bookingId}/home-detention-curfews/latest/checks-passed': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Set the HDC checks passed flag */
    put: operations['setCurfewChecks']
    post?: never
    /** Clear the HDC checks passed flag */
    delete: operations['clearCurfewChecks']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-sentences/booking/{bookingId}/home-detention-curfews/latest/approval-status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Set the HDC approval status */
    put: operations['setApprovalStatus']
    post?: never
    /** Clear the HDC approval status */
    delete: operations['clearApprovalStatus']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-assessments/category/{bookingId}/nextReviewDate/{nextReviewDate}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update the next review date on the latest active categorisation
     * @description Update categorisation record with new next review date. Requires client role MAINTAIN_ASSESSMENTS.
     */
    put: operations['updateCategorisationNextReviewDate']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-assessments/category/{bookingId}/inactive': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Set all active or pending (status A or P) categorisations inactive
     * @description This endpoint should only be used with edge case categorisations. Requires client role MAINTAIN_ASSESSMENTS.
     */
    put: operations['setCategorisationInactive']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-assessments/category/reject': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Reject a pending offender categorisation.
     * @description Update categorisation record with rejection. Requires client role MAINTAIN_ASSESSMENTS or user role APPROVE_CATEGORISATION.
     */
    put: operations['rejectCategorisation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-assessments/category/categorise': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update a pending offender categorisation.
     * @description This is intended for use by the categoriser to correct any problems with a pending (in-progress) categorisation. Fields left as null will be left unchanged. Requires client role MAINTAIN_ASSESSMENTS or user role ROLE_CREATE_CATEGORISATION or ROLE_CREATE_RECATEGORISATION.
     */
    put: operations['updateCategorisation']
    /**
     * Record new offender categorisation.
     * @description Create new categorisation record. The booking id and new sequence number is returned. Requires client role MAINTAIN_ASSESSMENTS or user role ROLE_CREATE_CATEGORISATION or ROLE_CREATE_RECATEGORISATION.
     */
    post: operations['createCategorisation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-assessments/category/approve': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Approve a pending offender categorisation.
     * @description Update categorisation record with approval. Requires client role MAINTAIN_ASSESSMENTS or user role APPROVE_CATEGORISATION.
     */
    put: operations['approveCategorisation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offences/update-active-flag': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update the active flag of an offence
     * @description Requires NOMIS_OFFENCE_ACTIVATOR role
     */
    put: operations['updateOffenceActiveFlag']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offences/offence': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update offences
     * @description Requires OFFENCE_MAINTAINER role
     */
    put: operations['updateOffences']
    /**
     * Create offences
     * @description Requires OFFENCE_MAINTAINER role
     */
    post: operations['createOffences']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/prison-to-prison/{eventId}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Cancels a scheduled prison to prison move for an offender.
     * @description Cancels a scheduled prison to prison move for an offender. Requires role PRISON_MOVE_MAINTAINER and scope write
     */
    put: operations['cancelPrisonToPrisonMove']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/move-to-cell-swap': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Move the prisoner from current cell to cell swap
     * @deprecated
     * @description Using role MAINTAIN_CELL_MOVEMENTS will no longer check for user access to prisoner booking, this endpoint will be removed in future releases
     */
    put: operations['moveToCellSwap']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/living-unit/{internalLocationDescription}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Move Offender to another cell or reception */
    put: operations['moveToCell']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/court-hearings/{hearingId}/hearing-date': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Amends the scheduled court hearing date and/or time for an offender.
     * @description Amends the scheduled court hearing date and/or time for an offender. Requires role COURT_HEARING_MAINTAINER and scope write
     */
    put: operations['courtHearingDateAmendment']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/activities/{activityId}/attendance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update offender attendance and pay.
     * @description Requires role PAY
     */
    put: operations['updateAttendance']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/offenderNo/{offenderNo}/activities/{activityId}/attendance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update offender attendance and pay.
     * @description Requires role PAY
     */
    put: operations['updateAttendance_1']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/activities/attendance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update attendance and pay for multiple bookings.
     * @description Requires role PAY
     */
    put: operations['updateAttendanceForMultipleBookingIds']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/appointments/{appointmentId}/comment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Change an appointment's comment.
     * @description Requires role GLOBAL_APPOINTMENT
     */
    put: operations['updateAppointmentComment']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/aliases/{offenderId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve a specific aliases for the prisoner. Requires the PRISON_API__PRISONER_PROFILE__RW role. */
    get: operations['getAlias']
    /** Update the prisoner's alias. Requires the PRISON_API__PRISONER_PROFILE__RW role. */
    put: operations['updateAlias']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/aliases/{offenderId}/offender-identifiers/{offenderIdSeq}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a single identifier for the alias by sequence id */
    get: operations['getOffenderIdentifier']
    /** Update an existing identifier for the alias */
    put: operations['updateOffenderIdentifier']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/{agencyId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Agency detail.
     * @description Agency detail.
     */
    get: operations['getAgency']
    /**
     * Update an existing agency
     * @description Requires MAINTAIN_REF_DATA
     */
    put: operations['updateAgency']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/{agencyId}/addresses/{addressId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update an existing address
     * @description Requires MAINTAIN_REF_DATA
     */
    put: operations['updateAgencyAddress']
    post?: never
    /**
     * Delete an existing address
     * @description Requires MAINTAIN_REF_DATA
     */
    delete: operations['deleteAgencyAddress']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/{agencyId}/addresses/{addressId}/phones/{phoneId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update an existing contact on an address
     * @description Requires MAINTAIN_REF_DATA
     */
    put: operations['updateAgencyAddressPhoneContact']
    post?: never
    /**
     * Delete an existing address contact
     * @description Requires MAINTAIN_REF_DATA
     */
    delete: operations['deleteAgencyAddressPhoneContact']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prison/{prison_id}/offenders/{noms_id}/transactions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Post a financial transaction to NOMIS.
     * @description The valid prison_id and type combinations are defined in the Nomis transaction_operations table which is maintained by the Maintain Transaction Operations screen (OCMTROPS), from the Financials Maintenance menu. Only those prisons (Caseloads) and Transaction types associated with the NOMISAPI module are valid.<br/>
     *     This will be setup by script intially as part of the deployment process as shown below<br/><br/>
     *     <table>
     *       <tr><th>Transaction Type</th><th>Description</th><th>Digital Prison</th><th>Non Digital Prison</th></tr>
     *       <tr><td>CANT</td><td>Canteen Spend</td><td>Yes</td><td>No</td></tr>
     *       <tr><td>REFND</td><td>Canteen Refund</td><td>Yes</td><td>No</td></tr>
     *       <tr><td>PHONE</td><td>Phone Credit</td><td>Yes</td><td>No</td></tr>
     *       <tr><td>MRPR</td><td>Misc Receipt - Private Cash</td><td>Yes</td><td>Yes</td></tr>
     *       <tr><td>MTDS</td><td>Money through digital service</td><td>Yes</td><td>Yes</td></tr>
     *       <tr><td>DTDS</td><td>Disbursement through Digital service</td><td>Yes</td><td>Yes</td></tr>
     *       <tr><td>CASHD</td><td>Cash Disbursement</td><td>Yes</td><td>Yes</td></tr>
     *       <tr><td>RELA</td><td>Money to Relatives</td><td>Yes</td><td>Yes</td></tr>
     *       <tr><td>RELS</td><td>Money to Relatives- Spends</td><td>Yes</td><td>Yes</td></tr>
     *     </table>Notes:<br/>
     *     <ul>
     *       <li>The sub_account the amount is debited or credited from will be determined by the transaction_type definition in NOMIS.</li>
     *       <li>If the field X-Client-Name is present in the request header then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway.</li>
     *       <li>The client_unique_ref can have a maximum of 64 characters, only alphabetic, numeric, ‘-’ and ‘_’ characters are allowed</li>
     *     </ul>
     *     Requires NOMIS_API_V1, UNILINK or PRISON_API__HMPPS_INTEGRATION_API role.
     *
     */
    post: operations['createTransaction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prison/{prison_id}/offenders/{noms_id}/payment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Store a payment for an offender account.
     * @description Pay events will be stored in a table on receipt by Nomis to be processed by a batch job scheduled to run after the last Nomis payroll batch job but before the advances and scheduled payments batch jobs.
     *     <br/>Possible payment types are:<br/><table><tr><td>A_EARN</td><td>Credit, Offender Payroll</td></tr><tr><td>ADJ</td><td>Debit, Adjudication Award</td></tr></table><br/>Example request:<br/>
     *     <pre>
     *     {
     *       'type': 'A_EARN',
     *       'description': 'May earnings',
     *       'amount': 1,
     *       'client_transaction_id': 'PAY-05-19'
     *     }
     *     </pre>
     *     <br/>The valid prison_id and type combinations are defined in the Nomis transaction_operations table which is maintained by the Maintain Transaction Operations screen (OCMTROPS), from the Financials Maintenance menu.
     *     Only those prisons (Caseloads) and Transaction types associated with the NOMISAPI module are valid.<br/>This will be setup by script intially as part of the deployment process as shown below<br/><br/>
     *     Requires NOMIS_API_V1, UNILINK or PRISON_API__HMPPS_INTEGRATION_API role.
     *
     */
    post: operations['storePayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prison/{previous_prison_id}/offenders/{noms_id}/transfer_transactions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Record transaction at previous Prison.
     * @description <p>Post a financial transaction to Nomis to a prison that the offender is no longer at.</p><p>The valid prison_id and type combinations are defined in the Nomis transaction_operations table which is maintained by the Maintain Transaction Operations screen (OCMTROPS), from the Financials Maintenance menu. Only those prisons (Caseloads) and Transaction types associated with the NOMISAPI module are valid. Only Transaction types with a usage of R (Receipt) are valid.Transaction Types are maintained via the Maintain Transaction Types screen (OCMTRANS).</p><p>Transaction is posted to the specified prison.  if the account has been closed at this prison then it is re-opened first.</p><p>If the offender has been transferred to another prison then the funds are transferred to this prison.</p><p>If the account was previously closed then it will be closed again.</p><p>If the offender has been released then the funds are transferred to NACRO. Based on the Nomis Clear Inactive accounts screen (OTDCLINA).</p>
     */
    post: operations['transferTransaction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/users/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Returns the user details for supplied usernames - POST version to allow large user lists.
     * @description Requires role STAFF_SEARCH
     */
    post: operations['getUserDetailsList']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/staff': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Retrieve details for multiple staff members using ids.
     * @description Security note: staff details are only available for the current user unless client has ROLE_STAFF_SEARCH.
     */
    post: operations['getStaffDetails']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/splash-screen/{moduleName}/condition': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Add a condition to a splash screen
     * @description Adds a new condition to an existing splash screen. Requires PRISON_API__SPLASH_SCREEN__RW.
     */
    post: operations['addCondition']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/smoketest/offenders/{offenderNo}/details': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Updates the offender details for this offender, with smoke test data */
    post: operations['updatePrisonerDetails']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/service-prisons/{serviceCode}/prison/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns if the service is switched on for the specified service code / prison id.
     * @deprecated
     * @description Returns 204 if the service is switched on for the service code / prison id combination.
     *         If the service is not switched on then 404 is returned.
     *         This endpoint also takes into account the special `*ALL*` prison id - if the service code has a prison entry of
     *         `*ALL*` then the service is deemed to be switched on for all prisons and will therefore return 204 irrespective of the
     *         prison id that is passed in.
     *         Deprecated - use /agency-switches/{serviceCode}/agency/{agencyId} instead.
     *         Requires ROLE_PRISON_API__SERVICE_AGENCY_SWITCHES__RO.
     *
     */
    get: operations['checkServicePrison']
    put?: never
    /**
     * Activates a prison for the given service
     * @deprecated
     * @description Deprecated - use /agency-switches/{serviceCode}/agency/{agencyId} instead.
     */
    post: operations['addServicePrison']
    /**
     * Deactivates a prison for the given service
     * @deprecated
     * @description Deprecated - use /agency-switches/{serviceCode}/agency/{agencyId} instead.
     */
    delete: operations['removeServicePrison']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/schedules/{prisonId}/events-by-location-path': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get all events for given date for prisoners in listed cells. Note secondary sort is by start time
     * @description Get all events for given date for prisoners in listed cells. Note secondary sort is by start time<p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getEventsByLocationPath']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/schedules/{agencyId}/visits': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getVisits']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/schedules/{agencyId}/externalTransfers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getExternalTransfers']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/schedules/{agencyId}/events-by-location-ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get all events for given date for prisoners in listed cells. Note secondary sort is by start time
     * @deprecated
     * @description Get all events for given date for prisoners in listed cells. Note secondary sort is by start time<p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getEventsByLocationId']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/schedules/{agencyId}/courtEvents': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getCourtEvents']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/schedules/{agencyId}/count-activities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get all Prisoner activities for given date.
     * @description Get count of suspended prisoner activities for given date range<p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getCountActivitiesByDateRange']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/schedules/{agencyId}/appointments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description <p>This endpoint uses the REPLICA database.</p> */
    get: operations['getAppointments']
    put?: never
    /**
     * Requires role VIEW_ACTIVITIES
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getAppointmentsForOffenders']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/schedules/{agencyId}/activities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Prisoner activities for given date.
     * @description Get all Prisoner activities for given date<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getActivitiesAtAllLocations']
    put?: never
    /** @description <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getActivitiesForBookings']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/schedules/{agencyId}/activities-by-event-ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getActivitiesByEventIds']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prisoners': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of offenders matching specified criteria.
     * @description List of offenders matching specified criteria. Requires GLOBAL_SEARCH role.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getPrisoners']
    put?: never
    /**
     * List of offenders matching specified criteria. (POST version)
     * @description List of offenders matching specified criteria. Requires GLOBAL_SEARCH role.<p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getPrisoners_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/person/{prisonerNumber}/distinguishing-mark': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a new distinguishing mark, optionally providing a photo. The calling service is responsible for virus scanning the photo.
     * @description Requires role PRISON_API__PRISONER_PROFILE__RW
     */
    post: operations['createMark']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/person/{prisonerNumber}/distinguishing-mark/{seqId}/photo': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Add a new photo to an distinguishing mark. The calling service is responsible for virus scanning the photo.
     * @description Requires role PRISON_API__PRISONER_PROFILE__RW
     */
    post: operations['addMarkPhoto']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Creates a prisoner and optional receives them into a prison by creating a new booking. BOOKING_CREATE role */
    post: operations['createPrisoner']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/phone-numbers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get phone numbers for a prisoner. */
    get: operations['getOffenderNumbers']
    put?: never
    /** Add a phone number for the prisoner */
    post: operations['addOffenderPhoneNumbers']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/offender-identifiers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all identifiers for the prisoner (with or without alias identifiers) */
    get: operations['getAllOffenderIdentifiers']
    put?: never
    /** Add identifiers for the prisoner on the current working name */
    post: operations['addOffenderIdentifiers']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/military-records': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Military Records
     * @description Military Records
     */
    get: operations['getMilitaryRecords']
    put?: never
    /** Create the prisoner's military record. Requires the PRISON_API__PRISONER_PROFILE__RW role. */
    post: operations['createMilitaryRecord']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/email-addresses': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get email addresses for a prisoner. */
    get: operations['getOffenderEmails']
    put?: never
    /** Add an email address for the prisoner */
    post: operations['addOffenderEmailAddress']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/booking': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Receives a prisoner on a new booking. BOOKING_CREATE role */
    post: operations['newBooking']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/aliases': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve all aliases (including the working name alias) for the prisoner. Requires the PRISON_API__PRISONER_PROFILE__RW role. */
    get: operations['getAliases']
    put?: never
    /** Create a new alias for the prisoner. Requires the PRISON_API__PRISONER_PROFILE__RW role. */
    post: operations['createAlias']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/addresses': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return a list of addresses for a given offender, most recent first.
     * @description Requires offender to be in caseload, or role GLOBAL_SEARCH or VIEW_PRISONER_DATA<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getAddressesByOffenderNo']
    put?: never
    /** Add an address for the prisoner */
    post: operations['addOffenderAddress']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/adjudication-hearings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Gets a list of offender adjudication hearings
     * @description <p>This endpoint returns a list of offender adjudication hearings for 1 or more offenders for a given date range and optional time slot.</p>
     *     <p>If the date range goes beyond 31 days then an exception will be thrown.</p>
     *     <p>At least one offender number must be supplied if not then an exception will be thrown.</p>
     *     <p>If the time slot is provided then the results will be further restricted to the hearings that fall in that time slot.</p>
     *
     */
    post: operations['getOffenderAdjudicationHearings']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-sentences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of offenders (with associated sentence detail)
     * @description <h3>Algorithm</h3>
     *     <ul>
     *       <li>If there is a confirmed release date, the offender release date is the confirmed release date.</li>
     *       <li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li>
     *       <li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li>
     *     </ul>
     *     <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getOffenderSentences']
    put?: never
    /**
     * Retrieves list of offenders (with associated sentence detail) - POST version to allow large offender lists.
     * @description Retrieves list of offenders (with associated sentence detail) - POST version to allow large offender lists.<p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['postOffenderSentences']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-sentences/home-detention-curfews/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Retrieve the latest Home Detention Curfew status for a list of offender booking identifiers
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getBatchLatestHomeDetentionCurfew']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-sentences/bookings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Retrieves list of offenders (with associated sentence detail) - POST version using booking id lists.
     * @description Retrieves list of offenders (with associated sentence detail) - POST version using booking id lists.<p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['postOffenderSentencesBookings']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-dates/{bookingId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the key dates for an offender.
     * @description Requires RELEASE_DATES_CALCULATOR
     */
    get: operations['getOffenderKeyDates']
    put?: never
    /**
     * Update the key dates for an offender.
     * @description Requires RELEASE_DATES_CALCULATOR
     */
    post: operations['updateOffenderKeyDates']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-assessments/{assessmentCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Offender assessment detail for multiple offenders.
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getOffenderAssessmentsAssessmentCode']
    put?: never
    /**
     * Retrieves Offender assessment details for multiple offenders - POST version to allow large offender lists.
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['postOffenderAssessmentsAssessmentCode']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-assessments/csra/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Retrieves Offender CSRAs for multiple offenders - POST version to allow large offender lists.
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['postOffenderAssessmentsCsraList']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-assessments/category': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Returns Categorisation details for supplied Offenders - POST version to allow large offender lists.
     * @description Requires VIEW_PRISONER_DATA role<p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getOffenderCategorisationsSystem']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offences/unlink-from-schedule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Unlink offence from schedule
     * @description Requires UPDATE_OFFENCE_SCHEDULES role
     */
    post: operations['unlinkOffencesFromSchedules']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offences/statute': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create statutes if they dont already exist
     * @description Requires OFFENCE_MAINTAINER role
     */
    post: operations['createStatute']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offences/link-to-schedule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Link offence to schedule
     * @description Requires UPDATE_OFFENCE_SCHEDULES role
     */
    post: operations['linkOffencesToSchedules']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offences/ho-code': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create Home Office Notifiable Offence Code records if they dont already exist
     * @description Requires OFFENCE_MAINTAINER role
     */
    post: operations['createHomeOfficeCodes']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a list of recently released or moved offender nos and the associated timestamp.
     * @description Returns a list of recently released or moved offender nos and the associated timestamp.
     */
    get: operations['getRecentMovementsByDate']
    put?: never
    /**
     * Create a new external movement for inactive bookings only
     * @description requires the INACTIVE_BOOKINGS role
     */
    post: operations['createExternalMovement']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/offenders': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['getMovementsByOffenders']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/offenders/latest-arrival-date': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Get the dates of the latest arrival into prison for multiple offenders */
    post: operations['getLatestArrivalDate']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/key-worker/{agencyId}/current-allocations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Retrieves Specified key worker's currently assigned offenders - POST version to allow larger staff lists.
     * @description Retrieves Specified key worker's currently assigned offenders - POST version to allow larger staff lists.<p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['postKeyWorkerAgencyIdCurrentAllocations']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/key-worker/offenders/allocationHistory': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Retrieves Specified prisoners allocation history - POST version to allow larger allocation lists.
     * @description Retrieves Specified prisoners allocation history - POST version to allow larger allocation lists.<p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['postKeyWorkerOffendersAllocationHistory']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/images/offenders/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Image details related to offender.
     * @description Requires role VIEW_PRISONER_DATA.
     */
    get: operations['getImagesByOffender']
    put?: never
    /**
     * Upload a new image for a prisoner.
     * @description Requires PRISON_API__PRISONER_PROFILE__RW. Additionally scales the image to 480 x 600 and creates a thumbnail 240 x 300 (4:5 aspect ratio).
     */
    post: operations['putImageMultiPart']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/finance/prison/{prisonId}/offenders/{offenderNo}/transfer-to-savings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Post a financial transaction to NOMIS.
     * @description Notes:<br/>
     *       <ul>
     *         <li>If the field X-Client-Name is present in the request header then the value is prepended to the client_unique_ref separated by a dash</li>
     *         <li>The client_unique_ref can have a maximum of 64 characters, only alphabetic, numeric, ‘-’ and ‘_’ characters are allowed</li>
     *       </ul>
     *     <p>Requires NOMIS_API_V1, UNILINK or PRISON_API__HMPPS_INTEGRATION_API role.</p>
     */
    post: operations['transferToSavings']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/education/prisoners': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * A list of offender educations.
     * @description A list of offender educations given a list of offender identifiers
     */
    post: operations['getPrisonerEducationsInBulk']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/case-notes/usage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * This endpoint has been replaced in the case notes service - see case-notes-service/case-notes/usage
     * @deprecated
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getCaseNoteUsageSummary']
    put?: never
    /**
     * This endpoint has been replaced in the case notes service - see case-notes-service/case-notes/usage
     * @deprecated
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getCaseNoteUsageSummaryByPost']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/case-notes/usage-by-types': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * This endpoint has been replaced in the case notes service - see case-notes-service/case-notes/usage
     * @deprecated
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getCaseNoteUsageSummaryByDates']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/case-notes/staff-usage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * This endpoint has been replaced in the case notes service - see case-notes-service/case-notes/staff-usage
     * @deprecated
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getCaseNoteStaffUsageSummaryByPost']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/prison-to-prison': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Schedules a future prison to prison move for an offender.
     * @description Schedules a future prison to prison move for an offender. Requires role PRISON_MOVE_MAINTAINER and scope write.
     */
    post: operations['prisonToPrison']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/prison-to-court-hearings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Schedules a prison to court hearing for an offender.
     * @description Schedules a prison to court hearing for an offender. Requires role COURT_HEARING_MAINTAINER and scope write
     */
    post: operations['prisonToCourt']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/personal-care-needs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Personal Care Needs
     * @description Personal Care Need. Requires booking access (via caseload) or GLOBAL_SEARCH or VIEW_PRISONER_DATA role.
     */
    get: operations['getPersonalCareNeeds']
    put?: never
    /**
     * Personal Care Needs
     * @description Requires role MAINTAIN_HEALTH_PROBLEMS and scope write
     */
    post: operations['addPersonalCareNeed']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/court-cases/{courtCaseId}/prison-to-court-hearings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Schedules a prison to court hearing for an offender and given court case.
     * @description Schedules a prison to court hearing for an offender and given court case. Requires role COURT_HEARING_MAINTAINER and scope write
     */
    post: operations['prisonToCourt_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/appointments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create appointment for offender.
     * @description Requires role GLOBAL_APPOINTMENT, or booking is in caseload
     */
    post: operations['postBookingsBookingIdAppointments']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/offenders': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Offender detail.
     * @description Requires role VIEW_PRISONER_DATA or GLOBAL_SEARCH, or prisoners are in caseload<p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getBasicInmateDetailsForOffenders']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/offenderNo/personal-care-needs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Personal Care Needs  - POST version to allow for large numbers of offenders
     * @description Requires role VIEW_PRISONER_DATA or GLOBAL_SEARCH
     */
    post: operations['getPersonalCareNeeds_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/offenderNo/personal-care-needs/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Personal Care Needs Counter - POST version to allow to count heath problem by type for large numbers of offenders
     * @description Requires booking to be in caseload, or role GLOBAL_SEARCH or VIEW_PRISONER_DATA
     */
    post: operations['countPersonalCareNeeds']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/offenderNo/alerts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Deprecated - Please use the alerts api for access to alerts (eg https://alerts-api-dev.hmpps.service.justice.gov.uk/swagger-ui/index.html)
     * @deprecated
     * @description Replace with https://alerts-api-dev.hmpps.service.justice.gov.uk/swagger-ui/index.html#/prisoner-alerts-controller/retrievePrisonerAlerts_1<p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getAlertsByOffenderNos']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/offence-history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Offence histories.
     * @description Offence histories for a set of booking ids.<p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getOffenceHistoryForBookings']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/mainOffence': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get Offender main offence detail.
     * @description Post version to allow specifying a large number of bookingIds. Requires role VIEW_PRISONER_DATA<p>This endpoint uses the REPLICA database.</p>
     */
    post: operations['getMainOffence']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/court-event-outcomes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Get court event outcome reason codes for active court cases for a booking */
    post: operations['getCourtEventOutcomes']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/appointments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create multiple appointments
     * @description Requires bookings to be in caseload and write scope, and role BULK_APPOINTMENTS if more than 1 appointment is being created
     */
    post: operations['createAppointments']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/appointments/delete': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Delete multiple appointments.
     * @description Requires role GLOBAL_APPOINTMENT and write scope
     */
    post: operations['deleteAppointments']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agency-switches/{serviceCode}/agency/{agencyId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns if the service is switched on for the specified service code / agency id.
     * @description Returns 204 if the service is switched on for the service code / agency id combination.
     *         If the service is not switched on then 404 is returned.
     *         This endpoint also takes into account the special `*ALL*` agency id - if the service code has a agency entry of
     *         `*ALL*` then the service is deemed to be switched on for all agencies and will therefore return 204 irrespective of the
     *         agency id that is passed in.
     *         An agency in this context is normally a prison, but can also be any agency location e.g. prisoner escort service area.
     *         Requires ROLE_PRISON_API__SERVICE_AGENCY_SWITCHES__RO.
     *
     */
    get: operations['checkServiceAgency']
    put?: never
    /** Activates an agency for the given service */
    post: operations['addServiceAgency']
    /** Deactivates an agency for the given service */
    delete: operations['removeServiceAgency']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of active agencies.
     * @description List of active agencies.
     */
    get: operations['getAgencies']
    put?: never
    /**
     * Create an agency
     * @description Requires MAINTAIN_REF_DATA
     */
    post: operations['createAgency']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/{agencyId}/addresses': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create an address
     * @description Requires MAINTAIN_REF_DATA
     */
    post: operations['createAgencyAddress']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/{agencyId}/addresses/{addressId}/phones': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create an contact for an address
     * @description Requires MAINTAIN_REF_DATA
     */
    post: operations['createAgencyAddressPhoneContact']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prison/{prison_id}/slots': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Fetch visit slots with capacity
     * @description returns list slots with capacity details<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getVisitSlotsWithCapacity']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prison/{prison_id}/offenders/{noms_id}/transactions/{client_unique_ref}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve a single financial transaction using client unique ref.
     * @description All transaction amounts are represented as pence values.<br/>
     *     Requires NOMIS_API_V1, UNILINK or PRISON_API__HMPPS_INTEGRATION_API role.
     *
     */
    get: operations['getTransactionByClientUniqueRef']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prison/{prison_id}/offenders/{noms_id}/holds': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get holds.
     * @description Gets every hold on an offender’s account or just the hold identified by the client_unique_ref<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getHolds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prison/{prison_id}/offenders/{noms_id}/accounts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve an offender's financial account balances.
     * @description Returns balances for the offender’s three sub accounts (spends, savings and cash) at the specified prison.<br/>
     *     All balance values are represented as pence values.<br/>
     *     Requires NOMIS_API_V1, UNILINK or PRISON_API__HMPPS_INTEGRATION_API role.
     *
     */
    get: operations['getAccountBalance']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prison/{prison_id}/offenders/{noms_id}/accounts/{account_code}/transactions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve an offender's financial transaction history for cash, spends or savings.
     * @description Transactions are returned in NOMIS order (Descending date followed by id).<br/>
     *     All transaction amounts are represented as pence values.<br/>
     *     Requires NOMIS_API_V1, UNILINK or PRISON_API__HMPPS_INTEGRATION_API role.
     *
     */
    get: operations['getAccountTransactions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prison/{prison_id}/offenders/{noms_id}/accounts/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Deprecated - use the version without the trailing slash. Retrieve an offender's financial account balances.
     * @deprecated
     * @description Returns balances for the offender’s three sub accounts (spends, savings and cash) at the specified prison.<br/>
     *     All balance values are represented as pence values.<br/>
     *     Requires NOMIS_API_V1, UNILINK or PRISON_API__HMPPS_INTEGRATION_API role.
     *
     */
    get: operations['getAccountBalanceTrailingSlash']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/prison/{prison_id}/live_roll': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Fetching live roll.
     * @description Requires NOMIS_API_V1, UNILINK or PRISON_API__HMPPS_INTEGRATION_API role.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getLiveRoll']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/offenders/{offender_id}/visits/unavailability': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Fetch unavailability reason for dates
     * @description returns list of reason if unavailable date<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getVisitUnavailability']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/offenders/{offender_id}/visits/contact_list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Fetch contacts list for offender
     * @description returns list of contacts<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getVisitContactList']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/offenders/{offender_id}/visits/available_dates': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Fetch available_dates for offender
     * @description returns list of dates<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getVisitAvailableDates']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/offenders/{noms_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns general offender information.
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getOffender']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/offenders/{noms_id}/pss_detail': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the PSS detail by offender
     * @description Returns the PSS detail information for the specified offender including personal data, warnings, sentence details and location information.<br/>
     *     <ul>
     *       <li>The 'type' field is always OFFENDER_DETAILS_REQUEST</li>
     *       <li>The field 'offender_details_request' contains a JSON block of data containing the offender data.</li>
     *     </ul>
     *     The format of 'offender_details_request' is not specified here.<br/>
     *     Requires NOMIS_API_V1, UNILINK or PRISON_API__HMPPS_INTEGRATION_API role.
     *     <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getOffenderPssDetail']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/offenders/{noms_id}/location': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Current Location of the offender
     * @description The levels shows the type of each level of the location address as defined on the Agency Details tab in Maintain Agency Locations screen (OUMAGLOC).<br/><br/>Since the offender's location can change often and is fairly sensitive (and therefore should not automatically be exposed to all services), this information is not included in the general offender information call.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getLatestBookingLocation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/offenders/{noms_id}/image': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Current Photograph of the offender
     * @description Returns a 480wx600h JPEG photograph of the offender. The data is base64 encoded within the image key.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getOffenderImage']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/offenders/{noms_id}/charges': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Legal cases for each booking and charges within each legal case.
     * @description Returns all the bookings, the legal cases for each booking and charges within each legal case.<br/>The ordering is as follows:<ul><li><strong>bookings</strong>: Current or latest booking first, others in descending order of booking date</li><li><strong>legal_cases</strong>: Active cases followed by inactive cases, further ordered by begin_date, latest first</li><li><strong>charges</strong>: Most serious active charge first, then remaining active charges, followed by inactive charges</li></ul><p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getBookings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/offenders/{noms_id}/alerts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Deprecated - Please use the alerts api for access to alerts (eg https://alerts-api-dev.hmpps.service.justice.gov.uk/swagger-ui/index.html)
     * @deprecated
     * @description Replace with https://alerts-api-dev.hmpps.service.justice.gov.uk/swagger-ui/index.html#/prisoner-alerts-controller/retrievePrisonerAlerts<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getAlerts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/offenders/events': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Fetch events
     * @description Returns all events that required to update the prisoner self service application. Currently these are:
     *     <ul>
     *       <li>ALERT</li>
     *       <li>DISCHARGE</li>
     *       <li>IEP_CHANGED</li>
     *       <li>INTERNAL_LOCATION_CHANGED</li>
     *       <li>NOMS_ID_CHANGED</li>
     *       <li>PERSONAL_DETAILS_CHANGED</li>
     *       <li>PERSONAL_OFFICER_CHANGED</li>
     *       <li>RECEPTION</li>
     *       <li>SENTENCE_INFORMATION_CHANGED</li>
     *       <li>BALANCE_UPDATE</li>
     *     </ul>
     *     This endpoint requires a from_datetime to be specified.  If a date over a week ago is requested then limit
     *     must be specified.  This is to stop too much data being requested.  Multiple calls can then be made to
     *     retrieve all the data, by specifying a more recent from_datetime after each call. For example the first
     *     request could specify data from 2022-05-18 with limit of 1000.  The next request could then look at the last
     *     event in the response and specify that as the from_datetime with limit of 1000 again etc. until all data is
     *     retrieved.
     *     Requires NOMIS_API_V1, UNILINK or PRISON_API__HMPPS_INTEGRATION_API role.
     *     <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getOffenderEvents']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/lookup/active_offender': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve active offender
     * @description offender id will be returned if offender is found<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getActiveOffender']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/users/{username}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * User detail.
     * @description User detail.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getUserDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/users/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Current user detail.
     * @description Current user detail.
     */
    get: operations['getMyUserInformation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/users/me/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of roles for current user.
     * @description List of roles for current user.
     */
    get: operations['getMyRoles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/users/me/locations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of locations accessible to current user.
     * @deprecated
     * @description Deprecated - Use /locations/prison/{prisonId}/residential-first-level instead in the locations-inside-prison-api<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getMyLocations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/users/me/caseLoads': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of caseloads accessible to current user.
     * @description List of caseloads accessible to current user.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getMyCaseLoads']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/transactions/prison/{prison_id}/offenders/{noms_id}/accounts/{account_code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve an offender's financial transaction history for cash, spends or savings.
     * @description
     *                 Transactions are returned in NOMIS order (Descending date followed by id).<br/>
     *                 All transaction amounts are represented as pence values.<br/>
     *                 Requires UNILINK or PRISON_API__HMPPS_INTEGRATION_API role.
     *
     */
    get: operations['getAccountTransactions_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/staff/{staffId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Staff detail.
     * @description Security note: staff details are only available for the current user unless client has ROLE_STAFF_SEARCH.
     */
    get: operations['getStaffDetail']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/staff/{staffId}/{agencyId}/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of job roles for specified staff and agency Id
     * @description Security note: the agency must be in the current user's caseload.
     */
    get: operations['getAllRolesForAgency']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/staff/{staffId}/{agencyId}/roles/{roleType}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Check if staff member has a role
     * @description Check if staff member has a role, either KW or POM. Security note: the agency must be in the current user's caseload.
     */
    get: operations['hasStaffRole']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/staff/{staffId}/emails': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a list of email addresses associated with this staff user
     * @description Security note: staff details are only available for the current user unless client has ROLE_STAFF_SEARCH.
     */
    get: operations['getStaffEmailAddresses']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/staff/{staffId}/caseloads': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns a list of caseloads associated with this staff user
     * @description Security note: staff details are only available for the current user unless client has ROLE_STAFF_SEARCH.
     */
    get: operations['getStaffCaseloads']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/staff/roles/{agencyId}/role/{role}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get staff members within agency who are currently assigned the specified role.
     * @description Get staff members within agency who are currently assigned the specified role. Security note: the agency must be in the current user's caseload.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getStaffByAgencyRole']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/splash-screen': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all splash screens
     * @description Returns a list of all splash screens. Requires PRISON_API__SPLASH_SCREEN__RO.
     */
    get: operations['getAllSplashScreens']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/splash-screen/{moduleName}/condition/{conditionType}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get conditions by type for a splash screen
     * @description Returns a list of conditions of the specified type for a splash screen. Requires PRISON_API__SPLASH_SCREEN__RO.
     */
    get: operations['getConditionsByType']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/splash-screen/{moduleName}/condition/{conditionType}/{conditionValue}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get conditions by type and value for a splash screen
     * @description Returns a condition of the specified type for a splash screen. Requires PRISON_API__SPLASH_SCREEN__RO.
     */
    get: operations['getConditionsByTypeAndValue']
    put?: never
    post?: never
    /**
     * Remove a condition
     * @description Removes an existing condition. Requires PRISON_API__SPLASH_SCREEN__RW.
     */
    delete: operations['removeCondition']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/splash-screen/condition/{conditionType}/{conditionValue}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get splash screens by condition
     * @description Returns a list of splash screens that have the specified condition. Requires PRISON_API__SPLASH_SCREEN__RO.
     */
    get: operations['getSplashScreensByCondition']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/service-prisons/{serviceCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve a list of prisons switched on for the service code
     * @deprecated
     * @description Returns a list of prisons switched on for the service code.
     *           A special prisonId of `*ALL*` is used to designate that the service is switched on for all prisons.
     *           Deprecated - use /agency-switches/{serviceCode} instead.
     *           Requires ROLE_PRISON_API__SERVICE_AGENCY_SWITCHES__RO.
     *
     */
    get: operations['getServicePrisons']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/schedules/{prisonerNumber}/scheduled-transfers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description <p>This endpoint uses the REPLICA database.</p> */
    get: operations['getScheduledTransfersForPrisoner']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/schedules/{agencyId}/suspended-activities-by-date-range': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Prisoner activities for given date.
     * @description Get all Prisoner activities for given date range<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getSuspendedActivitiesAtAllLocationsByDateRange']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/schedules/{agencyId}/locations/{locationId}/usage/{usage}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Prisoner events for given date at location.
     * @description Get all Prisoner events for given date at location.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getLocationEvents']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/schedules/locations/{locationId}/activities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Prisoner activities for given date at location.
     * @description Get all Prisoner activities for given date at location.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getActivitiesAtLocation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/restore-info': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** The last restore date or not found is returned if no restore data available */
    get: operations['getLastRestoreDate']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/reference-domains/scheduleReasons': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get possible reason codes for created event.
     * @description Get possible reason codes for created event.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getScheduleReasons']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/reference-domains/domains': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of all reference domains
     * @description A reference domain can be used to retrieve all codes related to that domain. Ordered by domain ascending<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getAllReferenceDomains']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/reference-domains/domains/{domain}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of reference codes for reference domain paged.
     * @description List of reference codes for reference domain paged. Please note this API has the incorrect name so the non-paged /domains/{domain}/codes version is preferred.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getReferenceCodesByDomain']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/reference-domains/domains/{domain}/reverse-lookup': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Reference code matching description
     * @description Wild card can be specified<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getReferenceCodeByDomainAndDescription']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/reference-domains/domains/{domain}/codes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of reference codes for reference domain.
     * @description List of reference codes for reference domain ordered by code ascending. The list is an un-paged flat list<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getReferenceCodesByDomain_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/reference-domains/domains/{domain}/all-codes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of reference codes for reference domain.
     * @description List of reference codes / profile codes for reference domain / profile type, ordered by code ascending. The list is an un-paged flat list<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getReferenceOrProfileCodesByDomain']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/reference-domains/alertTypes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Deprecated - Please use the alerts api for access to alerts (eg https://alerts-api-dev.hmpps.service.justice.gov.uk/swagger-ui/index.html)
     * @deprecated
     * @description Replace with https://alerts-api-dev.hmpps.service.justice.gov.uk/swagger-ui/index.html#/alert-types-controller/retrieveAlertTypes<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getAlertTypes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prisoners/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of offenders globally matching the offenderNo.
     * @description List of offenders globally matching the offenderNo, Requires offender agency to be in user caseload or VIEW_PRISONER_DATA role. Returns an empty array if no results are found or if does not have correct permissions
     */
    get: operations['getPrisonersOffenderNo']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prisoners/{offenderNo}/full-status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Status and core offender information */
    get: operations['getPrisonerInformationById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prisoners/prisoner-numbers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     *
     *         Return a list of all unique prisoner numbers (also called NOMS ID or offenderNo).
     *         Results are ordered by max(ROOT_OFFENDER_ID), therefore ensuring that new offenders are added to the end of the
     *         results.
     *         This is an internal endpoint used by Prisoner Search to ensure that NOMIS and OpenSearch are in sync.
     *         Other services should use Prisoner Search instead to get the list of prisoners.
     *         Requires PRISONER_INDEX or GLOBAL_SEARCH or ROLE_PRISON_API__CORE_PERSON__NUMBERS__RO role.
     *
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getPrisonerNumbers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prisoner-search/offenders/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns details required by Prisoner Search for the given offender number.
     * @description This endpoint is dedicated to returning the details required by Prisoner Search so the role and endpoint are not for general use. If you're thinking of calling this endpoint try calling Prisoner Search instead.
     */
    get: operations['getPrisonerDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prison/{agencyId}/booking/latest/paged/calculable-prisoner': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Details of the the person to be calculated at a particular establishment (paged response) */
    get: operations['getCalculablePrisonerEnvelopeByEstablishment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prison/roll-count/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Roll count for a specific prison
     * @description Requires role ESTABLISHMENT_ROLL or agency in caseload.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getPrisonRollCount']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prison/roll-count/{prisonId}/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Roll count summary for a specific prison
     * @description Requires role ESTABLISHMENT_ROLL or agency in caseload.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getPrisonRollCountSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prison/roll-count/{prisonId}/movement-count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Provide the IN/OUT movements and en-route counts for today
     * @description Requires role ESTABLISHMENT_ROLL or agency in caseload.
     */
    get: operations['getRollCountMovementInformation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/prison/roll-count/{prisonId}/cells-only/{locationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Provides the list of cells with roll counts under a specified location provided
     * @description Requires role ESTABLISHMENT_ROLL or agency in caseload.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getCellLevelRollCount']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/persons/{personId}/phones': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * The phone numbers for person
     * @description Requires role ROLE_VIEW_CONTACTS
     */
    get: operations['getPersonPhones']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/persons/{personId}/identifiers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * The most recent value of each type of person identifier
     * @description Requires role ROLE_VIEW_CONTACTS
     */
    get: operations['getPersonIdentifiers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/persons/{personId}/emails': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * The emails for person
     * @description Requires role ROLE_VIEW_CONTACTS
     */
    get: operations['getPersonEmails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/persons/{personId}/addresses': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * The addresses for person
     * @description Requires role ROLE_VIEW_CONTACTS
     */
    get: operations['getPersonAddresses']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/person/{prisonerNumber}/distinguishing-marks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all distinguishing marks associated with a prisoner's latest booking
     * @description Requires role PRISON_API__PRISONER_PROFILE__RW
     */
    get: operations['getIdentifyingMarksForLatestBooking']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/person/photo/{photoId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the content of an image
     * @description Requires role PRISON_API__PRISONER_PROFILE__RW
     */
    get: operations['getImage']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Full details about the current state of an offender
     * @description Requires GLOBAL_SEARCH, VIEW_PRISONER_DATA or a user token with valid offender access
     */
    get: operations['getOffender_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/transaction-history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve an offender's financial transaction history for cash, spends or savings.
     * @description Transactions are returned in order of entryDate descending and sequence ascending).<br/>All transaction amounts are represented as pence values. Requires offender to be in caseload or role GLOBAL_SEARCH or VIEW_PRISONER_DATA<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getTransactionsHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/sentences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Offender Sentence Details
     * @description Retrieve an single offender sentence details. Requires offender to be in caseload or role GLOBAL_SEARCH or VIEW_PRISONER_DATA
     */
    get: operations['getOffenderSentenceDetail']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/scheduled-events': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * All future (scheduled) events for offender
     * @description All future events for offender that are in a scheduled and not cancelled state. Requires offender to be in caseload or role GLOBAL_SEARCH or VIEW_PRISONER_DATA
     */
    get: operations['getScheduledEvents']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/prison-timeline': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Summary of the different periods this prisoner has been in prison.
     * @description This is a summary of the different periods this prisoner has been in prison grouped by booking.
     *
     *     It includes the dates of each period, the prison and the reason for the movement. Each booking is divided into periods of time spent in prison separated by periods when the were out either via a release or a temporary absence (periods at court are not included).
     *
     *     The periods are ordered by date ascending, therefore the final period will be their last time in prison. For each period the prison admitted into and optionally released from will be listed. These can be different if there has been transfers in between the dates.
     *
     *     Transfers are also listed separately.
     *
     *
     *     **Example response:**
     *     #### Booking 47828A
     *     Has 2 periods of temporary absence. In the second absence they return to a different prison. They are eventually released.
     *
     *     #### Booking 47829A
     *     The person is still is prison but has been transferred to a 2nd prison.
     *
     *     There are a number of transfers during this booking.
     *     ```
     *     {
     *       'prisonerNumber': 'A7748DZ',
     *       'prisonPeriod': [
     *         {
     *           'bookNumber': '47828A',
     *           'bookingId': 1211013,
     *           'entryDate': '2023-12-08T15:50:37',
     *           'releaseDate': '2023-12-08T16:21:24',
     *           'movementDates': [
     *             {
     *               'reasonInToPrison': 'Imprisonment Without Option',
     *               'dateInToPrison': '2023-12-08T15:50:37',
     *               'inwardType': 'ADM',
     *               'reasonOutOfPrison': 'Wedding/Civil Ceremony',
     *               'dateOutOfPrison': '2023-12-08T15:53:37',
     *               'outwardType': 'TAP',
     *               'admittedIntoPrisonId': 'BMI',
     *               'releaseFromPrisonId': 'BSI'
     *             },
     *             {
     *               'reasonInToPrison': 'Wedding/Civil Ceremony',
     *               'dateInToPrison': '2023-12-08T15:54:12',
     *               'inwardType': 'TAP',
     *               'reasonOutOfPrison': 'Conditional Release (CJA91) -SH Term>1YR',
     *               'dateOutOfPrison': '2023-12-08T16:20:19',
     *               'outwardType': 'REL',
     *               'admittedIntoPrisonId': 'BSI',
     *               'releaseFromPrisonId': 'AYI'
     *             },
     *             {
     *               'reasonInToPrison': 'Recall From Intermittent Custody',
     *               'dateInToPrison': '2023-12-08T16:20:45',
     *               'inwardType': 'ADM',
     *               'reasonOutOfPrison': 'Conditional Release (CJA91) -SH Term>1YR',
     *               'dateOutOfPrison': '2023-12-08T16:21:24',
     *               'outwardType': 'REL',
     *               'admittedIntoPrisonId': 'AYI',
     *               'releaseFromPrisonId': 'AYI'
     *             }
     *           ],
     *           'transfers': [
     *             {
     *               'dateOutOfPrison': '2023-12-08T15:51:09',
     *               'dateInToPrison': '2023-12-08T15:52:32',
     *               'transferReason': 'Compassionate Transfer',
     *               'fromPrisonId': 'BMI',
     *               'toPrisonId': 'BSI'
     *             },
     *             {
     *               'dateOutOfPrison': '2023-12-08T15:54:56',
     *               'dateInToPrison': '2023-12-08T15:55:54',
     *               'transferReason': 'Transfer Via Court',
     *               'fromPrisonId': 'BSI',
     *               'toPrisonId': 'BRI'
     *             },
     *             {
     *               'dateOutOfPrison': '2023-12-08T15:56:05',
     *               'dateInToPrison': '2023-12-08T15:57:25',
     *               'transferReason': 'Appeals',
     *               'fromPrisonId': 'BRI',
     *               'toPrisonId': 'DAI'
     *             },
     *             {
     *               'dateOutOfPrison': '2023-12-08T16:18:45',
     *               'dateInToPrison': '2023-12-08T16:19:45',
     *               'transferReason': 'Medical',
     *               'fromPrisonId': 'DAI',
     *               'toPrisonId': 'AYI'
     *             }
     *           ],
     *           'prisons': [
     *             'BMI',
     *             'BSI',
     *             'BRI',
     *             'DAI',
     *             'AYI'
     *           ]
     *         },
     *         {
     *           'bookNumber': '47829A',
     *           'bookingId': 1211014,
     *           'entryDate': '2023-12-08T16:21:21',
     *           'movementDates': [
     *             {
     *               'reasonInToPrison': 'Imprisonment Without Option',
     *               'dateInToPrison': '2023-12-08T16:21:21',
     *               'inwardType': 'ADM',
     *               'admittedIntoPrisonId': 'DGI'
     *             }
     *           ],
     *           'transfers': [
     *             {
     *               'dateOutOfPrison': '2023-12-08T16:22:02',
     *               'dateInToPrison': '2023-12-08T16:23:32',
     *               'transferReason': 'Overcrowding Draft',
     *               'fromPrisonId': 'DGI',
     *               'toPrisonId': 'BLI'
     *             }
     *           ],
     *           'prisons': [
     *             'DGI',
     *             'BLI'
     *           ]
     *         }
     *       ]
     *     }
     *     ```
     *
     *
     */
    get: operations['getOffenderPrisonPeriods']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/offender-restrictions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets the offender visit restrictions for a given offender using the latest booking
     * @description Get offender visit restrictions by offender No. <p>Requires a relationship (via caseload) with the offender or VISIT_SCHEDULER role.</p>
     */
    get: operations['getVisitRestrictions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/incidents': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return a set Incidents for a given offender No.
     * @description Can be filtered by participation type and incident type. Requires the VIEW_INCIDENTS role.
     */
    get: operations['getIncidentsByOffenderNo']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/housing-location': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Housing location for prisoner
     * @description <p>Housing location split out into different levels for a prisoner, or an empty response if the prisoner is not currently in a prison.</p>
     *     <p>There will be either 3 or 4 levels returned depending on the layout in NOMIS.
     *     Level 1 is the top level, so normally a wing or a house block and level 3 / 4 will be the individual cell.</p>
     *     <p>This endpoint returns the prison levels as recorded in NOMIS and may not accurately reflect the physical layout of the prison.
     *     For example Bristol has wings, spurs and landings, but this endpoint will only return wings and landings as spurs are not mapped in NOMIS.
     *     Another example is Moorland where 5-1-B-014 in NOMIS is Wing 5, Landing 1, Cell B and Cell 014, whereas in reality it should be Houseblock 5, Spur 1, Wing B and Cell 014 instead.
     *     This endpoint will therefore also return different information from Whereabouts API as that service re-maps the NOMIS layout to include spurs etc.</p>
     *     <p>If the current location is temporary (reception, court, tap, cell swap or early conditional licence) then the previous permanent location is also returned, provided
     *     that the location is at the same prison and they haven't moved to a different prison in the meantime.</p>
     *     <p>Requires a relationship (via caseload) with the prisoner or the GLOBAL_SEARCH or VIEW_PRISONER_DATA role.</p>
     *
     */
    get: operations['getHousingLocation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/events': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * All scheduled events for offender.
     * @description All scheduled events for offender.
     */
    get: operations['getEvents']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/damage-obligations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return a list of damage obligations
     * @description Requires offender to be in caseload or role GLOBAL_SEARCH or VIEW_PRISONER_DATA
     */
    get: operations['getOffenderDamageObligations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/core-person-record/communication-needs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get core person record communication needs of a prisoner
     * @description Requires the PRISON_API__PRISONER_PROFILE__RW role.
     */
    get: operations['getCommunicationNeeds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/contacts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Offender Contacts
     * @description Active Contacts including restrictions, using latest offender booking  and including inactive contacts by default
     */
    get: operations['getOffenderContacts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/bookings/latest/alerts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Deprecated - Please use the alerts api for access to alerts (eg https://alerts-api-dev.hmpps.service.justice.gov.uk/swagger-ui/index.html)
     * @deprecated
     * @description Replace with https://alerts-api-dev.hmpps.service.justice.gov.uk/swagger-ui/index.html#/prisoner-alerts-controller/retrievePrisonerAlerts
     */
    get: operations['getAlertsForLatestBookingByOffenderNo']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/booking/latest/sentence-summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Offender Sentence Details
     * @description Retrieve an single offender sentence details
     */
    get: operations['getLatestSentenceSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/belief-history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get belief history for a prisoner */
    get: operations['getOffenderBeliefHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/alerts/v2': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Deprecated - Please use the alerts api for access to alerts (eg https://alerts-api-dev.hmpps.service.justice.gov.uk/swagger-ui/index.html)
     * @deprecated
     * @description Replace with https://alerts-api-dev.hmpps.service.justice.gov.uk/swagger-ui/index.html#/prisoner-alerts-controller/retrievePrisonerAlerts
     */
    get: operations['getAlertsForAllBookingByOffenderNo']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/next-sequence': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Returns the next prisoner number (NOMS ID or Offender No) that can be used to create an offender */
    get: operations['getNextPrisonerIdentifier']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-sentences/home-detention-curfew-candidates': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of offenders eligible for HDC
     * @description Version 1<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getOffenderSentencesHomeDetentionCurfewCandidates']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-sentences/booking/{bookingId}/sentences-and-offences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Sentence and offence details  for a prisoner */
    get: operations['getSentenceAndOffenceDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-sentences/booking/{bookingId}/sentenceTerms': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Sentence term details for a prisoner
     * @description Requires booking access (via caseload) or GLOBAL_SEARCH or VIEW_PRISONER_DATA role.
     */
    get: operations['getOffenderSentenceTerms']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-sentences/booking/{bookingId}/home-detention-curfews/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve the current state of the latest Home Detention Curfew for a booking */
    get: operations['getLatestHomeDetentionCurfew']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-fine-payment/booking/{bookingId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Offender fine payments for a prisoner */
    get: operations['getOffenderFinePayments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-dates/sentence-calculation/{offenderSentCalcId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the key dates for an offender.
     * @description Requires RELEASE_DATES_CALCULATOR
     */
    get: operations['getOffenderKeyDatesForOffenderSentCalcId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-dates/latest-tused/{nomsId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the latest TUSED data for an offender. This will return the latest calculated TUSED for an offender
     * @description Requires RELEASE_DATES_CALCULATOR
     */
    get: operations['getOffenderLatestTused']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-dates/calculations/{nomsId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the key dates for an offender.
     * @description Requires RELEASE_DATES_CALCULATOR
     */
    get: operations['getOffenderCalculations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-assessments/csra/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves CSRAs for the given offender, ordered by the latest first.
     * @description Requires offender in the caseload, or GLOBAL_SEARCH or VIEW_PRISONER_DATA role.
     */
    get: operations['getOffenderCsraAssessments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-assessments/csra/{bookingId}/assessment/{assessmentSeq}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves details of a single CSRA assessment.
     * @description Requires offender in the caseload, or GLOBAL_SEARCH or VIEW_PRISONER_DATA role.
     */
    get: operations['getOffenderCsraAssessment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-assessments/category/{agencyId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns category information on Offenders at a prison.
     * @description Requires offender in the caseload, or VIEW_ASSESSMENTS role.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getOffenderCategorisations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-assessments/assessments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns assessment information on Offenders at a prison.
     * @description Requires VIEW_PRISONER_DATA role.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getAssessments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-activities/{offenderNo}/attendance-history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * The activities that this offender attended over a time period.
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getHistoricalAttendances']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offender-activities/{offenderNo}/activities-history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * The activities that this offender has been allocated to.
     * @description This includes suspended activities<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getRecentStartedActivities']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offences/code/{offenceCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Paged List of all offences where the offence code starts with the passed in offenceCode param
     * @deprecated
     * @description Deprecated - use https://manage-offences-api-dev.hmpps.service.justice.gov.uk/swagger-ui/index.html
     */
    get: operations['getOffencesThatStartWith']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/{agencyId}/out/{isoDate}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Count for prisoners out today.
     * @description Requires role ESTABLISHMENT_ROLL or agency in caseload.
     */
    get: operations['getOffendersOutToday']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/{agencyId}/in': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Offenders who entered a prison during a time period.
     * @description Requires role ESTABLISHMENT_ROLL or agency in caseload.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getMovementsIn']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/{agencyId}/in/{isoDate}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Information on offenders in today.
     * @description Information on offenders in on given date.
     */
    get: operations['getMovementsIn_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/{agencyId}/enroute': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * En-route prisoner movement details.
     * @description En-route to reception. Requires role ESTABLISHMENT_ROLL or agency in caseload.
     */
    get: operations['getEnRouteOffenderMovements']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/upcomingCourtAppearances': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get future court hearings for all offenders
     * @description Requires role VIEW_COURT_EVENTS.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getUpcomingCourtAppearances']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/transfers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Information on scheduled court, transfer and release events, and confirmed movements between two dates/times for a specified number of agencies.
     * @description Planned movements are recorded as events of type court, release or transfers/appointments. When these events are started they are actualised as external movements.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getTransfers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/rollcount/{agencyId}/movements': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Roll-count movement numbers.
     * @deprecated
     * @description Requires role ESTABLISHMENT_ROLL or agency in caseload.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getRollCountMovements']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/rollcount/{agencyId}/in-reception': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Count for prisoners in reception.
     * @description Requires agency in caseload.
     */
    get: operations['getOffendersInReception']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/rollcount/{agencyId}/enroute': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * En-route prisoner movement count.
     * @deprecated
     * @description En-route to reception count. Requires role ESTABLISHMENT_ROLL.
     */
    get: operations['getEnRouteOffenderMovementCount']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/offenders/{offenderNumber}/latest-arrival-date': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get the date of the latest arrival into prison for the offender */
    get: operations['getLatestArrivalDate_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/offender/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getMovementsByOffender']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/livingUnit/{livingUnitId}/currently-out': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Information on offenders currently out.
     * @description Requires role ESTABLISHMENT_ROLL.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getOffendersCurrentlyOut']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/booking/{bookingId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all movements (with sequence numbers) for booking */
    get: operations['getMovementsByBooking']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/agency/{agencyId}/temporary-absences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Information about the set of offenders at an agency who are currently out due to temporary absence.
     * @description Requires role ESTABLISHMENT_ROLL.
     */
    get: operations['getTemporaryAbsences']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/movements/agency/{agencyId}/currently-out': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Information on offenders currently out.
     * @description Requires role ESTABLISHMENT_ROLL.
     */
    get: operations['getOffendersCurrentlyOut_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/locations/{locationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Location detail.
     * @deprecated
     * @description Location detail.
     */
    get: operations['getLocation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/locations/{locationId}/inmates': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of offenders at location.
     * @description Requires role VIEW_PRISONER_DATA and a user in the token.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getOffendersAtLocation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/locations/description/{locationPrefix}/inmates': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of offenders at location.
     * @description Requires role VIEW_PRISONER_DATA and a user in the token.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getOffendersAtLocationDescription']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/locations/code/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the location (internal) for a prison based on description
     * @deprecated
     */
    get: operations['getLocationByCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/key-worker/{agencyId}/available': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Key workers available for allocation at specified agency.
     * @description Key workers available for allocation at specified agency.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getAvailableKeyworkers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/key-worker/{agencyId}/allocationHistory': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * All allocations in specified agency.
     * @description All allocations in specified agency.
     */
    get: operations['getAllocationHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/incidents/{incidentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return an Incident for a given incident ID
     * @description Requires the VIEW_INCIDENTS role.
     */
    get: operations['getIncident']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/incidents/configuration': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns incident type configuration data sets for incident reports
     * @description No additional role required<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getQuestionnaires']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/imprisonment-status-history/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Returns the details of all the historic imprisonment statuses for an offender. */
    get: operations['getImprisonmentStatusHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/images/{imageId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Image detail (with image data).
     * @description Requires role VIEW_PRISONER_DATA.
     */
    get: operations['getImage_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/images/{imageId}/data': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Image data (as bytes).
     * @description Requires role VIEW_PRISONER_DATA.
     */
    get: operations['getImageData']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/gang/non-associations/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Returns a list of gangs for a prisoner and the gang non-associations and their members */
    get: operations['getNonAssociationGangsForPrisoner']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/education/prisoner/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * A list of offender educations.
     * @description A list of offender educations.
     */
    get: operations['getPrisonerEducations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/court/{bookingId}/next-court-event': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Returns the next court event details (if one exists) related to the passed in booking */
    get: operations['getNextCourtEvent']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/court/{bookingId}/count-active-cases': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Returns the number of active court cases for the passed in bookingId */
    get: operations['getCountOfActiveCourtCases']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/court-date-results/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns details of all court dates and the result of each.
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getCourtDateResults']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/court-date-results/by-charge/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns details of all the court outcomes grouped by charge
     * @description <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getCourtDateChargesAndOutcomes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/cell/{locationId}/history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get occupancy history of a location.
     * @description Requires role MAINTAIN_CELL_MOVEMENTS.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getBedAssignmentsHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/cell/{locationId}/attributes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get details of a location.
     * @deprecated
     */
    get: operations['getCellAttributes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/cell/{agencyId}/history/{assignmentDate}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get occupancy of locations in a prison on a date.
     * @description Requires agency to be in caseload or role MAINTAIN_CELL_MOVEMENTS.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getBedAssignmentsHistoryByDateForAgency']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Offender detail.
     * @description Offender detail.
     */
    get: operations['getOffenderBooking']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/visits/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * The summary of the visits for the offender.
     * @description Will return whether there are any visits and also the date of the next scheduled visit. Requires role VIEW_PRISONER_DATA or GLOBAL_SEARCH, or booking is in caseload<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getBookingVisitsSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/visits/prisons': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * The list of prisons for which there are visits for the specified booking.
     * @description To be used for filtering visits by prison. Requires role VIEW_PRISONER_DATA or GLOBAL_SEARCH, or booking is in caseload
     */
    get: operations['getBookingVisitsPrisons']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/visits/next': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * The next visit for the offender.
     * @description The next visit for the offender. Will return 200 with no body if no next visit is scheduled. Requires role VIEW_PRISONER_DATA or GLOBAL_SEARCH, or booking is in caseload<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getBookingVisitsNext']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/visits-with-visitors': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * visits with visitor list for offender.
     * @description visits with visitor list for offender.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getBookingVisitsWithVisitor']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/sentenceDetail': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Offender sentence detail (key dates and additional days awarded)
     * @description <h3>Algorithm</h3>
     *     <ul>
     *       <li>If there is a confirmed release date, the offender release date is the confirmed release date.</li>
     *       <li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li>
     *       <li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li>
     *     </ul>
     *     Requires booking to be in caseload, or role GLOBAL_SEARCH or VIEW_PRISONER_DATA
     *     <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getBookingSentenceDetail']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/sentenceAdjustments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Offender sentence adjustments.
     * @description Requires booking to be in caseload, or role GLOBAL_SEARCH or VIEW_PRISONER_DATA
     */
    get: operations['getBookingSentenceAdjustments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/secondary-languages': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get secondary languages
     * @description Get secondary languages
     */
    get: operations['getSecondaryLanguages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/reasonable-adjustments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Reasonable Adjustment Information
     * @description Reasonable Adjustment Information. Requires booking access (via caseload) or GLOBAL_SEARCH or VIEW_PRISONER_DATA role.
     */
    get: operations['getReasonableAdjustments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/reasonable-adjustments/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Reasonable Adjustment Information
     * @description Reasonable Adjustment Information. Requires booking access (via caseload) or GLOBAL_SEARCH or VIEW_PRISONER_DATA role.
     */
    get: operations['getAllReasonableAdjustments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/property': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of active property containers
     * @description Requires booking to be in caseload, or role VIEW_PRISONER_DATA
     */
    get: operations['getOffenderPropertyContainers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/personal-care-needs/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Personal Care Needs
     * @description Personal Care Need. Requires booking access (via caseload) or GLOBAL_SEARCH or VIEW_PRISONER_DATA role.
     */
    get: operations['getAllPersonalCareNeeds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/military-records': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Military Records
     * @description Requires booking to be in caseload, or role VIEW_PRISONER_DATA
     */
    get: operations['getMilitaryRecords_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/mainOffence': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get Offender main offence detail.
     * @description Requires booking to be in caseload, or role GLOBAL_SEARCH or VIEW_PRISONER_DATA
     */
    get: operations['getMainOffence_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/image/data': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Image data (as bytes).
     * @description Image data (as bytes).<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getMainBookingImageData']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/identifiers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Identifiers for this booking
     * @description Identifiers for this booking
     */
    get: operations['getOffenderIdentifiers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/fixed-term-recall': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets the Fixed Term Recall details for a booking
     * @description Requires role VIEW_PRISONER_DATA, or booking is in caseload
     */
    get: operations['getFixedTermRecallDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/events': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * All scheduled events for offender.
     * @description Requires role VIEW_PRISONER_DATA or GLOBAL_SEARCH, or booking is in caseload
     */
    get: operations['getEvents_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/events/today': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Today's scheduled events for offender.
     * @description Requires role VIEW_PRISONER_DATA or GLOBAL_SEARCH, or booking is in caseload
     */
    get: operations['getEventsToday']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/events/thisWeek': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Scheduled events for offender for coming week (from current day).
     * @description Requires role VIEW_PRISONER_DATA or GLOBAL_SEARCH, or booking is in caseload
     */
    get: operations['getEventsThisWeek']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/events/nextWeek': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Scheduled events for offender for following week.
     * @description Requires role VIEW_PRISONER_DATA or GLOBAL_SEARCH, or booking is in caseload
     */
    get: operations['getEventsNextWeek']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/court-hearings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getCourtHearings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/court-cases': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Court Cases
     * @description Requires role VIEW_PRISONER_DATA or GLOBAL_SEARCH, or booking is in caseload
     */
    get: operations['getCourtCases']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/contacts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Offender contacts (e.g. next of kin).
     * @description Requires role VIEW_PRISONER_DATA or GLOBAL_SEARCH, or booking is in caseload
     */
    get: operations['getContacts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/cell-history': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets cell history for an offender booking
     * @description Default sort order is by assignment date descending.  Requires a relationship (via caseload) with the prisoner or VIEW_PRISONER_DATA role.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getBedAssignmentsHistory_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/caseNotes/{type}/{subType}/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Count of case notes
     * @description Count of case notes<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getCaseNoteCount']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/balances': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Offender account balances.
     * @description Requires booking to be in caseload, or role GLOBAL_SEARCH or VIEW_PRISONER_DATA
     */
    get: operations['getBalances']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/assessments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Assessment Information
     * @description Assessment Information. Requires booking access (via caseload) or VIEW_ASSESSMENTS role.
     */
    get: operations['getAssessments_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/aliases': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Offender aliases.
     * @description Offender aliases.
     */
    get: operations['getOffenderAliases']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/activities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * All scheduled activities for offender.
     * @description Requires booking id to be in caseload, or role VIEW_SCHEDULES<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getBookingActivities']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/v2': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Prisoners Booking Summary
     * @description Returns data that is available to the users caseload privileges, at least one attribute of a prisonId, bookingId or offenderNo must be specified.Requires parameter(s) prisonId/bookingIds/offenderNos to be in caseload, or VIEW_PRISONER_DATA
     */
    get: operations['getPrisonerBookingsV2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/offenderNo/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Offender detail.
     * @description Offender detail.
     */
    get: operations['getOffenderBookingByOffenderNo']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/offenderNo/{offenderNo}/visit/balances': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Balances visit orders and privilege visit orders for offender.
     * @description Balances visit orders and privilege visit orders for offender.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getBookingVisitBalances']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/offenderNo/{offenderNo}/offenceHistory': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Offence history.
     * @description All Offences recorded for this offender.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getOffenceHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/offenderNo/{offenderNo}/key-worker': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Key worker details.
     * @deprecated
     * @description Key worker details. This should not be used - call keyworker API instead
     */
    get: operations['getKeyworkerByOffenderNo']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/offenderNo/{offenderNo}/image/data': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Image data (as bytes).
     * @description Image data (as bytes).
     */
    get: operations['getMainBookingImageDataByNo']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/appointments/{appointmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an appointment by id.
     * @description Requires role GLOBAL_APPOINTMENT
     */
    get: operations['getAppointment']
    put?: never
    post?: never
    /**
     * Delete an appointment.
     * @description Requires role GLOBAL_APPOINTMENT and write scope
     */
    delete: operations['deleteAppointment']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agency-switches/{serviceCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve a list of agencies switched on for the service code
     * @description Returns a list of agencies switched on for the service code.
     *           A special agencyId of `*ALL*` is used to designate that the service is switched on for all agencies.
     *           An agency in this context is normally a prison, but can also be any agency location e.g. prisoner escort service area.
     *           Requires ROLE_PRISON_API__SERVICE_AGENCY_SWITCHES__RO.
     *
     */
    get: operations['getServiceAgencies']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/{agencyId}/receptionsWithCapacity': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of receptions with capacity for agency.
     * @description List of active receptions with capacity for agency.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getAgencyActiveReceptionsWithCapacity']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/{agencyId}/pay-profile': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return the payment profile data for the given Agency.
     * @description Each agency can configure its own pay profile and this endpoint provides its key data, such as min/max pay and bonus rates. Requires VIEW_PRISON_DATA.
     */
    get: operations['getAgencyPayProfile']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/{agencyId}/locations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of active internal locations for agency.
     * @deprecated
     * @description List of active internal locations for agency.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getAgencyLocations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/{agencyId}/locations/groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of all available Location Groups at agency.
     * @deprecated
     * @description List of all available Location Groups at agency.
     */
    get: operations['getAvailableLocationGroups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/{agencyId}/eventLocations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of locations for agency where events (appointments, visits, activities) could be held.
     * @deprecated
     * @description *** DEPRECATED *** List of locations for agency where events (appointments, visits, activities) could be held.
     */
    get: operations['getAgencyEventLocations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/{agencyId}/eventLocationsBooked': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of location summaries for agency where events (appointments, visits, activities) are being held.
     * @description List of location summaries for agency where events (appointments, visits, activities) are being held.<p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getAgencyEventLocationsBooked']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/{agencyId}/establishment-types': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return the establishment types for the given Agency.
     * @description An agency can have one to many establishment types. For example a prison could be both a youth and adult establishment.
     */
    get: operations['getAgencyEstablishmentTypes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/type/{type}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of agencies by type
     * @description List of active agencies by type
     */
    get: operations['getAgenciesByType']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/prisons': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of all active prisons.
     * @description <p>List of active prisons.</p>
     *     <p>This is the same response as normally generated by calling the /agencies/type/INST endpoint with default parameters, added here for ease of use and speed.</p>
     *     <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getPrisons']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/prison': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of prison contact details.
     * @deprecated
     * @description <p>List of prison contact details.</p>
     *     <p>DEPRECATED. This endpoint is quite slow as it currently retrieves address and telephone information for each prison separately.
     *     In all the main usages of the endpoint we found that the clients didn't need or use the contact details so have deprecated the endpoint.
     *     Use /agencies/prisons to get the list of active prisons.</p>
     *     <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getPrisonContactDetailList']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/prison/{agencyId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Prison contact detail.
     * @description Prison contact detail.
     */
    get: operations['getPrisonContactDetail']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/agencies/caseload/{caseload}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of agencies for caseload.
     * @description List of agencies for caseload.
     */
    get: operations['getAgenciesByCaseload']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/adjustments/{bookingId}/sentence-and-booking': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Offender sentence adjustments. */
    get: operations['getBookingAndSentenceAdjustments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/offenders/{offenderNo}/core-person-record/secondary-language/{languageCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes core person record secondary language data.
     * @description Requires the PRISON_API__PRISONER_PROFILE__RW role.
     */
    delete: operations['deleteSecondaryLanguage']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/bookings/{bookingId}/court-hearings/{hearingId}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Cancels the scheduled court hearing for an offender.
     * @description Cancels the scheduled court hearing for an offender. Requires role COURT_HEARING_MAINTAINER and scope write
     */
    delete: operations['cancelCourtHearing']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Case Load */
    CaseLoad: {
      /**
       * @description Case Load ID
       * @example MDI
       */
      caseLoadId: string
      /**
       * @description Full description of the case load
       * @example Moorland Closed (HMP & YOI)
       */
      description: string
      /**
       * @description Type of case load. Note: Reference Code CSLD_TYPE
       * @example INST
       * @enum {string}
       */
      type: 'COMM' | 'INST' | 'APP'
      /**
       * @description Functional Use of the case load
       * @example GENERAL
       * @enum {string}
       */
      caseloadFunction?: 'GENERAL' | 'ADMIN'
      /**
       * @description Indicates that this caseload in the context of a staff member is the current active
       * @example false
       */
      currentlyActive: boolean
    }
    /** @description General API Error Response */
    ErrorResponse: {
      /**
       * Format: int32
       * @description Response status code (will typically mirror HTTP status code).
       * @example 404
       */
      status: number
      /**
       * Format: int32
       * @description An (optional) application-specific error code.
       * @example 20002
       */
      errorCode?: number
      /**
       * @description Concise error reason for end-user consumption.
       * @example Entity Not Found
       */
      userMessage: string
      /**
       * @description Detailed description of problem with remediation hints aimed at application developer.
       * @example Serious error in the system
       */
      developerMessage?: string
      /**
       * @description Provision for further information about the problem (e.g. a link to a FAQ or knowledge base article).
       * @example Check out this FAQ for more information
       */
      moreInfo?: string
    }
    /** @description Caseload Update */
    CaseloadUpdate: {
      /**
       * @description Caseload
       * @example MDI
       */
      caseload: string
      /**
       * Format: int32
       * @description Number of users enabled to access API
       * @example 5
       */
      numUsersEnabled: number
    }
    /** @description Condition details */
    RequestSplashCondition: {
      /**
       * @description Condition type
       * @example CASELOAD
       */
      conditionType: string
      /**
       * @description Condition value
       * @example MDI
       */
      conditionValue: string
      /**
       * @description Block access
       * @example false
       */
      blockAccess: boolean
    }
    /** @description Splash screen details */
    RequestSplashScreenCreateOrUpdate: {
      /** @description Function name */
      functionName?: string
      /** @description Function details */
      function?: components['schemas']['SplashScreenFunctionDto']
      /**
       * @description Warning text to display
       * @example Access to this screen will soon be revoked
       */
      warningText?: string
      /**
       * @description Blocked text to display when access is blocked
       * @example You can not longer use this screen, use DPS
       */
      blockedText?: string
      /**
       * @description Block access type
       * @example NO
       * @enum {string}
       */
      blockAccessType: 'YES' | 'NO' | 'COND'
      /** @description List of conditions for this splash screen */
      conditions: components['schemas']['RequestSplashCondition'][]
    }
    /** @description Splash Screen Function */
    SplashScreenFunctionDto: {
      /** @description Function name */
      functionName: string
      /** @description Description of the function */
      description: string
    }
    /** @description Splash Screen Condition */
    SplashConditionDto: {
      /**
       * Format: int64
       * @description Splash condition ID
       * @example 1
       */
      splashConditionId: number
      /**
       * @description Condition type
       * @example CASELOAD
       */
      conditionType: string
      /**
       * @description Condition value
       * @example MDI
       */
      conditionValue: string
      /**
       * @description Block access
       * @example false
       */
      blockAccess: boolean
    }
    /** @description Splash Screen */
    SplashScreenDto: {
      /**
       * Format: int64
       * @description Splash screen ID
       * @example 1
       */
      splashId: number
      /**
       * @description Module name
       * @example OIDCHOLO
       */
      moduleName: string
      /** @description Function name */
      functionName?: string
      /** @description Function details */
      function?: components['schemas']['SplashScreenFunctionDto']
      /**
       * @description Warning text to display
       * @example Access to this screen will soon be revoked
       */
      warningText?: string
      /**
       * @description Blocked text to display when access is blocked
       * @example You can not longer use this screen, use DPS
       */
      blockedText?: string
      /**
       * @description Block access type
       * @example NO
       * @enum {string}
       */
      blockAccessType: 'YES' | 'NO' | 'COND'
      /** @description List of conditions for this splash screen */
      conditions: components['schemas']['SplashConditionDto'][]
    }
    /** @description Reference Information */
    ReferenceCodeInfo: {
      /**
       * @description Reference data item description.
       * @example Some description
       */
      description: string
      /**
       * @description Parent reference data item domain.
       * @example TASK_TYPE
       */
      parentDomain?: string
      /**
       * @description Parent reference data item code.
       * @example MIGRATION
       */
      parentCode?: string
      /**
       * @description Reference data item active indicator flag.
       * @example Y
       * @enum {string}
       */
      activeFlag: 'Y' | 'N'
      /**
       * Format: int32
       * @description List Sequence
       * @example 1
       */
      listSeq?: number
      /**
       * @description System Data Flag
       * @example Y
       * @enum {string}
       */
      systemDataFlag?: 'Y' | 'N'
      /**
       * Format: date
       * @description Expired Date
       * @example 2018-03-09
       */
      expiredDate?: string
    }
    /** @description Reference Code */
    ReferenceCode: {
      /**
       * @description Reference data item domain.
       * @example TASK_TYPE
       */
      domain: string
      /**
       * @description Reference data item code.
       * @example MISC
       */
      code: string
      /**
       * @description Reference data item description.
       * @example Some description
       */
      description: string
      /**
       * @description Parent reference data item domain.
       * @example TASK_TYPE
       */
      parentDomain?: string
      /**
       * @description Parent reference data item code.
       * @example MIGRATION
       */
      parentCode?: string
      /**
       * @description Reference data item active indicator flag.
       * @example Y
       * @enum {string}
       */
      activeFlag: 'Y' | 'N'
      /**
       * Format: int32
       * @description List Sequence
       * @example 1
       */
      listSeq?: number
      /**
       * @description System Data Flag
       * @example Y
       * @enum {string}
       */
      systemDataFlag?: 'Y' | 'N'
      /**
       * Format: date
       * @description Expired Date
       * @example 2018-03-09
       */
      expiredDate?: string
      /** @description List of subordinate reference data items associated with this reference data item. Not returned by default */
      subCodes?: components['schemas']['ReferenceCode'][]
    }
    /** @description The update request */
    DistinguishingMarkDetails: {
      /**
       * @description Code representing the type of distinguishing mark. Reference code from the MARK_TYPE domain.
       * @example SCAR
       */
      markType: string
      /**
       * @description Code representing the part of body the distinguishing mark is on. Reference code from the BODY_PART domain.
       * @example HEAD
       */
      bodyPart: string
      /**
       * @description Code representing the side of the body part the mark is on. Reference code from the SIDE domain.
       * @example SIDE_R
       */
      side?: string
      /**
       * @description Code representing the orientation of the mark on the body part. Reference code from the PART_ORIENT domain.
       * @example PART_ORIENT_CENTR
       */
      partOrientation?: string
      /**
       * @description Comment about the distinguishing mark.
       * @example Long healed scar from an old fight
       */
      comment?: string
    }
    /** @description Distinguishing Mark */
    DistinguishingMark: {
      /**
       * Format: int32
       * @description The sequence id of the distinguishing mark
       */
      id: number
      /**
       * Format: int64
       * @description The id of the booking associated with the mark
       */
      bookingId: number
      /**
       * @description Offender Unique Reference
       * @example A1234AA
       */
      offenderNo: string
      /** @description The body part the mark is on */
      bodyPart: components['schemas']['ReferenceCode']
      /** @description The type of distinguishing mark (e.g. tattoo, scar) */
      markType: components['schemas']['ReferenceCode']
      /** @description The side of the body part the mark is on */
      side?: components['schemas']['ReferenceCode']
      /** @description The orientation of the mark on the body part (e.g. Centre, Low, Upper) */
      partOrientation?: components['schemas']['ReferenceCode']
      /** @description Comment about the distinguishing mark */
      comment?: string
      /**
       * Format: date-time
       * @description The date and time the data was created
       */
      createdAt: string
      /**
       * @description Username of the user that created the mark
       * @example USER1
       */
      createdBy: string
      /** @description List of images associated with this distinguishing mark */
      photographUuids: components['schemas']['DistinguishingMarkImageDetail'][]
    }
    DistinguishingMarkImageDetail: {
      /**
       * Format: int64
       * @description The image id
       */
      id: number
      /** @description True if this image is the latest one associated with a mark */
      latest: boolean
    }
    /** @description Represents the data required for transferring a prisoner to a new location */
    RequestToTransferOut: {
      /**
       * @description The location to be moved to.
       * @example PVI
       */
      toLocation: string
      /**
       * Format: date-time
       * @description The time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2020-03-24T12:13:40
       */
      movementTime: string
      /**
       * @description The escort type of the move.
       * @example PECS
       */
      escortType: string
      /**
       * @description Reason code for the transfer, reference domain is MOVE_RSN
       * @example NOTR
       */
      transferReasonCode: string
      /**
       * @description Additional comments about the release
       * @example Prisoner was transferred to a new prison
       */
      commentText?: string
    }
    /** @description An Address */
    AddressDto: {
      /**
       * Format: int64
       * @description Address Id
       * @example 543524
       */
      addressId?: number
      /**
       * @description Address Type. Note: Reference domain is ADDR_TYPE
       * @example BUS
       */
      addressType?: string
      /**
       * @description Flat
       * @example 3B
       */
      flat?: string
      /**
       * @description Premise
       * @example Liverpool Prison
       */
      premise?: string
      /**
       * @description Street
       * @example Slinn Street
       */
      street?: string
      /**
       * @description Locality
       * @example Brincliffe
       */
      locality?: string
      /**
       * @description Town/City description. Note: Reference domain is CITY
       * @example Liverpool
       */
      town?: string
      /**
       * @description Town/City code. Note: Reference domain is CITY
       * @example 17743
       */
      townCode?: string
      /**
       * @description Postal Code
       * @example LI1 5TH
       */
      postalCode?: string
      /**
       * @description County description. Note: Reference domain is COUNTY
       * @example Herefordshire
       */
      county?: string
      /**
       * @description County code. Note: Reference domain is COUNTY
       * @example HEREFORD
       */
      countyCode?: string
      /**
       * @description Country description. Note: Reference domain is COUNTRY
       * @example England
       */
      country?: string
      /**
       * @description Country code. Note: Reference domain is COUNTRY
       * @example ENG
       */
      countryCode?: string
      /**
       * @description Comment
       * @example This is a comment text
       */
      comment?: string
      /**
       * @description Primary Address
       * @example true
       */
      primary: boolean
      /**
       * @description Mail Address
       * @example true
       */
      mail: boolean
      /**
       * @description No Fixed Address
       * @example false
       */
      noFixedAddress: boolean
      /**
       * Format: date
       * @description Date Added
       * @example 2005-05-12
       */
      startDate?: string
      /**
       * Format: date
       * @description Date ended
       * @example 2021-02-12
       */
      endDate?: string
      /** @description The phone number associated with the address */
      phones?: components['schemas']['Telephone'][]
      /** @description The address usages/types */
      addressUsages?: components['schemas']['AddressUsageDto'][]
    }
    /** @description An Offender's address usage */
    AddressUsageDto: {
      /**
       * Format: int64
       * @description Address ID of the associated address
       * @example 23422313
       */
      addressId?: number
      /**
       * @description The address usages
       * @example HDC
       */
      addressUsage?: string
      /**
       * @description The address usages description
       * @example HDC Address
       */
      addressUsageDescription?: string
      /**
       * @description Active Flag
       * @example true
       */
      activeFlag?: boolean
    }
    /** @description Agency Details */
    Agency: {
      /**
       * @description Agency identifier.
       * @example MDI
       */
      agencyId: string
      /**
       * @description Agency description.
       * @example Moorland (HMP & YOI)
       */
      description: string
      /**
       * @description Long description of the agency
       * @example Moorland (HMP & YOI)
       */
      longDescription?: string
      /**
       * @description Agency type.  Reference domain is AGY_LOC_TYPE
       * @example INST
       * @enum {string}
       */
      agencyType:
        | 'CRC'
        | 'POLSTN'
        | 'INST'
        | 'COMM'
        | 'APPR'
        | 'CRT'
        | 'POLICE'
        | 'IMDC'
        | 'TRN'
        | 'OUT'
        | 'YOT'
        | 'SCH'
        | 'STC'
        | 'HOST'
        | 'AIRPORT'
        | 'HSHOSP'
        | 'HOSPITAL'
        | 'PECS'
        | 'PAR'
        | 'PNP'
        | 'PSY'
      /**
       * @description Indicates the Agency is active
       * @example true
       */
      active: boolean
      /**
       * @description Court Type.  Reference domain is JURISDICTION
       * @example CC
       * @enum {string}
       */
      courtType?: 'CACD' | 'CB' | 'CC' | 'CO' | 'DCM' | 'GCM' | 'IMM' | 'MC' | 'OTHER' | 'YC'
      /**
       * @description Court Type description.  Reference domain is JURISDICTION. Not always present for all end points
       * @example Crown Court
       */
      courtTypeDescription?: string
      /**
       * Format: date
       * @description Date agency became inactive
       * @example 2012-01-12
       */
      deactivationDate?: string
      /** @description List of addresses associated with agency */
      addresses?: components['schemas']['AddressDto'][]
      /** @description List of phones associated with agency */
      phones?: components['schemas']['Telephone'][]
      /** @description List of emails associated with agency */
      emails?: components['schemas']['Email'][]
      /** @description Area of this agency */
      area?: components['schemas']['RefCodeAndDescription']
      /** @description Region of this agency */
      region?: components['schemas']['RefCodeAndDescription']
    }
    /** @description Alert */
    Alert: {
      /**
       * Format: int64
       * @description Alert Id
       * @example 1
       */
      alertId?: number
      /**
       * Format: int64
       * @description Offender booking id.
       * @example 14
       */
      bookingId?: number
      /**
       * @description Offender Unique Reference
       * @example G3878UK
       */
      offenderNo: string
      /**
       * @description Alert Type
       * @example X
       */
      alertType: string
      /**
       * @description Alert Type Description
       * @example Security
       */
      alertTypeDescription: string
      /**
       * @description Alert Code
       * @example XER
       */
      alertCode: string
      /**
       * @description Alert Code Description
       * @example Escape Risk
       */
      alertCodeDescription: string
      /**
       * @description Alert comments
       * @example Profession lock pick.
       */
      comment: string
      /**
       * Format: date
       * @description Date of the alert, which might differ to the date it was created
       * @example 2019-08-20
       */
      dateCreated?: string
      /**
       * Format: date
       * @description Date the alert expires
       * @example 2020-08-20
       */
      dateExpires?: string
      /**
       * Format: date-time
       * @description The date and time the alert was last modified in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS. If this Alert hasn't been modified since its creation this field will be null
       * @example 2020-08-20T12:34:56
       */
      modifiedDateTime?: string
      /**
       * @description True / False based on presence of expiry date
       * @example true
       */
      expired?: boolean
      /**
       * @description True / False based on alert status
       * @example false
       */
      active?: boolean
      /**
       * @description First name of the user who added the alert
       * @example John
       */
      addedByFirstName?: string
      /**
       * @description Last name of the user who added the alert
       * @example Smith
       */
      addedByLastName?: string
      /**
       * @description First name of the user who last modified the alert
       * @example John
       */
      expiredByFirstName?: string
      /**
       * @description Last name of the user who last modified the alert
       * @example Smith
       */
      expiredByLastName?: string
    }
    /** @description Alias */
    Alias: {
      /**
       * @description Title of offender alias
       * @example Mr
       */
      title?: string
      /**
       * @description First name of offender alias
       * @example Mike
       */
      firstName: string
      /**
       * @description Middle names of offender alias
       * @example John
       */
      middleName?: string
      /**
       * @description Last name of offender alias
       * @example Smith
       */
      lastName: string
      /**
       * Format: int32
       * @description Age of Offender
       * @example 32
       */
      age?: number
      /**
       * Format: date
       * @description Date of Birth of Offender
       * @example 1980-02-28
       */
      dob?: string
      /**
       * @description Gender
       * @example Male
       */
      gender: string
      /**
       * @description Ethnicity
       * @example Mixed: White and Black African
       */
      ethnicity?: string
      /**
       * @description Ethnicity Code
       * @example M2
       */
      raceCode?: string
      /**
       * @description Type of Alias
       * @example Alias Name
       */
      nameType?: string
      /**
       * Format: date
       * @description Date of creation
       * @example 2019-02-15
       */
      createDate?: string
      /**
       * Format: int64
       * @description Offender ID
       * @example 543548
       */
      offenderId: number
    }
    /** @description Assessment */
    Assessment: {
      /**
       * Format: int64
       * @description Booking number
       * @example 123456
       */
      bookingId?: number
      /**
       * @description Offender number (e.g. NOMS Number).
       * @example GV09876N
       */
      offenderNo: string
      /**
       * @description Classification code
       * @example C
       */
      classificationCode: string
      /**
       * @description Classification description
       * @example Cat C
       */
      classification: string
      /**
       * @description Identifies the type of assessment
       * @example CATEGORY
       */
      assessmentCode: string
      /**
       * @description Assessment description
       * @example Categorisation
       */
      assessmentDescription: string
      /** @description Indicates the presence of a cell sharing alert */
      cellSharingAlertFlag?: boolean
      /**
       * Format: date
       * @description Date assessment was created
       * @example 2018-02-11
       */
      assessmentDate?: string
      /**
       * Format: date
       * @description Date of next review
       * @example 2018-02-11
       */
      nextReviewDate?: string
      /**
       * Format: date
       * @description Date of assessment approval
       * @example 2018-02-11
       */
      approvalDate?: string
      /**
       * @description The assessment creation agency id
       * @example MDI
       */
      assessmentAgencyId?: string
      /**
       * @description The status of the assessment
       * @example A
       * @enum {string}
       */
      assessmentStatus?: 'P' | 'A' | 'I'
      /**
       * Format: int32
       * @description Sequence number of assessment within booking
       * @example 1
       */
      assessmentSeq?: number
      /**
       * @description Comment from assessor
       * @example Comment details
       */
      assessmentComment?: string
      /**
       * Format: int64
       * @description Staff member who made the assessment
       * @example 130000
       */
      assessorId?: number
      /**
       * @description Username who made the assessment
       * @example NGK33Y
       */
      assessorUser?: string
    }
    /** @description Assigned Living Unit */
    AssignedLivingUnit: {
      /** @description Agency Id */
      agencyId: string
      /**
       * Format: int64
       * @description location Id
       */
      locationId?: number
      /** @description Living Unit Desc */
      description: string
      /** @description Name of the agency where this living unit resides */
      agencyName: string
    }
    /** @description An Email Address */
    Email: {
      /**
       * Format: int64
       * @description Email address ID
       */
      emailAddressId?: number
      /** @description Email */
      email?: string
    }
    /** @description Inmate Detail */
    InmateDetail: {
      /**
       * @description Offender Unique Reference
       * @example A1234AA
       */
      offenderNo: string
      /**
       * Format: int64
       * @description Offender Booking Id
       * @example 432132
       */
      bookingId?: number
      /** @description Booking Number */
      bookingNo?: string
      /**
       * Format: int64
       * @description Internal Offender ID
       */
      offenderId: number
      /**
       * Format: int64
       * @description Internal Root Offender ID
       */
      rootOffenderId: number
      /** @description First Name */
      firstName: string
      /** @description Middle Name(s) */
      middleName?: string
      /** @description Last Name */
      lastName: string
      /**
       * Format: date
       * @description Date of Birth of prisoner
       * @example 1970-03-15
       */
      dateOfBirth?: string
      /**
       * Format: int32
       * @description Age of prisoner. Note: Full Details Only
       */
      age?: number
      /** @description Indicates that the person is currently in prison */
      activeFlag?: boolean
      /**
       * Format: int64
       * @description Image Id Ref of prisoner
       */
      facialImageId?: number
      /** @description Identifier of agency to which the prisoner is associated. */
      agencyId?: string
      /**
       * Format: int64
       * @description Identifier of living unit (e.g. cell) that prisoner is assigned to.
       */
      assignedLivingUnitId?: number
      /** @description Religion of the prisoner */
      religion?: string
      /** @description Preferred spoken language */
      language?: string
      /** @description Interpreter required */
      interpreterRequired?: boolean
      /** @description Preferred written language */
      writtenLanguage?: string
      /** @description List of Alerts */
      alertsCodes?: string[]
      /**
       * Format: int64
       * @description number of active alerts. Note: Full Details Only
       */
      activeAlertCount?: number
      /**
       * Format: int64
       * @description number of inactive alerts. Note: Full Details Only
       */
      inactiveAlertCount?: number
      /** @description List of alert details */
      alerts?: components['schemas']['Alert'][]
      /** @description Cell or location of the prisoner */
      assignedLivingUnit?: components['schemas']['AssignedLivingUnit']
      /** @description A set of physical attributes */
      physicalAttributes?: components['schemas']['PhysicalAttributes']
      /** @description List of physical characteristics */
      physicalCharacteristics?: components['schemas']['PhysicalCharacteristic'][]
      /** @description List of profile information */
      profileInformation?: components['schemas']['ProfileInformation'][]
      /** @description List of physical marks */
      physicalMarks?: components['schemas']['PhysicalMark'][]
      /** @description List of assessments */
      assessments?: components['schemas']['Assessment'][]
      /** @description CSRA (Latest assessment with cellSharing=true from list of assessments) */
      csra?: string
      /**
       * @description The CSRA classification (calculated from the list of CSRA assessments)
       * @example STANDARD
       */
      csraClassificationCode?: string
      /**
       * Format: date
       * @description The date that the csraClassificationCode was assessed
       */
      csraClassificationDate?: string
      /** @description Category description (from list of assessments) */
      category?: string
      /** @description Category code (from list of assessments) */
      categoryCode?: string
      /**
       * @description Place of birth
       * @example WALES
       */
      birthPlace?: string
      /**
       * @description Country of birth
       * @example GBR
       */
      birthCountryCode?: string
      /**
       * @description In/Out Status
       * @example IN, OUT, TRN
       */
      inOutStatus?: string
      /** @description Identifiers. Note: Only returned when requesting extra details */
      identifiers?: components['schemas']['OffenderIdentifier'][]
      /** @description Personal Care Needs. Note: Only returned when requesting extra details */
      personalCareNeeds?: components['schemas']['PersonalCareNeed'][]
      /** @description Sentence Detail. Note: Only returned when requesting extra details */
      sentenceDetail?: components['schemas']['SentenceCalcDates']
      /** @description Offence History. Note: Only returned when requesting extra details */
      offenceHistory?: components['schemas']['OffenceHistoryDetail'][]
      /** @description Current Sentence Terms. Note: Only returned when requesting extra details */
      sentenceTerms?: components['schemas']['OffenderSentenceTerms'][]
      /** @description Aliases. Note: Only returned when requesting extra details */
      aliases?: components['schemas']['Alias'][]
      /**
       * @description Status of prisoner
       * @example ACTIVE IN, INACTIVE OUT, INACTIVE TRN
       */
      status?: string
      /**
       * @description Last movement status of the prison
       * @example CRT-CA
       */
      statusReason?: string
      /**
       * @description Last Movement Type Code of prisoner. Note: Reference Data from MOVE_TYPE Domain
       * @example TAP, CRT, TRN, ADM, REL
       */
      lastMovementTypeCode?: string
      /**
       * @description Last Movement Reason of prisoner. Note: Reference Data from MOVE_RSN Domain
       * @example CA
       */
      lastMovementReasonCode?: string
      /** @description Last Movement to location, such as a court or prison */
      lastMovementToAgency?: components['schemas']['Agency']
      /**
       * @description Last Movement comment
       * @example Scheduled visit to dentist
       */
      lastMovementComment?: string
      /**
       * @description Legal Status. Note: Only returned when requesting extra details
       * @example REMAND
       * @enum {string}
       */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
      /**
       * @description Recall. Note: Only returned when requesting extra details
       * @example true
       */
      recall?: boolean
      /**
       * @description The prisoner's imprisonment status. Note: Only returned when requesting extra details
       * @example LIFE
       */
      imprisonmentStatus?: string
      /**
       * @description The prisoner's imprisonment status description. Note: Only returned when requesting extra details
       * @example Serving Life Imprisonment
       */
      imprisonmentStatusDescription?: string
      /**
       * @description The prisoner's convicted status. Note: Only returned when requesting extra details
       * @example Convicted
       */
      convictedStatus?: string
      /**
       * Format: date
       * @description Date prisoner was received into the prison.
       * @example 1980-01-01
       */
      receptionDate?: string
      /**
       * @description current prison or outside with last movement information.
       * @example Outside - released from Leeds
       */
      locationDescription?: string
      /**
       * @description the current prison id or the last prison before release
       * @example MDI
       */
      latestLocationId?: string
    }
    /** @description Offence History Item */
    OffenceHistoryDetail: {
      /**
       * Format: int64
       * @description Prisoner booking id
       * @example 1123456
       */
      bookingId?: number
      /**
       * Format: date
       * @description Date the offence took place
       * @example 2018-02-10
       */
      offenceDate?: string
      /**
       * Format: date
       * @description End date if range the offence was believed to have taken place
       * @example 2018-03-10
       */
      offenceRangeDate?: string
      /**
       * @description Description associated with the offence code
       * @example Commit an act / series of acts with intent to pervert the course of public justice
       */
      offenceDescription: string
      /**
       * @description Reference Code
       * @example RR84070
       */
      offenceCode: string
      /**
       * @description Statute code
       * @example RR84
       */
      statuteCode: string
      /** @description Identifies the main offence per booking */
      mostSerious?: boolean
      /** @description Primary result code  */
      primaryResultCode?: string
      /** @description Secondary result code */
      secondaryResultCode?: string
      /** @description Description for Primary result */
      primaryResultDescription?: string
      /** @description Description for Secondary result */
      secondaryResultDescription?: string
      /** @description Conviction flag for Primary result  */
      primaryResultConviction?: boolean
      /** @description Conviction flag for Secondary result  */
      secondaryResultConviction?: boolean
      /**
       * Format: date
       * @description Latest court date associated with the offence
       * @example 2018-02-10
       */
      courtDate?: string
      /**
       * Format: int64
       * @description Court case id
       * @example 100
       */
      caseId?: number
      /**
       * Format: int32
       * @description Offence Severity Ranking
       * @example 100
       */
      offenceSeverityRanking?: number
      /**
       * Format: date
       * @description Start date of sentence - null if there is no associated sentence. This will not be populated if called from /offenderNo/{offenderNo}/offenceHistory, /offenders/{offenderNo} or /bookings/offenderNo/{offenderNo}
       * @example 2018-03-10
       */
      sentenceStartDate?: string
      /** @description Primary sentence - true if it is not a consecutive sentence, false if it is a consecutive sentence, null if no sentence found for the charge. This will not be populated if called from /offenderNo/{offenderNo}/offenceHistory, /offenders/{offenderNo} or /bookings/offenderNo/{offenderNo} */
      primarySentence?: boolean
    }
    /** @description Offender Identifier */
    OffenderIdentifier: {
      /**
       * @description Type of offender identifier
       * @example PNC
       */
      type: string
      /**
       * @description The value of the offender identifier
       * @example 1231/XX/121
       */
      value: string
      /**
       * @description The offender number for this identifier
       * @example A1234AB
       */
      offenderNo?: string
      /**
       * Format: int64
       * @description The booking ID for this identifier
       * @example 1231223
       */
      bookingId?: number
      /**
       * @description Issuing Authority Information
       * @example Important Auth
       */
      issuedAuthorityText?: string
      /**
       * Format: date
       * @description Date of issue
       * @example 2018-01-21
       */
      issuedDate?: string
      /**
       * @description Related caseload type
       * @example GENERAL
       */
      caseloadType?: string
      /**
       * Format: date-time
       * @description Creation date and time
       * @example 2018-01-21T15:00:00
       */
      whenCreated?: string
      /**
       * Format: int64
       * @description Offender ID
       * @example 234547
       */
      offenderId?: number
      /**
       * Format: int64
       * @description Root Offender ID
       * @example 654321
       */
      rootOffenderId?: number
      /**
       * Format: int64
       * @description Identifier sequence
       * @example 123456
       */
      offenderIdSeq?: number
    }
    /** @description Offender Sentence terms details for booking id */
    OffenderSentenceTerms: {
      /**
       * Format: int64
       * @description Offender booking id.
       * @example 1132400
       */
      bookingId?: number
      /**
       * Format: int32
       * @description Sentence number within booking id.
       * @example 2
       */
      sentenceSequence?: number
      /**
       * Format: int32
       * @description Sentence term number within sentence.
       * @example 1
       */
      termSequence?: number
      /**
       * Format: int32
       * @description Sentence number which this sentence follows if consecutive, otherwise concurrent.
       * @example 2
       */
      consecutiveTo?: number
      /**
       * @description Sentence type, using reference data from table SENTENCE_CALC_TYPES.
       * @example 2
       */
      sentenceType?: string
      /**
       * @description Sentence type description.
       * @example 2
       */
      sentenceTypeDescription?: string
      /**
       * Format: date
       * @description Start date of sentence term.
       * @example 2018-12-31
       */
      startDate?: string
      /**
       * Format: int32
       * @description Sentence length years.
       * @example 1
       */
      years?: number
      /**
       * Format: int32
       * @description Sentence length months.
       * @example 2
       */
      months?: number
      /**
       * Format: int32
       * @description Sentence length weeks.
       * @example 3
       */
      weeks?: number
      /**
       * Format: int32
       * @description Sentence length days.
       * @example 4
       */
      days?: number
      /** @description Whether this is a life sentence. */
      lifeSentence?: boolean
      /** @description Court case id */
      caseId?: string
      /**
       * Format: double
       * @description Fine amount.
       */
      fineAmount?: number
      /**
       * @description Sentence term code.
       * @example IMP
       */
      sentenceTermCode?: string
      /**
       * Format: int64
       * @description Sentence line number
       * @example 1
       */
      lineSeq?: number
      /**
       * Format: date
       * @description Sentence start date
       * @example 2018-12-31
       */
      sentenceStartDate?: string
    }
    /** @description Personal Care Need */
    PersonalCareNeed: {
      /**
       * Format: int64
       * @description ID
       * @example 1
       */
      personalCareNeedId?: number
      /**
       * @description Problem Type
       * @example MATSTAT
       */
      problemType?: string
      /**
       * @description Problem Code
       * @example ACCU9
       */
      problemCode?: string
      /**
       * @description Problem Status
       * @example ON
       */
      problemStatus?: string
      /**
       * @description Problem Description
       * @example Preg, acc under 9mths
       */
      problemDescription?: string
      /**
       * @description Comment Text
       * @example a comment
       */
      commentText?: string
      /**
       * Format: date
       * @description Start Date
       * @example 2010-06-21
       */
      startDate?: string
      /**
       * Format: date
       * @description End Date
       * @example 2010-06-21
       */
      endDate?: string
    }
    /** @description Physical Attributes */
    PhysicalAttributes: {
      /**
       * @description Gender Code
       * @example M
       */
      sexCode: string
      /**
       * @description Gender
       * @example Male
       */
      gender: string
      /**
       * @description Ethnicity Code
       * @example W1
       */
      raceCode?: string
      /**
       * @description Ethnicity
       * @example White: Eng./Welsh/Scot./N.Irish/British
       */
      ethnicity?: string
      /**
       * Format: int32
       * @description Height in Feet
       * @example 5
       */
      heightFeet?: number
      /**
       * Format: int32
       * @description Height in Inches
       * @example 60
       */
      heightInches?: number
      /**
       * @description Height in Metres (to 2dp)
       * @example 1.76
       */
      heightMetres?: number
      /**
       * Format: int32
       * @description Height in Centimetres
       * @example 176
       */
      heightCentimetres?: number
      /**
       * Format: int32
       * @description Weight in Pounds
       * @example 50
       */
      weightPounds?: number
      /**
       * Format: int32
       * @description Weight in Kilograms
       * @example 67
       */
      weightKilograms?: number
    }
    /** @description Physical Characteristic */
    PhysicalCharacteristic: {
      /** @description Type code of physical characteristic */
      type: string
      /** @description Type of physical characteristic */
      characteristic: string
      /** @description Detailed information about the physical characteristic */
      detail: string
      /**
       * Format: int64
       * @description Image Id Ref
       */
      imageId?: number
    }
    /** @description Physical Mark */
    PhysicalMark: {
      /** @description Type of Mark */
      type: string
      /** @description Left or Right Side */
      side: string
      /** @description Where on the body */
      bodyPart: string
      /** @description Image orientation */
      orientation: string
      /** @description More information */
      comment: string
      /**
       * Format: int64
       * @description Image Id Ref
       */
      imageId?: number
    }
    /** @description Profile Information */
    ProfileInformation: {
      /** @description Type of profile information */
      type: string
      /** @description Profile Question */
      question: string
      /** @description Profile Result Answer */
      resultValue: string
    }
    /** @description Reference code and description */
    RefCodeAndDescription: {
      /**
       * @description Reference code
       * @example code
       */
      code: string
      /**
       * @description Reference description
       * @example description
       */
      description: string
    }
    /** @description Sentence Calculation Dates */
    SentenceCalcDates: {
      /**
       * Format: date
       * @description SED - date on which sentence expires.
       * @example 2020-02-03
       */
      sentenceExpiryDate?: string
      /**
       * Format: date
       * @description ARD - calculated automatic (unconditional) release date for offender.
       * @example 2020-02-03
       */
      automaticReleaseDate?: string
      /**
       * Format: date
       * @description CRD - calculated conditional release date for offender.
       * @example 2020-02-03
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description NPD - calculated non-parole date for offender (relating to the 1991 act).
       * @example 2020-02-03
       */
      nonParoleDate?: string
      /**
       * Format: date
       * @description PRRD - calculated post-recall release date for offender.
       * @example 2020-02-03
       */
      postRecallReleaseDate?: string
      /**
       * Format: date
       * @description LED - date on which offender licence expires.
       * @example 2020-02-03
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description HDCED - date on which offender will be eligible for home detention curfew.
       * @example 2020-02-03
       */
      homeDetentionCurfewEligibilityDate?: string
      /**
       * Format: date
       * @description PED - date on which offender is eligible for parole.
       * @example 2020-02-03
       */
      paroleEligibilityDate?: string
      /**
       * Format: date
       * @description HDCAD - the offender's actual home detention curfew date.
       * @example 2020-02-03
       */
      homeDetentionCurfewActualDate?: string
      /**
       * Format: date
       * @description APD - the offender's actual parole date.
       * @example 2020-02-03
       */
      actualParoleDate?: string
      /**
       * Format: date
       * @description ROTL - the date on which offender will be released on temporary licence.
       * @example 2020-02-03
       */
      releaseOnTemporaryLicenceDate?: string
      /**
       * Format: date
       * @description ERSED - the date on which offender will be eligible for early removal (under the Early Removal Scheme for foreign nationals).
       * @example 2020-02-03
       */
      earlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description ETD - early term date for offender.
       * @example 2020-02-03
       */
      earlyTermDate?: string
      /**
       * Format: date
       * @description MTD - mid term date for offender.
       * @example 2020-02-03
       */
      midTermDate?: string
      /**
       * Format: date
       * @description LTD - late term date for offender.
       * @example 2020-02-03
       */
      lateTermDate?: string
      /**
       * Format: date
       * @description TUSED - top-up supervision expiry date for offender.
       * @example 2020-02-03
       */
      topupSupervisionExpiryDate?: string
      /**
       * Format: date
       * @description Date on which minimum term is reached for parole (indeterminate/life sentences).
       * @example 2020-02-03
       */
      tariffDate?: string
      /**
       * Format: date
       * @description DPRRD - Detention training order post recall release date
       * @example 2020-02-03
       */
      dtoPostRecallReleaseDate?: string
      /**
       * Format: date
       * @description TERSED - Tariff early removal scheme eligibility date
       * @example 2020-02-03
       */
      tariffEarlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description Effective sentence end date
       * @example 2020-02-03
       */
      effectiveSentenceEndDate?: string
      /**
       * Format: int64
       * @description Offender booking id.
       * @example 1234123
       */
      bookingId?: number
      /**
       * Format: date
       * @description Sentence start date.
       * @example 2010-02-03
       */
      sentenceStartDate?: string
      /**
       * Format: int32
       * @description ADA - days added to sentence term due to adjustments.
       * @example 5
       */
      additionalDaysAwarded?: number
      /**
       * Format: date
       * @description ARD (override) - automatic (unconditional) release override date for offender.
       * @example 2020-02-03
       */
      automaticReleaseOverrideDate?: string
      /**
       * Format: date
       * @description CRD (override) - conditional release override date for offender.
       * @example 2020-02-03
       */
      conditionalReleaseOverrideDate?: string
      /**
       * Format: date
       * @description NPD (override) - non-parole override date for offender.
       * @example 2020-02-03
       */
      nonParoleOverrideDate?: string
      /**
       * Format: date
       * @description PRRD (override) - post-recall release override date for offender.
       * @example 2020-04-01
       */
      postRecallReleaseOverrideDate?: string
      /**
       * Format: date
       * @description DPRRD (override) - detention training order post-recall release override date for offender
       * @example 2020-04-01
       */
      dtoPostRecallReleaseDateOverride?: string
      /**
       * Format: date
       * @description Release date for non-DTO sentence (if applicable). This will be based on one of ARD, CRD, NPD or PRRD.
       * @example 2020-04-01
       */
      nonDtoReleaseDate?: string
      /**
       * Format: date
       * @description SED (calculated) - date on which sentence expires. (as calculated by NOMIS)
       * @example 2020-02-03
       */
      sentenceExpiryCalculatedDate?: string
      /**
       * Format: date
       * @description SED (override) - date on which sentence expires.
       * @example 2020-02-03
       */
      sentenceExpiryOverrideDate?: string
      /**
       * Format: date
       * @description LED (calculated) - date on which offender licence expires. (as calculated by NOMIS)
       * @example 2020-02-03
       */
      licenceExpiryCalculatedDate?: string
      /**
       * Format: date
       * @description LED (override) - date on which offender licence expires.
       * @example 2020-02-03
       */
      licenceExpiryOverrideDate?: string
      /**
       * Format: date
       * @description PED (calculated) - date on which offender is eligible for parole.
       * @example 2020-02-03
       */
      paroleEligibilityCalculatedDate?: string
      /**
       * Format: date
       * @description PED (override) - date on which offender is eligible for parole.
       * @example 2020-02-03
       */
      paroleEligibilityOverrideDate?: string
      /**
       * Format: date
       * @description TUSED (calculated) - top-up supervision expiry date for offender.
       * @example 2020-02-03
       */
      topupSupervisionExpiryCalculatedDate?: string
      /**
       * Format: date
       * @description TUSED (override) - top-up supervision expiry date for offender.
       * @example 2020-02-03
       */
      topupSupervisionExpiryOverrideDate?: string
      /**
       * Format: date
       * @description HDCED (calculated) - date on which offender will be eligible for home detention curfew.
       * @example 2020-02-03
       */
      homeDetentionCurfewEligibilityCalculatedDate?: string
      /**
       * Format: date
       * @description HDCED (override) - date on which offender will be eligible for home detention curfew.
       * @example 2020-02-03
       */
      homeDetentionCurfewEligibilityOverrideDate?: string
      /**
       * @description Indicates which type of non-DTO release date is the effective release date. One of 'ARD', 'CRD', 'NPD' or 'PRRD'.
       * @example CRD
       * @enum {string}
       */
      nonDtoReleaseDateType?: 'ARD' | 'CRD' | 'NPD' | 'PRRD'
      /**
       * Format: date
       * @description Confirmed release date for offender.
       * @example 2020-04-20
       */
      confirmedReleaseDate?: string
      /**
       * Format: date
       * @description Confirmed, actual, approved, provisional or calculated release date for offender, according to offender release date algorithm.<h3>Algorithm</h3><ul><li>If there is a confirmed release date, the offender release date is the confirmed release date.</li><li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li><li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li></ul>
       * @example 2020-04-01
       */
      releaseDate?: string
      /**
       * Format: date
       * @description ETD Override - early term date for offender override date.
       * @example 2019-04-02
       */
      etdOverrideDate?: string
      /**
       * Format: date
       * @description ETD Override - early term date for offender calculated date.
       * @example 2019-04-02
       */
      etdCalculatedDate?: string
      /**
       * Format: date
       * @description MTD - mid term date for offender override date.
       * @example 2019-04-02
       */
      mtdOverrideDate?: string
      /**
       * Format: date
       * @description MTD - mid term date for offender calculated date.
       * @example 2019-04-02
       */
      mtdCalculatedDate?: string
      /**
       * Format: date
       * @description LTD - late term date for offender override date.
       * @example 2019-04-02
       */
      ltdOverrideDate?: string
      /**
       * Format: date
       * @description LTD - late term date for offender calculated date.
       * @example 2019-04-02
       */
      ltdCalculatedDate?: string
      /**
       * Format: date
       * @description Offender's home detention curfew end date - calculated as one day before the releaseDate.
       * @example 2019-04-01
       */
      homeDetentionCurfewEndDate?: string
      /**
       * Format: date
       * @description Top-up supervision start date for offender - calculated as licence end date + 1 day or releaseDate if licence end date not set.
       * @example 2019-04-01
       */
      topupSupervisionStartDate?: string
    }
    /** @description Telephone Details */
    Telephone: {
      /**
       * Format: int64
       * @description Phone Id
       * @example 2234232
       */
      phoneId?: number
      /**
       * @description Telephone number
       * @example 0114 2345678
       */
      number: string
      /**
       * @description Telephone type
       * @example TEL
       */
      type: string
      /**
       * @description Telephone extension number
       * @example 123
       */
      ext?: string
    }
    /** @description Represents the data required for receiving a prisoner transfer */
    RequestToTransferIn: {
      /**
       * Format: date-time
       * @description The time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2020-03-24T12:13:40
       */
      receiveTime: string
      /**
       * @description Additional comments about the release
       * @example Prisoner was transferred to a new prison
       */
      commentText?: string
      /**
       * @description Cell location
       * @example MDI-RECP
       */
      cellLocation?: string
    }
    /** @description Represents the data required for transferring a prisoner to temporary absence */
    RequestToTransferOutToTemporaryAbsence: {
      /**
       * @description The city to be released to. Not required if scheduleEventId is present
       * @example 18248
       */
      toCity?: string
      /**
       * Format: date-time
       * @description The time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2020-03-24T12:13:40
       */
      movementTime?: string
      /**
       * @description The escort type of the move.
       * @example PECS
       */
      escortType: string
      /**
       * @description Reason code for the transfer, reference domain is MOVE_RSN
       * @example C3
       */
      transferReasonCode: string
      /**
       * @description Additional comments about the release
       * @example Prisoner was transferred to a new prison
       */
      commentText?: string
      /** @description Flag indicate if bed should be released */
      shouldReleaseBed?: boolean
      /**
       * Format: int64
       * @description Optional scheduled schedule event this movement relates to
       */
      scheduleEventId?: number
    }
    /** @description Represents the data required for registering temporary absence arrival */
    RequestForTemporaryAbsenceArrival: {
      /**
       * @description Agency identifier
       * @example MDI
       */
      agencyId: string
      /**
       * @description Movement Reason Code
       * @example CA
       */
      movementReasonCode?: string
      /**
       * @description Additional comments
       * @example Prisoner was transferred from...
       */
      commentText?: string
      /**
       * Format: date-time
       * @description The date and time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2020-03-24T12:13:40
       */
      dateTime: string
    }
    /** @description Update to prisoner's smoker status */
    UpdateSmokerStatus: {
      /**
       * @description The smoker status code ('Y' for 'Yes', 'N' for 'No', 'V' for 'Vaper/NRT Only')
       * @example Y
       * @enum {string}
       */
      smokerStatus: 'Y' | 'N' | 'V'
    }
    /** @description Update to prisoner sexual orientation */
    UpdateSexualOrientation: {
      /**
       * @description The sexual orientation code
       * @example HET
       */
      sexualOrientation: string
    }
    /** @description Update to prisoner religion */
    UpdateReligion: {
      /**
       * @description The religion code
       * @example ZORO
       */
      religion: string
      /**
       * @description Reason for the religion change
       * @example Some information
       */
      comment?: string
      /**
       * Format: date
       * @description The date the religious belief is valid from (in YYYY-MM-DD format)
       */
      effectiveFromDate?: string
      /**
       * @description Has the religious belief been verified?
       * @default false
       * @example false
       */
      verified: boolean
    }
    /** @description Request release of prisoner */
    RequestToReleasePrisoner: {
      /**
       * @description Reason code for the release, reference domain is MOVE_RSN
       * @example CR
       * @enum {string}
       */
      movementReasonCode:
        | 'AR'
        | 'AU'
        | 'BD'
        | 'BL'
        | 'CE'
        | 'CR'
        | 'D1'
        | 'D2'
        | 'D3'
        | 'D4'
        | 'D5'
        | 'D6'
        | 'DA'
        | 'DD'
        | 'DE'
        | 'DEC'
        | 'DL'
        | 'DS'
        | 'ER'
        | 'ESCP'
        | 'ETR'
        | 'EX'
        | 'HC'
        | 'HD'
        | 'HE'
        | 'HP'
        | 'HR'
        | 'HU'
        | 'IF'
        | 'MRG'
        | 'NCS'
        | 'NG'
        | 'NP'
        | 'PD'
        | 'PF'
        | 'PX'
        | 'RE'
        | 'RW'
        | 'SC'
        | 'UAL'
      /**
       * Format: date-time
       * @description The time the release occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2020-03-24T12:13:40
       */
      releaseTime: string
      /**
       * @description Additional comments about the release
       * @example Prisoner was released on bail
       */
      commentText?: string
      /**
       * @description Agency Location code where prisoner is released to, default is OUT
       * @example OUT
       */
      toLocationCode?: string
    }
    /** @description Represents the data required for recalling a prisoner */
    RequestToRecall: {
      /**
       * @description Prison ID where recalled to
       * @example MDI
       */
      prisonId: string
      /**
       * Format: date-time
       * @description The time the recall occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2020-03-24T12:13:40
       */
      recallTime: string
      /**
       * @description Where the prisoner has been recalled from (default OUT)
       * @example SHEFCC
       */
      fromLocationId?: string
      /**
       * @description Reason for in movement (e.g. Recall from Intermittent Custody)
       * @example 24
       */
      movementReasonCode: string
      /**
       * @description Is this offender a youth
       * @example false
       */
      youthOffender?: boolean
      /**
       * @description Cell location where recalled prisoner should be housed, default will be reception
       * @example MDI-RECP
       */
      cellLocation?: string
      /**
       * @description Require imprisonment status
       * @example CUR_ORA
       */
      imprisonmentStatus?: string
    }
    /** @description Offender Phone Number Create Request */
    OffenderPhoneNumberCreateRequest: {
      /**
       * @description Type of offender phone number
       * @example BUS
       */
      phoneNumberType: string
      /**
       * @description The phone number
       * @example 01234 567 890
       */
      phoneNumber: string
      /**
       * @description The telephone extension
       * @example 123
       */
      extension?: string
    }
    /** @description Update to prisoner nationality */
    UpdateNationality: {
      /**
       * @description The nationality code
       * @example BRIT
       */
      nationality: string
      /**
       * @description Other nationalities
       * @example Irish
       */
      otherNationalities: string
    }
    /** @description Military record request object. Used to create or update a military record. */
    MilitaryRecordRequest: {
      /**
       * @description Code identifying the war zone where the service took place.
       * @example AFG
       */
      warZoneCode?: string
      /**
       * Format: date
       * @description Start date of the military service.
       * @example 2017-06-01
       */
      startDate: string
      /**
       * Format: date
       * @description End date of the military service, if applicable.
       * @example 2019-12-01
       */
      endDate?: string
      /**
       * @description Code indicating the discharge status from the UK military forces.
       * @example HON
       */
      militaryDischargeCode?: string
      /**
       * @description Code identifying the branch of the UK military in which the individual served.
       * @example ARM
       */
      militaryBranchCode: string
      /**
       * @description Additional notes or details about the military service.
       * @example Deployed to Afghanistan in support of Operation Herrick.
       */
      description?: string
      /**
       * @description Unit number in which the individual served.
       * @example 2nd Battalion, The Royal Anglian Regiment
       */
      unitNumber?: string
      /**
       * @description Location where the individual enlisted in the UK military.
       * @example Windsor, Berkshire
       */
      enlistmentLocation?: string
      /**
       * @description Location where the individual was discharged from the UK military.
       * @example Colchester, Essex
       */
      dischargeLocation?: string
      /**
       * @description Flag indicating if the individual was registered for UK selective military service (National Service).
       * @example false
       */
      selectiveServicesFlag: boolean
      /**
       * @description Code identifying the individual's military rank in the UK forces.
       * @example CPL_ARM
       */
      militaryRankCode?: string
      /**
       * @description Service number of the individual within the UK military.
       * @example 2345678
       */
      serviceNumber?: string
      /**
       * @description Code identifying any disciplinary actions taken against the individual during service.
       * @example CM
       */
      disciplinaryActionCode?: string
    }
    /** @description Cell move result */
    CellMoveResult: {
      /**
       * Format: int64
       * @description Unique, numeric booking id.
       * @example 1234134
       */
      bookingId: number
      /**
       * @description Identifier of agency that offender is associated with.
       * @example MDI
       */
      agencyId: string
      /**
       * Format: int64
       * @description Identifier of living unit (e.g. cell) that offender is assigned to.
       * @example 123123
       */
      assignedLivingUnitId?: number
      /**
       * @description Description of living unit (e.g. cell) that offender is assigned to.
       * @example MDI-1-1-3
       */
      assignedLivingUnitDesc?: string
      /**
       * Format: int32
       * @description Bed assignment sequence associated with the entry created for this cell move
       * @example 2
       */
      bedAssignmentHistorySequence?: number
    }
    /** @description Offender Email Address Create Request */
    OffenderEmailAddressCreateRequest: {
      /**
       * @description The email address
       * @example foo@bar.example
       */
      emailAddress: string
    }
    /** @description Request release of prisoner */
    RequestToDischargePrisoner: {
      /**
       * @description Agency Location code for hospital, agency type is HSHOSP
       * @example HAZLWD
       */
      hospitalLocationCode: string
      /**
       * Format: date-time
       * @description The time the release occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2020-03-24T12:13:40
       */
      dischargeTime?: string
      /**
       * @description Supporting Prison for POM, can be null if prisoner is already in a prison, for prisoners already released this field will be ignored
       * @example MDI
       */
      supportingPrisonId?: string
      /**
       * @description Where the prisoner has moved from e.g. court, can be null if prisoner is already in prison, for prisoners already in prison this field will be ignored
       * @example SHEFCC
       */
      fromLocationId?: string
    }
    /** @description Represents the data required for transferring a prisoner to a court */
    RequestToTransferOutToCourt: {
      /**
       * @description The court location to be moved to.
       * @example LEEDYC
       */
      toLocation: string
      /**
       * Format: date-time
       * @description The time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2020-03-24T12:13:40
       */
      movementTime: string
      /**
       * @description The escort type of the move.
       * @example PECS
       */
      escortType: string
      /**
       * @description Reason code for the transfer, reference domain is MOVE_RSN
       * @example CRT
       */
      transferReasonCode: string
      /**
       * @description Additional comments about the release
       * @example Prisoner was transferred to a new prison
       */
      commentText?: string
      /** @description Flag indicate if bed should be released */
      shouldReleaseBed?: boolean
      /**
       * Format: int64
       * @description Optional scheduled court hearing event this movement relates to
       */
      courtEventId?: number
    }
    /** @description Represents the data required for registering court return */
    RequestForCourtTransferIn: {
      /**
       * @description Agency identifier
       * @example MDI
       */
      agencyId: string
      /**
       * @description Movement Reason Code
       * @example CA
       */
      movementReasonCode?: string
      /**
       * @description Additional comments
       * @example Prisoner was transferred to a new prison
       */
      commentText?: string
      /**
       * Format: date-time
       * @description The date and time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2020-03-24T12:13:40
       */
      dateTime: string
    }
    /** @description Secondary language request. Used to add or update secondary language information. */
    CorePersonSecondaryLanguageRequest: {
      /**
       * @description Language reference code. Uses the `LANG` reference data domain.
       * @example ENG
       */
      language: string
      /**
       * @description Reading proficiency
       * @example true
       */
      canRead: boolean
      /**
       * @description Writing proficiency
       * @example true
       */
      canWrite: boolean
      /**
       * @description Speaking proficiency
       * @example true
       */
      canSpeak: boolean
    }
    /** @description Core Person Record Physical Attributes Request. Used to create or update physical attributes. */
    CorePersonPhysicalAttributesRequest: {
      /**
       * Format: int32
       * @description Height (in centimetres)
       */
      height?: number
      /**
       * Format: int32
       * @description Weight (in kilograms)
       */
      weight?: number
      /**
       * @description Code for hair type or colour. Note: uses PROFILE_TYPE of `HAIR`
       * @example BROWN
       */
      hairCode?: string
      /**
       * @description Code for facial hair type. Note: uses PROFILE_TYPE of `FACIAL_HAIR`
       * @example BEARDED
       */
      facialHairCode?: string
      /**
       * @description Code for face shape. Note: uses PROFILE_TYPE of `FACE`
       * @example ROUND
       */
      faceCode?: string
      /**
       * @description Code for build. Note: uses PROFILE_TYPE of `BUILD`
       * @example MEDIUM
       */
      buildCode?: string
      /**
       * @description Code for left eye colour. Note: uses PROFILE_TYPE of `L_EYE_C`
       * @example BLUE
       */
      leftEyeColourCode?: string
      /**
       * @description Code for right eye colour. Note: uses PROFILE_TYPE of `R_EYE_C`
       * @example BLUE
       */
      rightEyeColourCode?: string
      /** @description Shoe size */
      shoeSize?: string
    }
    /** @description Language Preferences Request. Used to create or update language preferences. */
    CorePersonLanguagePreferencesRequest: {
      /**
       * @description Preferred spoken language code. Uses the `LANG` reference data domain.
       * @example ENG
       */
      preferredSpokenLanguageCode?: string
      /**
       * @description Preferred written language code. Uses the `LANG` reference data domain.
       * @example ENG
       */
      preferredWrittenLanguageCode?: string
      /**
       * @description Is interpreter required
       * @example true
       */
      interpreterRequired?: boolean
    }
    /** @description Update to prisoner birth place (city or town of birth) */
    UpdateBirthPlace: {
      /**
       * @description Birth place (city or town of birth)
       * @example SHEFFIELD
       */
      birthPlace: string
    }
    /** @description Update to prisoner birth country */
    UpdateBirthCountry: {
      /**
       * @description Country code
       * @example GBR
       */
      countryCode: string
    }
    /** @description HDC Curfew Check */
    HdcChecks: {
      /**
       * @description HDC Checks passed flag
       * @example true
       */
      passed: boolean
      /**
       * Format: date
       * @description HDC Checks passed date. ISO-8601 format. YYYY-MM-DD
       * @example 2018-12-31
       */
      date: string
    }
    /** @description HDC Approval Status */
    ApprovalStatus: {
      /**
       * @description Approval status. Must be one of the 'HDC_APPROVE' reference codes
       * @example APPROVED
       */
      approvalStatus: string
      /**
       * @description Refused reason. Must be one of the 'HDC_REJ_RSN' reference codes
       * @example UNDER_14DAYS
       */
      refusedReason?: string
      /**
       * Format: date
       * @description Approval status date. ISO-8601 format. YYYY-MM-DD
       * @example 2018-12-31
       */
      date: string
    }
    /** @description Rejection details */
    CategoryRejectionDetail: {
      /**
       * Format: int64
       * @description Booking Id
       */
      bookingId: number
      /**
       * Format: int32
       * @description Sequence number
       */
      assessmentSeq: number
      /**
       * Format: date
       * @description Date of rejection
       */
      evaluationDate: string
      /** @description Department, reference code in domain 'ASSESS_COMM'. Normally 'REVIEW' */
      reviewCommitteeCode: string
      /** @description Overall comment */
      committeeCommentText?: string
    }
    /** @description Categorisation details */
    CategorisationUpdateDetail: {
      /**
       * Format: int64
       * @description Booking Id
       */
      bookingId: number
      /**
       * Format: int32
       * @description Sequence number
       */
      assessmentSeq: number
      /** @description Category code */
      category?: string
      /** @description The assessment committee code (reference code in domain 'ASSESS_COMM') */
      committee?: string
      /**
       * Format: date
       * @description Next review date for recategorisation
       */
      nextReviewDate?: string
      /** @description Initial categorisation comment */
      comment?: string
    }
    /** @description Approval details */
    CategoryApprovalDetail: {
      /**
       * Format: int64
       * @description Booking Id
       */
      bookingId: number
      /**
       * Format: int32
       * @description Sequence number. Only used to check consistency
       */
      assessmentSeq?: number
      /** @description Category code, reference code in domain 'SUP_LVL_TYPE' */
      category: string
      /**
       * Format: date
       * @description Date of approval
       */
      evaluationDate: string
      /**
       * @description Department, reference code in domain 'ASSESS_COMM'. Normally 'REVIEW'
       * @example REVIEW
       */
      reviewCommitteeCode: string
      /** @description Approved result category comment */
      approvedCategoryComment?: string
      /** @description Overall comment */
      committeeCommentText?: string
      /**
       * Format: date
       * @description Next review date (date of re-assessment, remains unchanged if not provided)
       */
      nextReviewDate?: string
      /** @description Approved placement prison */
      approvedPlacementAgencyId?: string
      /** @description Approved placement prison comment */
      approvedPlacementText?: string
    }
    /** @description Used for deactivating/reactivating an offence. A deactivated offence is not selectable in NOMIS */
    OffenceActivationDto: {
      offenceCode: string
      statuteCode: string
      activationFlag: boolean
    }
    /** @description HO Code */
    HOCodeDto: {
      /**
       * @description HO code
       * @example 825/99
       */
      code: string
      /**
       * @description HO code description
       * @example Ho Code 825/99
       */
      description: string
      /**
       * @description Active Y/N
       * @example Y
       */
      activeFlag: string
      /**
       * Format: date
       * @description Expiry Date
       * @example 2021-01-05
       */
      expiryDate?: string
    }
    /** @description Offence */
    OffenceDto: {
      /**
       * @description Reference Code
       * @example RR84070
       */
      code: string
      /** @description Description of offence */
      description: string
      /**
       * @description Statute code
       * @example RR84
       */
      statuteCode: components['schemas']['StatuteDto']
      /**
       * @description HO code
       * @example 825/99
       */
      hoCode?: components['schemas']['HOCodeDto']
      /**
       * @description Severity Ranking
       * @example 5
       */
      severityRanking: string
      /**
       * @description Active Y/N
       * @example Y
       */
      activeFlag: string
      /**
       * Format: int32
       * @description Sequence
       * @example 1
       */
      listSequence?: number
      /**
       * Format: date
       * @description Expiry Date if no longer active
       * @example 2021-04-01
       */
      expiryDate?: string
    }
    /** @description Statute */
    StatuteDto: {
      /**
       * @description Statute code
       * @example RR84
       */
      code: string
      /**
       * @description Statute code description
       * @example Statute RV98
       */
      description: string
      /**
       * @description Legislating Body Code
       * @example UK
       */
      legislatingBodyCode: string
      /**
       * @description Active Y/N
       * @example Y
       */
      activeFlag: string
    }
    /** @description The cancellation details. */
    PrisonMoveCancellation: {
      /**
       * @description The reason code for cancellation of the move.
       * @enum {string}
       */
      reasonCode: 'ADMI' | 'OCI' | 'TRANS'
    }
    /** @description Request move offender to cell swap */
    RequestMoveToCellSwap: {
      /**
       * @description The reason code for the move (from reason code domain CHG_HOUS_RSN) (defaults to ADM)
       * @example ADM
       */
      reasonCode?: string
      /**
       * Format: date-time
       * @description The date / time of the move (defaults to current)
       * @example 2020-03-24T12:13:40
       */
      dateTime?: string
    }
    /** @description Offender Booking Summary */
    OffenderBooking: {
      /**
       * Format: int64
       * @description Unique, numeric booking id.
       * @example 1234134
       */
      bookingId: number
      /**
       * @description Booking number.
       * @example A12121
       */
      bookingNo?: string
      /**
       * @description Offender number (e.g. NOMS Number).
       * @example A1234AA
       */
      offenderNo: string
      /**
       * @description Offender first name.
       * @example JOHN
       */
      firstName: string
      /**
       * @description Offender middle name.
       * @example ASHLEY
       */
      middleName?: string
      /**
       * @description Offender last name.
       * @example SMITH
       */
      lastName: string
      /**
       * Format: date
       * @description Offender date of birth.
       * @example 1980-05-02
       */
      dateOfBirth: string
      /**
       * Format: int32
       * @description Offender's current age.
       * @example 32
       */
      age: number
      /**
       * @description Identifier of agency that offender is associated with.
       * @example MDI
       */
      agencyId: string
      /**
       * Format: int64
       * @description Identifier of living unit (e.g. cell) that offender is assigned to.
       * @example 123123
       */
      assignedLivingUnitId?: number
      /**
       * @description Description of living unit (e.g. cell) that offender is assigned to.
       * @example MDI-1-1-3
       */
      assignedLivingUnitDesc?: string
      /**
       * Format: int64
       * @description Identifier of facial image of offender.
       * @example 1241241
       */
      facialImageId?: number
      /**
       * @description Identifier of officer (key worker) to which offender is assigned.
       * @example 354543
       */
      assignedOfficerUserId?: string
      /** @description List of offender's alias names. */
      aliases?: string[]
      /**
       * @description The Cat A/B/C/D of the offender
       * @example C
       * @enum {string}
       */
      categoryCode?: 'A' | 'B' | 'C' | 'D' | 'I' | 'J'
      /**
       * @description Convicted Status
       * @example Convicted
       * @enum {string}
       */
      convictedStatus?: 'Convicted' | 'Remand'
      /**
       * @description The imprisonment status of the offender
       * @example SENT
       */
      imprisonmentStatus?: string
      /** @description List of offender's current alert types. */
      alertsCodes: string[]
      /** @description List of offender's current alert codes. */
      alertsDetails: string[]
      /**
       * @description Legal Status
       * @example REMAND
       * @enum {string}
       */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
    }
    /** @description The amendments for the scheduled court hearing. */
    CourtHearingDateAmendment: {
      /**
       * Format: date-time
       * @description The date and time of the court hearing in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2022-12-01T14:40:00
       */
      hearingDateTime: string
    }
    /** @description Represents a court hearing for an offender court case. */
    CourtHearing: {
      /**
       * Format: int64
       * @description The court hearing identifier.
       * @example 123456789
       */
      id?: number
      /**
       * Format: date-time
       * @description The date and start time of the court hearing in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2020-02-28T14:40:00
       */
      dateTime?: string
      /** @description The location of the court for the hearing. */
      location?: components['schemas']['Agency']
    }
    /** @description Attendance details.  This is used to update the attendance details of an offender */
    UpdateAttendance: {
      /**
       * @description Attendance outcome, possible values are the codes in the 'PS_PA_OC' reference domain.
       * @example ATT
       * @enum {string}
       */
      eventOutcome: 'ABS' | 'ACCAB' | 'ATT' | 'CANC' | 'NREQ' | 'SUS' | 'UNACAB' | 'REST'
      /**
       * @description Possible values are the codes in the 'PERFORMANCE' reference domain, mandatory for eventOutcome 'ATT'.
       * @example ACCEPT
       * @enum {string}
       */
      performance?: 'ACCEPT' | 'GOOD' | 'POOR' | 'STANDARD' | 'UNACCEPT'
      /**
       * @description Free text comment, maximum length 240 characters.
       * @example Turned up very late
       */
      outcomeComment?: string
    }
    BookingActivity: {
      /** Format: int64 */
      bookingId?: number
      /** Format: int64 */
      activityId?: number
    }
    /** @description Attendance details.  This is used to update the attendance details of multiple bookings */
    UpdateAttendanceBatch: {
      /**
       * @description Attendance outcome, possible values are the codes in the 'PS_PA_OC' reference domain.
       * @example ATT
       * @enum {string}
       */
      eventOutcome: 'ABS' | 'ACCAB' | 'ATT' | 'CANC' | 'NREQ' | 'SUS' | 'UNACAB' | 'REST'
      /**
       * @description Possible values are the codes in the 'PERFORMANCE' reference domain, mandatory for eventOutcome 'ATT'.
       * @example ACCEPT
       * @enum {string}
       */
      performance?: 'ACCEPT' | 'GOOD' | 'POOR' | 'STANDARD' | 'UNACCEPT'
      /**
       * @description Free text comment, maximum length 240 characters.
       * @example Turned up very late
       */
      outcomeComment?: string
      /** @description set of booking and activity ids */
      bookingActivities: components['schemas']['BookingActivity'][]
    }
    /** @description The comment. May be empty or null */
    UpdateComment: {
      comment?: string
      commentOrNull?: string
    }
    /** @description Update prisoner's alias */
    UpdateAlias: {
      /**
       * @description Prisoner's first name
       * @example John
       */
      firstName: string
      /**
       * @description Prisoner's first middle name.
       * @example Middleone
       */
      middleName1?: string
      /**
       * @description Prisoner's second middle name.
       * @example Middleone
       */
      middleName2?: string
      /**
       * @description Prisoner's last name
       * @example Smith
       */
      lastName: string
      /**
       * Format: date
       * @description The prisoner's date of birth. Must be specified in YYYY-MM-DD format. Range allowed is 16-110 years
       * @example 1970-01-01
       */
      dateOfBirth: string
      /**
       * @description A code representing the prisoner's sex (from SEX reference domain).
       * @example F
       * @enum {string}
       */
      sex: 'M' | 'F' | 'NK' | 'NS' | 'REF'
      /**
       * @description A code representing the prisoner's title (from TITLE reference domain).
       * @example MR
       * @enum {string}
       */
      title?:
        | 'BR'
        | 'DAME'
        | 'DR'
        | 'FR'
        | 'IMAM'
        | 'LADY'
        | 'LORD'
        | 'MISS'
        | 'MR'
        | 'MRS'
        | 'MS'
        | 'RABBI'
        | 'REV'
        | 'SIR'
        | 'SR'
      /**
       * @description A code representing the prisoner's ethnicity (from ETHNICITY reference domain).
       * @example W1
       */
      ethnicity?: string
      /**
       * @description The name type (from NAME_TYPE reference domain)
       * @example CN
       * @enum {string}
       */
      nameType?: 'A' | 'CN' | 'MAID' | 'NICK'
    }
    /** @description Core Person Record Alias - DTO for use in returning alias data for the Core Person Record proxy */
    CorePersonRecordAlias: {
      /**
       * @description Prisoner number
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description Offender ID
       * @example 543548
       */
      offenderId: number
      /**
       * @description Boolean flag to indicate if the alias is a working name
       * @example true
       */
      isWorkingName: boolean
      /**
       * @description First name
       * @example John
       */
      firstName: string
      /**
       * @description Middle name 1
       * @example Middleone
       */
      middleName1?: string
      /**
       * @description Middle name 2
       * @example Middleone
       */
      middleName2?: string
      /**
       * @description Last name
       * @example Smith
       */
      lastName: string
      /**
       * Format: date
       * @description Date of birth
       * @example 1980-02-28
       */
      dateOfBirth: string
      /** @description Name type */
      nameType?: components['schemas']['ReferenceDataValue']
      /** @description Title */
      title?: components['schemas']['ReferenceDataValue']
      /** @description Sex */
      sex?: components['schemas']['ReferenceDataValue']
      /** @description Ethnicity */
      ethnicity?: components['schemas']['ReferenceDataValue']
    }
    /** @description Reference Data Value - basic summary of a reference data code selected as the value for a field */
    ReferenceDataValue: {
      /**
       * @description Domain
       * @example ETHNICITY
       */
      domain?: string
      /**
       * @description Code
       * @example W1
       */
      code: string
      /**
       * @description Description of the reference data code
       * @example White: Eng./Welsh/Scot./N.Irish/British
       */
      description: string
    }
    /** @description Offender Identifier Update Request */
    OffenderIdentifierUpdateRequest: {
      /**
       * @description The value of the offender identifier
       * @example 1231/XX/121
       */
      identifier: string
      /**
       * @description Issuing Authority Information
       * @example Important info
       */
      issuedAuthorityText?: string
    }
    /** @description Update Agency Request */
    RequestToUpdateAgency: {
      /**
       * @description Agency description.
       * @example Moorland (HMP & YOI)
       */
      description: string
      /**
       * @description Long description of the agency
       * @example Moorland (HMP & YOI)
       */
      longDescription?: string
      /**
       * @description Agency type.  Reference domain is AGY_LOC_TYPE
       * @example INST
       * @enum {string}
       */
      agencyType:
        | 'CRC'
        | 'POLSTN'
        | 'INST'
        | 'COMM'
        | 'APPR'
        | 'CRT'
        | 'POLICE'
        | 'IMDC'
        | 'TRN'
        | 'OUT'
        | 'YOT'
        | 'SCH'
        | 'STC'
        | 'HOST'
        | 'AIRPORT'
        | 'HSHOSP'
        | 'HOSPITAL'
        | 'PECS'
        | 'PAR'
        | 'PNP'
        | 'PSY'
      /**
       * @description Indicates the Agency is active.  Note: if set false, the current date will be the deactivation date
       * @example true
       */
      active?: boolean
      /**
       * @description Court Type.  Reference domain is JURISDICTION
       * @example CC
       * @enum {string}
       */
      courtType: 'CACD' | 'CB' | 'CC' | 'CO' | 'DCM' | 'GCM' | 'IMM' | 'MC' | 'OTHER' | 'YC'
    }
    /** @description Update Address Request */
    RequestToUpdateAddress: {
      /**
       * @description Address Type. Note: Reference domain is ADDR_TYPE
       * @example BUS
       */
      addressType: string
      /**
       * @description Flat
       * @example 3B
       */
      flat?: string
      /**
       * @description Premise
       * @example Liverpool Prison
       */
      premise: string
      /**
       * @description Street
       * @example Slinn Street
       */
      street?: string
      /**
       * @description Locality
       * @example Brincliffe
       */
      locality?: string
      /**
       * @description Town/City. Note: Reference domain is CITY
       * @example Liverpool
       */
      town?: string
      /**
       * @description Postal Code
       * @example LI1 5TH
       */
      postalCode?: string
      /**
       * @description County. Note: Reference domain is COUNTY
       * @example HEREFORD
       */
      county?: string
      /**
       * @description Country. Note: Reference domain is COUNTRY
       * @example ENG
       */
      country?: string
      /**
       * @description Comment
       * @example This is a comment text
       */
      comment?: string
      /**
       * @description Primary Address
       * @example true
       */
      primary: boolean
      /**
       * @description No Fixed Address
       * @example false
       */
      noFixedAddress: boolean
      /**
       * Format: date
       * @description Date Added
       * @example 2005-05-12
       */
      startDate?: string
      /**
       * Format: date
       * @description Date ended
       * @example 2021-02-12
       */
      endDate?: string
    }
    /** @description Update Phone Request */
    RequestToUpdatePhone: {
      /** @description Telephone number */
      number: string
      /** @description Telephone type */
      type: string
      /** @description Telephone extension number */
      ext?: string
    }
    /** @description Transaction Details */
    CreateTransaction: {
      /**
       * @description Valid transaction type for the prison_id
       * @example CANT
       * @enum {string}
       */
      type: 'CANT' | 'REFND' | 'PHONE' | 'MRPR' | 'MTDS' | 'DTDS' | 'CASHD' | 'RELA' | 'RELS'
      /**
       * @description Description of the Transaction
       * @example Canteen Purchase of £16.34
       */
      description?: string
      /**
       * Format: int64
       * @description Amount of transaction in pence, hence 1634 is £16.34
       * @example 1634
       */
      amount: number
      /**
       * @description Client Transaction Id
       * @example CL123212
       */
      client_transaction_id: string
      /**
       * @description A reference unique to the client making the post. Maximum size 64 characters, only alphabetic, numeric, '-' and '_' are allowed
       * @example CLIENT121131-0_11
       */
      client_unique_ref: string
    }
    /** @description Transaction Response */
    Transaction: {
      /**
       * @description ID of created transaction
       * @example 6179604-1
       */
      id: string
    }
    /** @description Transaction Details */
    StorePaymentRequest: {
      /**
       * @description Valid payment type for the prison
       * @example ADJ
       * @enum {string}
       */
      type: 'A_EARN,ADJ'
      /**
       * @description Description of the payment
       * @example Adjustment
       */
      description?: string
      /**
       * Format: int64
       * @description Amount of the payment in pence, hence 1634 is £16.34
       * @example 1634
       */
      amount: number
      /**
       * @description Client transaction identifier
       * @example CL123212
       */
      client_transaction_id: string
    }
    /** @description Payment Response */
    PaymentResponse: {
      /**
       * @description Message returned from a payment
       * @example Payment accepted
       */
      message: string
    }
    /** @description Code Description */
    CodeDescription: {
      /** @description Code */
      code?: string
      /** @description Description */
      desc?: string
    }
    /** @description Transfer Response */
    Transfer: {
      /** @description Transaction */
      transaction?: components['schemas']['Transaction']
      /** @description Current Location */
      current_location?: components['schemas']['CodeDescription']
    }
    /** @description User Details */
    UserDetail: {
      /**
       * Format: int64
       * @description Staff Id
       * @example 231232
       */
      staffId: number
      /**
       * @description Username
       * @example DEMO_USER1
       */
      username: string
      /**
       * @description First Name
       * @example John
       */
      firstName: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName: string
      /**
       * Format: int64
       * @description Image Thumbnail Id
       * @example 2342341224
       */
      thumbnailId?: number
      /**
       * @description Current Active Caseload
       * @example MDI
       */
      activeCaseLoadId?: string
      /**
       * @description Status of the User Account
       * @example ACTIVE
       * @enum {string}
       */
      accountStatus: 'ACTIVE' | 'INACT' | 'SUS' | 'CAREER' | 'MAT' | 'SAB' | 'SICK'
      /**
       * Format: date-time
       * @description Date the user account was locked
       * @example 2018-06-04T12:35:00
       */
      lockDate: string
      /**
       * Format: date-time
       * @description Date the user account has expired
       * @example 2018-01-04T12:35:00
       */
      expiryDate?: string
      /**
       * @description The User account is locked
       * @example false
       */
      lockedFlag?: boolean
      /**
       * @description Indicates the user account has expired
       * @example true
       */
      expiredFlag?: boolean
      /**
       * @description Indicate if the account is active
       * @example true
       */
      active: boolean
    }
    /** @description Staff Details */
    StaffDetail: {
      /**
       * Format: int64
       * @description Unique identifier for staff member.
       * @example 423142
       */
      staffId: number
      /**
       * @description Staff member's first name.
       * @example JOHN
       */
      firstName: string
      /**
       * @description Staff member's last name.
       * @example SMITH
       */
      lastName: string
      /**
       * @description Status of staff member.
       * @example ACTIVE
       * @enum {string}
       */
      status: 'ACTIVE' | 'INACTIVE'
      /**
       * Format: int64
       * @description Identifier for staff member image.
       * @example 231232
       */
      thumbnailId?: number
      /**
       * @description Gender of Staff Member
       * @example M
       * @enum {string}
       */
      gender?: 'M' | 'F' | 'NK' | 'NS' | 'REF'
      /**
       * Format: date
       * @description Date of Birth of Staff Member
       * @example 1970-01-02
       */
      dateOfBirth?: string
    }
    UpdatePrisonerDetails: {
      /** @example John */
      firstName: string
      /** @example Smith */
      lastName: string
    }
    /** @description Prison details */
    PrisonDetails: {
      /**
       * @description ID of prison
       * @example MDI
       */
      prisonId: string
      /**
       * @description Name of prison
       * @example Moorland (HMP)
       */
      prison: string
    }
    /** @description Prisoner Schedule */
    PrisonerSchedule: {
      /** @description Offender number (e.g. NOMS Number) */
      offenderNo: string
      /**
       * Format: int64
       * @description Activity id if any. Used to attend or pay the event
       */
      eventId?: number
      /**
       * Format: int64
       * @description Booking id for offender
       */
      bookingId?: number
      /**
       * Format: int64
       * @description The number which (uniquely) identifies the internal location associated with the Scheduled Event (Prisoner Schedule)
       */
      locationId: number
      /** @description Offender first name */
      firstName: string
      /** @description Offender last name */
      lastName: string
      /** @description Offender cell */
      cellLocation: string
      /** @description Event code */
      event: string
      /** @description Event type, e.g. VISIT, APP, PRISON_ACT */
      eventType: string
      /** @description Description of event code */
      eventDescription: string
      /** @description Location of the event */
      eventLocation: string
      /**
       * Format: int64
       * @description Id of an internal event location
       */
      eventLocationId?: number
      /** @description The event's status. Includes 'CANC', meaning cancelled for 'VISIT' */
      eventStatus: string
      /** @description Comment */
      comment?: string
      /**
       * Format: date-time
       * @description Date and time at which event starts
       */
      startTime?: string
      /**
       * Format: date-time
       * @description Date and time at which event ends
       */
      endTime?: string
      /** @description Attendance, possible values are the codes in the 'PS_PA_OC' reference domain */
      eventOutcome?: string
      /** @description Possible values are the codes in the 'PERFORMANCE' reference domain */
      performance?: string
      /** @description No-pay reason */
      outcomeComment?: string
      /** @description Activity paid flag */
      paid?: boolean
      /** @description Amount paid per activity session in pounds */
      payRate?: number
      /** @description Activity excluded flag */
      excluded?: boolean
      /**
       * @description Activity time slot
       * @enum {string}
       */
      timeSlot?: 'AM' | 'PM' | 'ED'
      /** @description The code for the activity location */
      locationCode?: string
      /** @description Event scheduled has been suspended */
      suspended?: boolean
    }
    PrisonerActivitiesCount: {
      /** Format: int64 */
      total: number
      /** Format: int64 */
      suspended: number
      /** Format: int64 */
      notRecorded: number
    }
    /** @description Prisoner Search Criteria */
    PrisonerDetailSearchCriteria: {
      /** @description List of offender Numbers (NOMS ID) */
      offenderNos?: string[]
      /**
       * @description The first name of the offender.
       * @example John
       */
      firstName?: string
      /**
       * @description Offender's gender code (F - Female, M - Male, NK - Not Known or NS - Not Specified).
       * @example F
       * @enum {string}
       */
      gender?: 'M' | 'F' | 'NK' | 'NS' | 'ALL'
      /**
       * @description The middle name(s) of the offender.
       * @example James
       */
      middleNames?: string
      /**
       * @description The last name of the offender.
       * @example Smith
       */
      lastName?: string
      /**
       * @description Offender's location filter (IN, OUT or ALL) - defaults to ALL.
       * @example ALL
       * @enum {string}
       */
      location?: 'IN' | 'OUT' | 'ALL'
      /**
       * @description The offender's PNC (Police National Computer) number.
       * @example 123/1231
       */
      pncNumber?: string
      /**
       * @description The offender's CRO (Criminal Records Office) number.
       * @example 12312312
       */
      croNumber?: string
      /**
       * Format: date
       * @description The offender's date of birth. Cannot be used in conjunction with <i>dobFrom</i> or <i>dobTo</i>. Must be specified using YYYY-MM-DD format.
       * @example 2001-01-15
       */
      dob?: string
      /**
       * Format: date
       * @description Start date for offender date of birth search. If <i>dobTo</i> is not specified, an implicit <i>dobTo</i> value of <i>dobFrom</i> + 10 years will be applied. If <i>dobTo</i> is specified, it will be adjusted, if necessary, to ensure it is not more than 10 years after <i>dobFrom</i>. Cannot be used in conjunction with <i>dob</i>. Must be specified using YYYY-MM-DD format.
       * @example 1999-05-25
       */
      dobFrom?: string
      /**
       * Format: date
       * @description End date for offender date of birth search. If <i>dobFrom</i> is not specified, an implicit <i>dobFrom</i> value of <i>dobTo</i> - 10 years will be applied. Cannot be used in conjunction with <i>dob</i>. Must be specified using YYYY-MM-DD format.
       * @example 2005-12-31
       */
      dobTo?: string
      /**
       * Format: int32
       * @description Max Date Range, applied to <i>dobFrom</i> or <i>dobTo</i>, default is 10, max allowed is 10
       * @example 10
       */
      maxYearsRange?: number
      /** @description If true the result set should include a row for every matched alias.  If the request includes some combination of firstName, lastName and dateOfBirth then this will be a subset of the OFFENDERS records for one or more offenders. Otherwise it will be every OFFENDERS record for each match on the other search criteria. Default is false. */
      includeAliases?: boolean
      /**
       * @description If <i>true</i>, the search will use partial, start-of-name matching of offender names (where provided). For example, if <i>lastName</i> criteria of 'AD' is specified, this will match an offender whose last name is 'ADAMS' but not an offender whose last name is 'HADAD'. This will typically increase the number of matching offenders found. This parameter can be used with any other search processing parameter (e.g. <i>prioritisedMatch</i> or <i>anyMatch</i>).
       * @example false
       */
      partialNameMatch?: boolean
      /**
       * @description If <i>true</i>, offenders that match any of the specified criteria will be returned. The default search behaviour is to only return offenders that match <i>all</i> of the specified criteria. If the <i>prioritisedMatch</i> parameter is also set <i>true</i>, this parameter will only impact the behaviour of searching using offender name and date of birth criteria.
       * @example false
       */
      anyMatch?: boolean
      /**
       * @description If <i>true</i>, search criteria prioritisation is used and searching/matching will stop as soon as one or more matching offenders are found. The criteria priority is:<br/><br/>1. <i>offenderNo</i><br/> 2. <i>pncNumber</i><br/>3. <i>croNumber</i><br/>4. <i>firstName</i>, <i>lastName</i>, <i>dob</i> <br/>5. <i>dobFrom</i>, <i>dobTo</i><br/><br/>As an example of how this works, if this parameter is set <i>true</i> and an <i>offenderNo</i> is specified and an offender having this offender number is found, searching will stop and that offender will be returned immediately. If no offender matching the specified <i>offenderNo</i> is found, the search will be repeated using the next priority criteria (<i>pncNumber</i>) and so on. Note that offender name and date of birth criteria have the same priority and will be used together to search for matching offenders.
       * @example false
       */
      prioritisedMatch?: boolean
    }
    /** @description Prisoner Details */
    PrisonerDetail: {
      /**
       * @description The prisoner's unique offender number (aka NOMS Number in the UK).
       * @example A0000AA
       */
      offenderNo: string
      /**
       * @description The prisoner's title.
       * @example Earl
       */
      title?: string
      /**
       * @description The prisoner's name suffix.
       * @example Mac
       */
      suffix?: string
      /**
       * @description The prisoner's first name.
       * @example Thorfinn
       */
      firstName: string
      /**
       * @description The prisoner's middle name(s).
       * @example Skull-splitter
       */
      middleNames?: string
      /**
       * @description The prisoner's last name.
       * @example Torf-Einarsson
       */
      lastName: string
      /**
       * Format: date
       * @description The prisoner's date of birth (in YYYY-MM-DD format).
       * @example 1960-02-29
       */
      dateOfBirth: string
      /**
       * @description The prisoner's gender.
       * @example Female
       */
      gender: string
      /**
       * @description The prisoner's gender code.
       * @example F
       */
      sexCode: string
      /**
       * @description The prisoner's nationality.
       * @example Scottish
       */
      nationalities?: string
      /**
       * @description Flag (Y or N) to indicate if prisoner is currently in prison.
       * @example N
       */
      currentlyInPrison: string
      /**
       * Format: int64
       * @description ID of prisoner's latest booking.
       * @example 1
       */
      latestBookingId?: number
      /**
       * @description Latest location ID of a prisoner (if in prison).
       * @example WRI
       */
      latestLocationId?: string
      /**
       * @description Name of the prison where the prisoner resides (if in prison).
       * @example Whitemoor (HMP)
       */
      latestLocation?: string
      /**
       * @description Name of the location where the prisoner resides (if in prison)
       * @example WRI-B-3-018
       */
      internalLocation?: string
      /**
       * @description The prisoner's PNC (Police National Computer) number.
       * @example 01/000000A
       */
      pncNumber?: string
      /**
       * @description The prisoner's CRO (Criminal Records Office) number.
       * @example 01/0001/01A
       */
      croNumber?: string
      /**
       * @description The prisoner's ethnicity.
       * @example White: British
       */
      ethnicity?: string
      /**
       * @description The prisoner's ethnicity code.
       * @example W1
       */
      ethnicityCode?: string
      /**
       * @description The prisoner's country of birth.
       * @example Norway
       */
      birthCountry?: string
      /**
       * @description The prisoner's religion.
       * @example Pagan
       */
      religion?: string
      /**
       * @description The prisoner's religion code.
       * @example PAG
       */
      religionCode?: string
      /**
       * @description Status code of prisoner's latest conviction.
       * @example Convicted
       * @enum {string}
       */
      convictedStatus?: 'Convicted' | 'Remand'
      /**
       * @description Legal Status
       * @example REMAND
       * @enum {string}
       */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
      /**
       * @description The prisoner's imprisonment status.
       * @example LIFE
       */
      imprisonmentStatus?: string
      /**
       * @description The prisoner's imprisonment status description.
       * @example Service Life Imprisonment
       */
      imprisonmentStatusDesc?: string
      /**
       * Format: date
       * @description Date prisoner was received into the prison.
       * @example 1980-01-01
       */
      receptionDate?: string
      /**
       * @description The prisoner's marital status.
       * @example Single
       */
      maritalStatus?: string
      /**
       * @description The prisoner's current working first name.
       * @example Thorfinn
       */
      currentWorkingFirstName: string
      /**
       * @description The prisoner's current working last name.
       * @example Torf-Einarsson
       */
      currentWorkingLastName: string
      /**
       * Format: date
       * @description The prisoner's current working date of birth (in YYYY-MM-DD format).
       * @example 1960-02-29
       */
      currentWorkingBirthDate: string
    }
    /** @description Represents the data required receiving a prisoner under a new booking */
    RequestForNewBooking: {
      /**
       * @description Received Prison ID
       * @example MDI
       */
      prisonId: string
      /**
       * Format: date-time
       * @description The time the booking in occurred, if not supplied it will be the current time
       * @example 2020-03-24T12:13:40
       */
      bookingInTime: string
      /**
       * @description Where the prisoner has moved from (default OUT)
       * @example SHEFCC
       */
      fromLocationId?: string
      /**
       * @description Reason for in movement (e.g. Unconvicted Remand)
       * @example N
       */
      movementReasonCode: string
      /**
       * @description Is this offender a youth
       * @example false
       */
      youthOffender?: boolean
      /**
       * @description Cell location where recalled prisoner should be housed, default will be reception
       * @example MDI-RECP
       */
      cellLocation?: string
      /**
       * @description Require imprisonment status (e.g Adult Imprisonment Without Option CJA03)
       * @example SENT03
       */
      imprisonmentStatus?: string
    }
    /** @description Represents the data required for creating a new prisoner */
    RequestToCreate: {
      /**
       * @description The offender's PNC (Police National Computer) number.
       * @example 03/11999M
       */
      pncNumber?: string
      /**
       * @description The offender's last name.
       * @example Mark
       */
      lastName: string
      /**
       * @description The offender's first name.
       * @example John
       */
      firstName: string
      /**
       * @description The offender's middle name.
       * @example Luke
       */
      middleName1?: string
      /**
       * @description An additional middle name for the offender.
       * @example Matthew
       */
      middleName2?: string
      /**
       * @description A code representing the offender's title (from TITLE reference domain).
       * @example MR
       * @enum {string}
       */
      title?:
        | 'BR'
        | 'DAME'
        | 'DR'
        | 'FR'
        | 'IMAM'
        | 'LADY'
        | 'LORD'
        | 'MISS'
        | 'MR'
        | 'MRS'
        | 'MS'
        | 'RABBI'
        | 'REV'
        | 'SIR'
        | 'SR'
      /**
       * @description A code representing a suffix to apply to offender's name (from SUFFIX reference domain).
       * @example JR
       * @enum {string}
       */
      suffix?: 'I' | 'II' | 'III' | 'IV' | 'IX' | 'V' | 'VI' | 'VII' | 'VIII' | 'JR' | 'SR'
      /**
       * Format: date
       * @description The offender's date of birth. Must be specified in YYYY-MM-DD format. Range allowed is 16-110 years
       * @example 1970-01-01
       */
      dateOfBirth: string
      /**
       * @description A code representing the offender's gender (from the SEX reference domain).
       * @example M
       * @enum {string}
       */
      gender: 'M' | 'F' | 'NK' | 'NS' | 'REF'
      /**
       * @description A code representing the offender's ethnicity (from the ETHNICITY reference domain).
       * @example W1
       * @enum {string}
       */
      ethnicity?:
        | 'A9'
        | 'B1'
        | 'B2'
        | 'B9'
        | 'M1'
        | 'M2'
        | 'M3'
        | 'M9'
        | 'NS'
        | 'O1'
        | 'O2'
        | 'O9'
        | 'W1'
        | 'W2'
        | 'W3'
        | 'W8'
        | 'W9'
      /** @description The offender's CRO (Criminal Records Office) number. */
      croNumber?: string
      /** @description Optional prison booking data for the offender. */
      booking?: components['schemas']['RequestForNewBooking']
    }
    /** @description Offender Identifier Create Request */
    OffenderIdentifierCreateRequest: {
      /**
       * @description Type of offender identifier
       * @example PNC
       */
      identifierType: string
      /**
       * @description The value of the offender identifier
       * @example 1231/XX/121
       */
      identifier: string
      /**
       * @description Issuing Authority Information
       * @example Important info
       */
      issuedAuthorityText?: string
    }
    /** @description Create a prisoner alias */
    CreateAlias: {
      /**
       * @description Prisoner's first name
       * @example John
       */
      firstName: string
      /**
       * @description Prisoner's first middle name.
       * @example Middleone
       */
      middleName1?: string
      /**
       * @description Prisoner's second middle name.
       * @example Middletwo
       */
      middleName2?: string
      /**
       * @description Prisoner's last name
       * @example Smith
       */
      lastName: string
      /**
       * Format: date
       * @description The prisoner's date of birth. Must be specified in YYYY-MM-DD format. Range allowed is 16-110 years
       * @example 1970-01-01
       */
      dateOfBirth: string
      /**
       * @description A code representing the prisoner's sex (from SEX reference domain).
       * @example F
       * @enum {string}
       */
      sex: 'M' | 'F' | 'NK' | 'NS' | 'REF'
      /**
       * @description A code representing the prisoner's title (from TITLE reference domain).
       * @example MR
       * @enum {string}
       */
      title?:
        | 'BR'
        | 'DAME'
        | 'DR'
        | 'FR'
        | 'IMAM'
        | 'LADY'
        | 'LORD'
        | 'MISS'
        | 'MR'
        | 'MRS'
        | 'MS'
        | 'RABBI'
        | 'REV'
        | 'SIR'
        | 'SR'
      /**
       * @description A code representing the prisoner's ethnicity (from ETHNICITY reference domain).
       * @example W1
       */
      ethnicity?: string
      /**
       * @description The name type (from NAME_TYPE reference domain)
       * @example CN
       * @enum {string}
       */
      nameType?: 'A' | 'CN' | 'MAID' | 'NICK'
      /**
       * @description Boolean flag to indicate if the alias is a working name
       * @example true
       */
      isWorkingName: boolean
    }
    /** @description Create a prisoner address */
    CreateAddress: {
      /**
       * @description Flat
       * @example 3B
       */
      flat?: string
      /**
       * @description Premise
       * @example Liverpool Prison
       */
      premise?: string
      /**
       * @description Street
       * @example Slinn Street
       */
      street?: string
      /**
       * @description Locality
       * @example Brincliffe
       */
      locality?: string
      /**
       * @description Town/City code. Note: Reference domain is CITY
       * @example 17743
       */
      townCode?: string
      /**
       * @description County code. Note: Reference domain is COUNTY
       * @example HEREFORD
       */
      countyCode?: string
      /**
       * @description Country code. Note: Reference domain is COUNTRY
       * @example ENG
       */
      countryCode: string
      /**
       * @description Postal code
       * @example LI1 5TH
       */
      postalCode?: string
      /**
       * @description Primary address
       * @example true
       */
      primary?: boolean
      /**
       * @description Mail address
       * @example true
       */
      mail?: boolean
      /**
       * @description No fixed address
       * @example false
       */
      noFixedAddress?: boolean
      /**
       * Format: date
       * @description Date address is in use from
       * @example 2005-05-12
       */
      startDate: string
      /**
       * Format: date
       * @description Date address is in use to
       * @example 2005-05-12
       */
      endDate?: string
      /**
       * @description Address usages
       * @example HOME
       */
      addressUsages: string[]
    }
    /** @description Represents an adjudication hearing at the offender level. */
    OffenderAdjudicationHearing: {
      agencyId: string
      /** @description Display Prisoner Number (UK is NOMS ID) */
      offenderNo: string
      /**
       * Format: int64
       * @description OIC Hearing ID
       * @example 1985937
       */
      hearingId: number
      /**
       * @description Hearing Type
       * @example Governor's Hearing Adult
       */
      hearingType?: string
      /**
       * Format: date-time
       * @description Hearing Time
       * @example 2017-03-17T08:30:00
       */
      startTime?: string
      /**
       * Format: int64
       * @description The internal location id of the hearing
       * @example 789448
       */
      internalLocationId: number
      /**
       * @description The internal location description of the hearing
       * @example PVI-RES-MCASU-ADJUD
       */
      internalLocationDescription?: string
      /**
       * @description The status of the hearing, SCH, COMP or EXP
       * @example COMP
       */
      eventStatus?: string
    }
    /** @description Offender Sentence Detail */
    OffenderSentenceDetail: {
      /**
       * Format: int64
       * @description Offender booking id.
       * @example 12341321
       */
      bookingId: number
      /**
       * @description Offender Unique Reference
       * @example A1000AA
       */
      offenderNo: string
      /**
       * @description First Name
       * @example John
       */
      firstName: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName: string
      /**
       * @description Agency Id
       * @example LEI
       */
      agencyLocationId: string
      /**
       * @description Is this the most recent active booking
       * @example true
       */
      mostRecentActiveBooking: boolean
      /** @description Offender Sentence Detail Information */
      sentenceDetail?: components['schemas']['SentenceCalcDates']
      /**
       * Format: date
       * @description Offender date of birth.
       */
      dateOfBirth: string
      /** @description Agency Description */
      agencyLocationDesc: string
      /** @description Description of the location within the prison */
      internalLocationDesc: string
      /**
       * Format: int64
       * @description Identifier of facial image of offender.
       */
      facialImageId?: number
    }
    /** @description Home Detention Curfew information */
    HomeDetentionCurfew: {
      /**
       * @description HDC Checks passed flag
       * @example true
       */
      passed?: boolean
      /**
       * Format: date
       * @description HDC Checks passed date. ISO-8601 format. YYYY-MM-DD
       * @example 2018-12-31
       */
      checksPassedDate?: string
      /**
       * @description Approval status. Will be one of the 'HDC_APPROVE' reference codes
       * @example APPROVED
       */
      approvalStatus?: string
      /**
       * @description Refused reason. Will be one of the 'HDC_REJ_RSN' reference codes
       * @example UNDER_14DAYS
       */
      refusedReason?: string
      /**
       * Format: date
       * @description Approval status date. ISO-8601 format. YYYY-MM-DD
       * @example 2018-12-31
       */
      approvalStatusDate: string
      /**
       * Format: int64
       * @description Offender booking ID
       * @example 123
       */
      bookingId?: number
    }
    /** @description Offender Key Dates */
    OffenderKeyDates: {
      /**
       * Format: date
       * @description HDCED - date on which offender will be eligible for home detention curfew.
       * @example 2020-02-03
       */
      homeDetentionCurfewEligibilityDate?: string
      /**
       * Format: date
       * @description ETD - early term date for offender.
       * @example 2020-02-03
       */
      earlyTermDate?: string
      /**
       * Format: date
       * @description MTD - mid term date for offender.
       * @example 2020-02-03
       */
      midTermDate?: string
      /**
       * Format: date
       * @description LTD - late term date for offender.
       * @example 2020-02-03
       */
      lateTermDate?: string
      /**
       * Format: date
       * @description DPRRD - Detention training order post recall release date
       * @example 2020-02-03
       */
      dtoPostRecallReleaseDate?: string
      /**
       * Format: date
       * @description ARD - calculated automatic (unconditional) release date for offender.
       * @example 2020-02-03
       */
      automaticReleaseDate?: string
      /**
       * Format: date
       * @description CRD - calculated conditional release date for offender.
       * @example 2020-02-03
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description PED - date on which offender is eligible for parole.
       * @example 2020-02-03
       */
      paroleEligibilityDate?: string
      /**
       * Format: date
       * @description NPD - calculated non-parole date for offender (relating to the 1991 act).
       * @example 2020-02-03
       */
      nonParoleDate?: string
      /**
       * Format: date
       * @description LED - date on which offender licence expires.
       * @example 2020-02-03
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description PRRD - calculated post-recall release date for offender.
       * @example 2020-02-03
       */
      postRecallReleaseDate?: string
      /**
       * Format: date
       * @description SED - date on which sentence expires.
       * @example 2020-02-03
       */
      sentenceExpiryDate?: string
      /**
       * Format: date
       * @description TUSED - top-up supervision expiry date for offender.
       * @example 2020-02-03
       */
      topupSupervisionExpiryDate?: string
      /**
       * Format: date
       * @description ERSED - Early Removal Scheme Eligibility Date
       * @example 2020-02-03
       */
      earlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description Effective sentence end date.
       * @example 2020-02-03
       */
      effectiveSentenceEndDate: string
      /**
       * @description Sentence length in the format 00 years/00 months/00 days.
       * @example 11/00/00
       */
      sentenceLength: string
      /**
       * Format: date
       * @description HDCAD - Home Detention Curfew Approved date
       * @example 2020-02-03
       */
      homeDetentionCurfewApprovedDate?: string
      /**
       * Format: date
       * @description Tarrif - Tarrif date
       * @example 2020-02-03
       */
      tariffDate?: string
      /**
       * Format: date
       * @description Tarrif Expiry date
       * @example 2020-02-03
       */
      tariffExpiredRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description APD - Approved Parole date
       * @example 2020-02-03
       */
      approvedParoleDate?: string
      /**
       * Format: date
       * @description ROTL = Release on temporary licence date
       * @example 2020-02-03
       */
      releaseOnTemporaryLicenceDate?: string
    }
    /** @description Update Offender Dates Request */
    RequestToUpdateOffenderDates: {
      /**
       * Format: uuid
       * @description UUID of the calculation performed by CRD.
       */
      calculationUuid: string
      /**
       * Format: date-time
       * @description Timestamp when the calculation was performed
       */
      calculationDateTime?: string
      /** @description DPS/NOMIS user who submitted the calculated dates. */
      submissionUser: string
      /** @description Key dates to be updated for the offender. */
      keyDates: components['schemas']['OffenderKeyDates']
      /** @description Comment to be associated with the sentence calculation, if not set a default comment is used */
      comment?: string
      /** @description The reason the sentence calculation was performed, if not set the default reason is used */
      reason?: string
      /** @description Is true, when there are no dates to be recorded in NOMIS */
      noDates?: boolean
    }
    /** @description Prisoner with categorisation data */
    OffenderCategorise: {
      /** @description Display Prisoner Number */
      offenderNo: string
      /** Format: int64 */
      bookingId: number
      /** @description Prisoner First Name */
      firstName: string
      /** @description Prisoner Last Name */
      lastName: string
      /**
       * Format: date
       * @description Categorisation date if any
       */
      assessmentDate?: string
      /**
       * Format: date
       * @description Date categorisation was approved if any
       */
      approvalDate?: string
      /**
       * Format: int32
       * @description Sequence number within booking
       */
      assessmentSeq?: number
      /**
       * Format: int64
       * @description assessment type
       */
      assessmentTypeId?: number
      /**
       * @description Categorisation status
       * @enum {string}
       */
      assessStatus?: 'P' | 'A' | 'I'
      /** @description Categoriser First Name */
      categoriserFirstName?: string
      /** @description Categoriser Last Name */
      categoriserLastName?: string
      /** @description Approver First Name if any */
      approverFirstName?: string
      /** @description Approver Last Name if any */
      approverLastName?: string
      /** @description Categorisation */
      category?: string
      /**
       * Format: date
       * @description Next Review Date - for recategorisations
       */
      nextReviewDate?: string
      /**
       * @description Where in the categorisation workflow the prisoner is
       * @enum {string}
       */
      status: 'UNCATEGORISED' | 'AWAITING_APPROVAL'
    }
    /** @description Categorisation details */
    CategorisationDetail: {
      /**
       * Format: int64
       * @description Booking Id
       */
      bookingId: number
      /** @description Category code */
      category: string
      /** @description The assessment committee code (reference code in domain 'ASSESS_COMM') */
      committee: string
      /**
       * Format: date
       * @description Next review date for recategorisation, defaults to current date + 6 months, if not provided
       */
      nextReviewDate?: string
      /** @description Initial categorisation comment */
      comment?: string
      /** @description The prison to be transferred to */
      placementAgencyId: string
    }
    /** @description Maps an offence to a schedule */
    OffenceToScheduleMappingDto: {
      /**
       * @description Offence code
       * @example COML025
       */
      offenceCode: string
      /**
       * @description Schedule type
       * @example SCHEDULE_15
       * @enum {string}
       */
      schedule:
        | 'SCHEDULE_13'
        | 'SCHEDULE_15'
        | 'SCHEDULE_15_ATTRACTS_LIFE'
        | 'SCHEDULE_17A_PART_1'
        | 'SCHEDULE_17A_PART_2'
        | 'SCHEDULE_19ZA'
        | 'PCSC_SDS'
        | 'PCSC_SDS_PLUS'
        | 'PCSC_SEC_250'
    }
    /** @description Create external movement */
    CreateExternalMovement: {
      /**
       * Format: int64
       * @description Booking id
       * @example 1
       */
      bookingId: number
      /**
       * @description Agency location moving from
       * @example MDI
       */
      fromAgencyId: string
      /**
       * @description Agency location moving to
       * @example OUT
       */
      toAgencyId: string
      /**
       * Format: date-time
       * @description Date time of movement
       * @example 2020-02-28T14:40:00
       */
      movementTime: string
      /**
       * @description Type of movement
       * @example TRN
       */
      movementType: string
      /**
       * @description Movement reason
       * @example SEC
       */
      movementReason: string
      /**
       * @description Direction code
       * @example OUT
       * @enum {string}
       */
      directionCode: 'IN' | 'OUT'
    }
    /** @description Prisoner Movement */
    OffenderMovement: {
      /** @description Display Prisoner Number (UK is NOMS ID) */
      offenderNo: string
      /** Format: int64 */
      bookingId: number
      /** Format: date */
      dateOfBirth: string
      firstName: string
      middleName?: string
      lastName: string
      /** @description Agency travelling from */
      fromAgency: string
      /** @description Description for Agency travelling from */
      fromAgencyDescription: string
      /** @description Agency travelling to */
      toAgency: string
      /** @description Description for Agency travelling to */
      toAgencyDescription: string
      /**
       * @description ADM (admission), CRT (court), REL (release), TAP (temporary absence) or TRN (transfer)
       * @example ADM
       * @enum {string}
       */
      movementType: 'ADM' | 'CRT' | 'REL' | 'TAP' | 'TRN'
      /** @description Description of the movement type */
      movementTypeDescription: string
      /** @description Reason code for the movement */
      movementReason: string
      /** @description Description of the movement reason */
      movementReasonDescription: string
      /** @description IN or OUT */
      directionCode: string
      /** @description Movement time */
      movementTime: string
      /**
       * Format: date
       * @description Movement date
       */
      movementDate: string
      /** @description To address */
      toAddress?: string
    }
    /** @description Prisoner Custody Status */
    Movement: {
      /** @description Display Prisoner Number (UK is NOMS ID) */
      offenderNo: string
      /**
       * Format: date-time
       * @description Timestamp when the external movement record was created
       */
      createDateTime: string
      /** @description Agency travelling from */
      fromAgency?: string
      /** @description Description of the agency travelling from */
      fromAgencyDescription?: string
      /** @description Agency travelling to */
      toAgency?: string
      /** @description Description of the agency travelling to */
      toAgencyDescription?: string
      /** @description City offender was received from */
      fromCity?: string
      /** @description City offender was sent to */
      toCity?: string
      /**
       * @description ADM (admission), CRT (court), REL (release), TAP (temporary absence) or TRN (transfer)
       * @example ADM
       * @enum {string}
       */
      movementType: 'ADM' | 'CRT' | 'REL' | 'TAP' | 'TRN'
      /** @description Description of the movement type */
      movementTypeDescription: string
      /** @description IN or OUT */
      directionCode: string
      /**
       * Format: date
       * @description Movement date
       */
      movementDate: string
      /** @description Movement time */
      movementTime: string
      /** @description Description of movement reason */
      movementReason: string
      /** @description Code of movement reason */
      movementReasonCode: string
      /** @description Comment */
      commentText?: string
    }
    OffenderLatestArrivalDate: {
      /**
       * @description The offender of the offender
       * @example A1234AA
       */
      offenderNo: string
      /**
       * Format: date
       * @description The latest arrival date for the offender
       * @example 2020-12-09
       */
      latestArrivalDate: string
    }
    /** @description Key worker allocation details */
    KeyWorkerAllocationDetail: {
      /**
       * Format: int64
       * @description Offender Booking Id
       */
      bookingId: number
      /** @description Offender Unique Reference */
      offenderNo: string
      /** @description First Name */
      firstName: string
      /** @description Middle Name(s) */
      middleNames?: string
      /** @description Last Name */
      lastName: string
      /**
       * Format: int64
       * @description The key worker's Staff Id
       */
      staffId: number
      /** @description Agency Id */
      agencyId: string
      /**
       * Format: date-time
       * @description Date and time of the allocation
       */
      assigned: string
      /** @description Description of the location within the prison */
      internalLocationDesc: string
    }
    /** @description Offender Key Worker record representation (to facilitate data migration) */
    OffenderKeyWorker: {
      /** @description Offender Unique Reference */
      offenderNo: string
      /**
       * Format: int64
       * @description The key worker's Staff Id
       */
      staffId: number
      /** @description Agency Id */
      agencyId: string
      /**
       * Format: date-time
       * @description Date and time allocation was assigned
       */
      assigned: string
      /**
       * Format: date-time
       * @description Date and time allocation expired
       */
      expired?: string
      /** @description Username of user who processed allocation */
      userId: string
      /** @description Y */
      active: string
      /**
       * Format: date-time
       * @description Date and time allocation record was created
       */
      created: string
      /** @description Username of user who created allocation record */
      createdBy: string
      /**
       * Format: date-time
       * @description Date and time allocation record was last modified
       */
      modified?: string
      /** @description Username of user who last modified allocation record */
      modifiedBy?: string
    }
    /** @description Image Detail */
    ImageDetail: {
      /**
       * Format: int64
       * @description Image ID
       * @example 2461788
       */
      imageId: number
      /**
       * @description An active image means that it is to be used and is current for the prisoner. An inactive image means that it has been superseded by another image or the image is no longer relevant.
       * @example false
       */
      active: boolean
      /**
       * Format: date
       * @description Date of image capture
       * @example 2008-08-27
       */
      captureDate: string
      /**
       * Format: date-time
       * @description Date and time of image capture
       * @example 2008-08-28T01:01:01
       */
      captureDateTime: string
      /**
       * @description Image view information. Actual values extracted 10/05/2023, with the majority of values being FACE. This doesn't appear to be mapped to any REFERENCE_CODE data, even though there is a domain called IMAGE_VIEW.
       * @example FACE
       * @enum {string}
       */
      imageView: 'OIC' | 'FACE' | 'TAT' | 'MARK' | 'SCAR' | 'OTH'
      /**
       * @description Orientation of the image. Actual values extracted 10/05/2023, with the majority of values being FRONT. This doesn't appear to be mapped to any REFERENCE_CODE data, even though there is a domain called PART_ORIENT.
       * @example FRONT
       * @enum {string}
       */
      imageOrientation:
        | 'NECK'
        | 'KNEE'
        | 'TORSO'
        | 'FACE'
        | 'DAMAGE'
        | 'INJURY'
        | 'HAND'
        | 'HEAD'
        | 'THIGH'
        | 'ELBOW'
        | 'FOOT'
        | 'INCIDENT'
        | 'ARM'
        | 'SHOULDER'
        | 'ANKLE'
        | 'FINGER'
        | 'EAR'
        | 'TOE'
        | 'FIGHT'
        | 'FRONT'
        | 'LEG'
        | 'LIP'
        | 'NOSE'
      /**
       * @description Image Type. Actual values extracted 10/05/2023, with the majority of values being OFF_BKG. This doesn't appear to be mapped to any REFERENCE_CODE data.
       * @example OFF_BKG
       * @enum {string}
       */
      imageType: 'OFF_IDM' | 'OFF_BKG' | 'OIC'
      /**
       * Format: int64
       * @description Object ID
       */
      objectId?: number
    }
    /** @description Saving Transfer Transaction Details */
    TransferTransaction: {
      /**
       * Format: int64
       * @description Amount of transaction in pence, hence 1634 is £16.34
       * @example 1634
       */
      amount: number
      /**
       * @description Description of the Transaction
       * @example Canteen Purchase of £16.34
       */
      description: string
      /**
       * @description Client Transaction Id
       * @example CL123212
       */
      client_transaction_id: string
      /**
       * @description A reference unique to the client making the post. Maximum size 64 characters, only alphabetic, numeric, '-' and '_' are allowed
       * @example CLIENT121131-0_11
       */
      client_unique_ref: string
    }
    /** @description Detail of result of transfer transaction */
    TransferTransactionDetail: {
      /** @description Debit Transaction */
      debitTransaction?: components['schemas']['Transaction']
      /** @description Credit Transaction */
      creditTransaction?: components['schemas']['Transaction']
      /**
       * Format: int64
       * @description Transaction Id
       */
      transactionId?: number
    }
    /** @description Offender Education */
    Education: {
      /**
       * Format: int64
       * @description Offender booking id.
       * @example 14
       */
      bookingId: number
      /**
       * Format: date
       * @description Start date of education
       * @example 2018-02-11
       */
      startDate: string
      /**
       * Format: date
       * @description End date of education
       * @example 2020-02-11
       */
      endDate?: string
      /**
       * @description The area of study for the offender while in school.
       * @example General Studies
       */
      studyArea?: string
      /**
       * @description The highest level attained for the educational period.
       * @example Degree Level or Higher
       */
      educationLevel?: string
      /**
       * Format: int32
       * @description The number of educational years completed.
       * @example 2
       */
      numberOfYears?: number
      /**
       * @description Year of graduation.
       * @example 2021
       */
      graduationYear?: string
      /**
       * @description Comment relating to education.
       * @example The education is going well
       */
      comment?: string
      /**
       * @description Name of school attended.
       * @example School of economics
       */
      school?: string
      /**
       * @description Whether this is special education
       * @example false
       */
      isSpecialEducation: boolean
      /**
       * @description The education schedule
       * @example Full Time
       */
      schedule: string
      /** @description A list of addresses associated with the education */
      addresses: components['schemas']['AddressDto'][]
    }
    /** @description Case Note Type Usage Request */
    CaseNoteUsageRequest: {
      /**
       * Format: date
       * @description Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered.  If not defined then the numMonth before the current date, unless a toDate is defined when it will be numMonths before toDate
       * @example 2018-11-01
       */
      fromDate?: string
      /**
       * Format: date
       * @description Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered. If not defined then the current date will be used, unless a fromDate is defined when it will be numMonths after fromDate
       * @example 2018-12-01
       */
      toDate?: string
      /**
       * Format: int32
       * @description Number of month to look forward (if fromDate only defined), or back (if toDate only defined). Default is 1 month
       * @example 2
       */
      numMonths?: number
      /** @description a list of offender numbers to search. */
      offenderNos: string[]
      /**
       * Format: int32
       * @description staff Id to use in search (optional).
       * @example 223423
       */
      staffId?: number
      /**
       * @description Case note type.
       * @example KA
       */
      type?: string
      /**
       * @description Case note sub-type.
       * @example KS
       */
      subType?: string
      /**
       * @description Optional agency Id to filter by
       * @example MDI
       */
      agencyId?: string
    }
    /** @description Case Note Type Usage */
    CaseNoteUsage: {
      /**
       * @description Offender No
       * @example ZWE12A
       */
      offenderNo: string
      /**
       * @description Case Note Type
       * @example KA
       */
      caseNoteType: string
      /**
       * @description Case Note Sub Type
       * @example KS
       */
      caseNoteSubType: string
      /**
       * Format: int32
       * @description Number of case notes of this type/subtype
       * @example 5
       */
      numCaseNotes: number
      /**
       * Format: date-time
       * @description Last case note of this type
       * @example 2018-12-01T14:55:23
       */
      latestCaseNote: string
    }
    /** @description Booking Id to case note from date pair */
    BookingFromDatePair: {
      /**
       * Format: int64
       * @description Booking Id
       */
      bookingId?: number
      /**
       * Format: date-time
       * @description Only case notes occurring on or after this date (in YYYY-MM-DDTHH:MM:SS format) will be considered.
       * @example 2018-11-01T12:00:00
       */
      fromDate?: string
    }
    /** @description Case Note Type Usage Request by Date grouped by bookings */
    CaseNoteTypeSummaryRequest: {
      /** @description a list of booking id to from date to search. Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered */
      bookingFromDateSelection: components['schemas']['BookingFromDatePair'][]
      /** @description Case note types */
      types?: string[]
    }
    /** @description Case Note Type Counts By Booking Id, type and sub type */
    CaseNoteTypeCount: {
      /**
       * Format: int64
       * @description Booking Id
       * @example 12345678
       */
      bookingId: number
      /**
       * @description Case Note Type
       * @example POS
       */
      caseNoteType: string
      /**
       * @description Case Note Sub Type
       * @example IEP_ENC
       */
      caseNoteSubType: string
      /**
       * Format: int64
       * @description Number of case notes of this type and subtype
       * @example 5
       */
      numCaseNotes: number
    }
    /** @description Case Note Type Staff Usage Request */
    CaseNoteStaffUsageRequest: {
      /** @description a list of staff numbers to search. */
      staffIds: number[]
      /**
       * Format: int32
       * @description Number of month to look forward (if fromDate only defined), or back (if toDate only defined). Default is 1 month
       */
      numMonths?: number
      /**
       * Format: date
       * @description Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered.  If not defined then the numMonth before the current date, unless a toDate is defined when it will be numMonths before toDate
       */
      fromDate?: string
      /**
       * Format: date
       * @description Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered. If not defined then the current date will be used, unless a fromDate is defined when it will be numMonths after fromDate
       */
      toDate?: string
      /** @description Case note type. */
      type?: string
      /** @description Case note sub-type. */
      subType?: string
    }
    /** @description Case Note Type Staff Usage */
    CaseNoteStaffUsage: {
      /**
       * Format: int32
       * @description Staff ID
       * @example 2341232
       */
      staffId: number
      /**
       * @description Case Note Type
       * @example KA
       */
      caseNoteType: string
      /**
       * @description Case Note Sub Type
       * @example KS
       */
      caseNoteSubType: string
      /**
       * Format: int32
       * @description Number of case notes of this type/subtype
       * @example 5
       */
      numCaseNotes: number
      /**
       * Format: date-time
       * @description Last case note of this type
       * @example 2018-12-01T14:55:23
       */
      latestCaseNote: string
    }
    /** @description The prison to prison move to be scheduled for the offender booking. */
    SchedulePrisonToPrisonMove: {
      /**
       * @description The prison (agency code) to be moved from.
       * @example LEI
       */
      fromPrisonLocation: string
      /**
       * @description The prison (agency code) to be moved to.
       * @example PVI
       */
      toPrisonLocation: string
      /**
       * @description The escort type of the move.
       * @example PECS
       */
      escortType: string
      /**
       * Format: date-time
       * @description The date and time of the move in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2020-02-28T14:40:00
       */
      scheduledMoveDateTime: string
    }
    /** @description Represents the data for a scheduled prison to prison move. */
    ScheduledPrisonToPrisonMove: {
      /**
       * Format: int64
       * @description The identifier for the scheduled prison to prison move.
       * @example 123456789
       */
      id?: number
      /**
       * Format: date-time
       * @description The date and start time of the move in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2020-02-28T14:40:00
       */
      scheduledMoveDateTime?: string
      /**
       * @description The location of the prison to move from.
       * @example PVI
       */
      fromPrisonLocation?: components['schemas']['Agency']
      /**
       * @description The location of the prison to move to.
       * @example LEI
       */
      toPrisonLocation?: components['schemas']['Agency']
    }
    /** @description The prison to court hearing to be scheduled for the offender booking. */
    PrisonToCourtHearing: {
      /**
       * @description The prison (agency code) where the offender will be moved from.
       * @example LEI
       */
      fromPrisonLocation: string
      /**
       * @description The court (agency code) where the offender will moved to.
       * @example LEEDCC
       */
      toCourtLocation: string
      /**
       * Format: date-time
       * @description The future date and time of the court hearing in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2020-02-28T14:40:00
       */
      courtHearingDateTime: string
      /**
       * @description Any comments related to the court case.
       * @example Restricted access to parking level.
       */
      comments?: string
    }
    /** @description Personal Care Need */
    CreatePersonalCareNeed: {
      /**
       * @description Problem Code
       * @example ACCU9
       */
      problemCode: string
      /**
       * @description Problem Status
       * @example ON
       */
      problemStatus: string
      /**
       * @description Comment text
       * @example Preg, acc under 9mths
       */
      commentText: string
      /**
       * Format: date
       * @description Start Date
       * @example 2010-06-21
       */
      startDate: string
      /**
       * Format: date
       * @description End Date
       * @example 2010-06-21
       */
      endDate?: string
    }
    /** @description Creation details for a new appointment */
    NewAppointment: {
      /** @description Corresponds to the scheduled event subType */
      appointmentType: string
      /**
       * Format: int64
       * @description Location at which the appointment takes place.
       */
      locationId: number
      /**
       * Format: date-time
       * @description Date and time at which event starts
       */
      startTime: string
      /**
       * Format: date-time
       * @description Date and time at which event ends
       */
      endTime?: string
      /** @description Details of appointment */
      comment?: string
    }
    /** @description Scheduled Event */
    ScheduledEvent: {
      /**
       * Format: int64
       * @description Offender booking id
       */
      bookingId: number
      /** @description Class of event */
      eventClass: string
      /**
       * Format: int64
       * @description Activity id if any. Used to attend or pay an activity.
       */
      eventId?: number
      /** @description Status of event */
      eventStatus: string
      /** @description Type of scheduled event (as a code) */
      eventType: string
      /** @description Description of scheduled event type */
      eventTypeDesc: string
      /** @description Sub type (or reason) of scheduled event (as a code) */
      eventSubType: string
      /** @description Description of scheduled event sub type */
      eventSubTypeDesc: string
      /**
       * Format: date
       * @description Date on which event occurs
       */
      eventDate: string
      /**
       * Format: date-time
       * @description Date and time at which event starts
       */
      startTime?: string
      /**
       * Format: date-time
       * @description Date and time at which event ends
       */
      endTime?: string
      /** @description Location at which event takes place (could be an internal location, agency or external address). */
      eventLocation?: string
      /**
       * Format: int64
       * @description Id of an internal event location
       */
      eventLocationId?: number
      /**
       * @description The agency ID for the booked internal location
       * @example WWI
       */
      agencyId?: string
      /** @description Code identifying underlying source of event data */
      eventSource: string
      /** @description Source-specific code for the type or nature of the event */
      eventSourceCode?: string
      /** @description Source-specific description for type or nature of the event */
      eventSourceDesc?: string
      /** @description Activity attendance, possible values are the codes in the 'PS_PA_OC' reference domain. */
      eventOutcome?: string
      /** @description Activity performance, possible values are the codes in the 'PERFORMANCE' reference domain. */
      performance?: string
      /** @description Activity no-pay reason. */
      outcomeComment?: string
      /** @description Activity paid flag. */
      paid?: boolean
      /** @description Amount paid per activity session in pounds */
      payRate?: number
      /** @description The code for the activity location */
      locationCode?: string
      /** @description Staff member who created the appointment */
      createUserId?: string
    }
    /** @description Offender basic detail */
    InmateBasicDetails: {
      /**
       * Format: int64
       * @description Offender Booking Id
       * @example 432132
       */
      bookingId: number
      /** @description Booking Number */
      bookingNo: string
      /**
       * @description Offender Unique Reference
       * @example A1234AA
       */
      offenderNo: string
      /** @description First Name */
      firstName: string
      /** @description Middle Name(s) */
      middleName?: string
      /** @description Last Name */
      lastName: string
      /** @description Identifier of agency to which the prisoner is associated. */
      agencyId: string
      /**
       * Format: int64
       * @description Identifier of living unit (e.g. cell) that prisoner is assigned to.
       */
      assignedLivingUnitId?: number
      /**
       * @description Description of living unit (e.g. cell) that offender is assigned to.
       * @example MDI-1-1-3
       */
      assignedLivingUnitDesc?: string
      /**
       * Format: date
       * @description Date of Birth of prisoner
       * @example 1970-03-15
       */
      dateOfBirth: string
    }
    /** @description Personal Care Needs */
    PersonalCareNeeds: {
      /** @description Offender No */
      offenderNo?: string
      /** @description Personal Care Needs */
      personalCareNeeds?: components['schemas']['PersonalCareNeed'][]
    }
    PersonalCareCounterDto: {
      /** @description Offender number */
      offenderNo: string
      /**
       * Format: int32
       * @description Number of health problems records in set time
       */
      size: number
    }
    /** @description Offence Details */
    OffenceDetail: {
      /**
       * Format: int64
       * @description Prisoner booking id
       * @example 1123456
       */
      bookingId: number
      /** @description Description of offence */
      offenceDescription: string
      /**
       * @description Reference Code
       * @example RR84070
       */
      offenceCode: string
      /**
       * @description Statute code
       * @example RR84
       */
      statuteCode: string
    }
    /** @description Court event outcome */
    CourtEventOutcome: {
      /**
       * Format: int64
       * @description The booking id
       * @example 438934
       */
      bookingId: number
      /**
       * Format: int64
       * @description The court event identifier
       * @example 201206
       */
      eventId: number
      /**
       * @description The court event outcome reason code
       * @example 5500
       */
      outcomeReasonCode?: string
    }
    /** @description Default values to be applied when creating each appointment */
    AppointmentDefaults: {
      /**
       * @description The scheduled event subType
       * @example ACTI
       */
      appointmentType: string
      /**
       * Format: int64
       * @description The identifier of the appointments' Location. The location must be situated in the requestor's case load.
       * @example 25
       */
      locationId: number
      /**
       * Format: date-time
       * @description The date and time at which the appointments start. ISO 8601 Date-time format. startTime must be in the future.
       * @example 2018-12-31T14:00
       */
      startTime: string
      /**
       * Format: date-time
       * @description The date and time at which the appointments end. ISO 8601 Date-time format. endTime, if present, must be later than startTime.
       * @example 2018-12-31T14:50:00
       */
      endTime?: string
      /**
       * @description A comment that applies to all the appointments in this request.
       * @example Please provide helpful supporting text when it applies to all the appointments specified by this request.
       */
      comment?: string
    }
    /** @description Detail for creating an appointment for a particular bookingId where values should differ from the defaults */
    AppointmentDetails: {
      /**
       * Format: int64
       * @description The Booking id of the offender for whom the appointment is to be created.
       * @example 123456
       */
      bookingId: number
      /**
       * Format: date-time
       * @description A replacement for the default startTime. ISO 8601 date-time format.  This value, when present, must be in the future.
       * @example 2018-12-31T23:50
       */
      startTime?: string
      /**
       * Format: date-time
       * @description A replacement for the default endTime. ISO 8601 date-time format.  This value, when present, must be later than the default startTime, or the startTime in this object if it is defined.
       * @example 2018-12-31T23:59
       */
      endTime?: string
      /**
       * @description The Appointment's details. When present this value replaces the default comment.
       * @example Please provide helpful supporting text relevant to this particular appointment when the default comment is not suitable.
       */
      comment?: string
    }
    /** @description Details for creating appointments in bulk */
    AppointmentsToCreate: {
      /** @description The default values to be applied to each new appointment. An individual appointment may change the startTime, add or change the endTime and provide text for that appointment's comment. */
      appointmentDefaults: components['schemas']['AppointmentDefaults']
      /** @description The details for creating each appointment.  A Missing value falls back to the default value if present. Mandatory, but an empty list is accepted. */
      appointments: components['schemas']['AppointmentDetails'][]
      /** @description If present specifies the number of times to repeat the appointments and the period of the repeat */
      repeat?: components['schemas']['Repeat']
    }
    Repeat: {
      /**
       * @description The period at which the appointment should repeat.
       * @example WEEKLY
       * @enum {string}
       */
      repeatPeriod: 'DAILY' | 'WEEKDAYS' | 'WEEKLY' | 'FORTNIGHTLY' | 'MONTHLY'
      /**
       * Format: int32
       * @description The total number of appointments. Must be greater than 0
       */
      count: number
    }
    /** @description The details of an appointment that has just been created */
    CreatedAppointmentDetails: {
      /**
       * Format: int64
       * @description The Booking id of the offender for whom the appointment was created.
       * @example 123456
       */
      bookingId: number
      /**
       * Format: date-time
       * @description The start time of the appointment.
       * @example 2018-12-31T23:50
       */
      startTime?: string
      /**
       * Format: date-time
       * @description The end time of the appointment.
       * @example 2018-12-31T23:59
       */
      endTime?: string
      /** Format: int64 */
      appointmentEventId?: number
      /**
       * @description The scheduled event subType
       * @example ACTI
       */
      appointmentType?: string
      /**
       * Format: int64
       * @description The identifier of the appointments' Location. The location must be situated in the requestor's case load.
       * @example 25
       */
      locationId: number
    }
    /** @description A agency */
    AgencyDetails: {
      /**
       * @description The agency code. Normally a prison, but can be any location e.g. a prisoner escort service area.
       * @example BXI
       */
      agencyId: string
      /**
       * @description The agency name
       * @example Brixton
       */
      name: string
    }
    /** @description Create Agency Request */
    RequestToCreateAgency: {
      /**
       * @description Agency identifier.
       * @example MDI
       */
      agencyId: string
      /**
       * @description Agency description.
       * @example Moorland (HMP & YOI)
       */
      description: string
      /**
       * @description Long description of the agency
       * @example Moorland (HMP & YOI)
       */
      longDescription?: string
      /**
       * @description Agency type.  Reference domain is AGY_LOC_TYPE
       * @example INST
       * @enum {string}
       */
      agencyType:
        | 'CRC'
        | 'POLSTN'
        | 'INST'
        | 'COMM'
        | 'APPR'
        | 'CRT'
        | 'POLICE'
        | 'IMDC'
        | 'TRN'
        | 'OUT'
        | 'YOT'
        | 'SCH'
        | 'STC'
        | 'HOST'
        | 'AIRPORT'
        | 'HSHOSP'
        | 'HOSPITAL'
        | 'PECS'
        | 'PAR'
        | 'PNP'
        | 'PSY'
      /**
       * @description Court Type.  Reference domain is JURISDICTION
       * @example CC
       * @enum {string}
       */
      courtType: 'CACD' | 'CB' | 'CC' | 'CO' | 'DCM' | 'GCM' | 'IMM' | 'MC' | 'OTHER' | 'YC'
      /**
       * @description Indicates the Agency is active. Note: if set false, the current date will be the deactivation date
       * @example true
       */
      active?: boolean
    }
    /** @description Visit slots Details  */
    VisitSlotCapacity: {
      /**
       * @description Time
       * @example 2019-01-01T13:30/16:00
       */
      time?: string
      /**
       * Format: int64
       * @description Capacity
       * @example 402
       */
      capacity?: number
      /**
       * Format: int64
       * @description Max Groups
       * @example 999
       */
      max_groups?: number
      /**
       * Format: int64
       * @description Max Adults
       * @example 999
       */
      max_adults?: number
      /**
       * Format: int64
       * @description Groups Booked
       * @example 5
       */
      groups_booked?: number
      /**
       * Format: int64
       * @description Visitors Booked
       * @example 6
       */
      visitors_booked?: number
      /**
       * Format: int64
       * @description Adults Booked
       * @example 7
       */
      adults_booked?: number
    }
    /** @description Visit slots with capacity */
    VisitSlots: {
      /** @description List of visit slots with capacity */
      slots?: components['schemas']['VisitSlotCapacity'][]
    }
    /** @description Account Transaction */
    AccountTransaction: {
      /**
       * @description Transaction ID
       * @example 204564839-3
       */
      id: string
      /** @description The type of transaction */
      type: components['schemas']['CodeDescription']
      /**
       * @description Transaction description
       * @example Transfer In Regular from caseload PVR
       */
      description: string
      /**
       * Format: int64
       * @description Amount in pence
       * @example 12345
       */
      amount: number
      /**
       * Format: date
       * @description Date of the transaction
       * @example 2016-10-21
       */
      date: string
    }
    /** @description Hold Response */
    Hold: {
      /**
       * @description Description
       * @example Hold via API
       */
      description?: string
      /**
       * Format: int64
       * @description Amount in pence
       * @example 150
       */
      amount?: number
      /**
       * Format: int64
       * @description Hold Number
       * @example 6185835
       */
      hold_number?: number
      /**
       * @description Client unique reference
       * @example jerkincrocus
       */
      client_unique_ref?: string
      /**
       * @description Reference number
       * @example TEST0075
       */
      reference_no?: string
      /**
       * Format: date
       * @description Entry date
       * @example 2017-06-23
       */
      entry_date?: string
      /**
       * Format: date
       * @description Hold until date
       * @example 2017-07-07
       */
      hold_until_date?: string
    }
    /** @description Account Balance */
    AccountBalance: {
      /**
       * Format: int64
       * @description Spends balance
       * @example 5678
       */
      spends?: number
      /**
       * Format: int64
       * @description Saving balance
       * @example 12344
       */
      savings?: number
      /**
       * Format: int64
       * @description Cash balance
       * @example 13565
       */
      cash?: number
    }
    /** @description Account Transactions */
    AccountTransactions: {
      /** @description List of account transactions */
      transactions?: components['schemas']['AccountTransaction'][]
    }
    /** @description Live Roll */
    LiveRoll: {
      /** @description Noms Ids */
      noms_ids?: string[]
    }
    /** @description Date Unavailability Reasons */
    UnavailabilityReason: {
      /**
       * @description External Movement
       * @example true
       */
      external_movement?: boolean
      /** @description Existing Visits */
      existing_visits?: components['schemas']['Visit'][]
      /**
       * @description Out of Vo
       * @example true
       */
      out_of_vo?: boolean
      /**
       * @description Banned
       * @example true
       */
      banned?: boolean
    }
    /** @description Visit Details */
    Visit: {
      /**
       * Format: int64
       * @description Id
       * @example 123456
       */
      id?: number
      /**
       * @description Slot
       * @example 2019-01-01T13:30/16:00
       */
      slot?: string
    }
    /** @description Contact List */
    ContactList: {
      /** @description Available Dates */
      contacts?: components['schemas']['ContactPerson'][]
    }
    /** @description Contact Person */
    ContactPerson: {
      /**
       * Format: int64
       * @description ID
       * @example 1234567
       */
      id?: number
      /**
       * @description Given Name
       * @example JENNIFER
       */
      given_name?: string
      /**
       * @description Middle Names
       * @example ESMERALADA JANE
       */
      middle_names?: string
      /**
       * @description Last Name
       * @example HALLIBUT
       */
      surname?: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1970-01-01
       */
      date_of_birth?: string
      /** @description Gender */
      gender?: components['schemas']['CodeDescription']
      /** @description Relationship Type */
      'relationship type'?: components['schemas']['CodeDescription']
      /** @description Contact Type */
      'contact type'?: components['schemas']['CodeDescription']
      /** @description Approved Visitor */
      'approved visitor'?: boolean
      /** @description Active */
      active?: boolean
      /** @description Restrictions */
      restrictions?: components['schemas']['VisitRestriction'][]
    }
    /** @description Visit Restriction */
    VisitRestriction: {
      /** @description Type */
      type?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Effective Date
       * @example 2019-01-01
       */
      effective_date?: string
      /**
       * Format: date
       * @description Expiry Date
       * @example 2019-01-01
       */
      expiry_date?: string
      /** @description Comment Text */
      comment_text?: string
    }
    /** @description Available Dates */
    AvailableDates: {
      /** @description Available Dates */
      dates?: string[]
    }
    /** @description Language */
    Language: {
      /** @description Spoken language */
      preferred_spoken?: components['schemas']['CodeDescription']
      /**
       * @description whether an interpreter is required
       * @example true
       */
      interpreter_required?: boolean
    }
    /** @description Offender */
    Offender: {
      /**
       * @description Given Name
       * @example JENNIFER
       */
      given_name?: string
      /**
       * @description Middle Names
       * @example ESMERALADA JANE
       */
      middle_names?: string
      /**
       * @description Last Name
       * @example HALLIBUT
       */
      surname?: string
      /**
       * @description Title
       * @example MR
       */
      title?: string
      /** @description Suffix */
      suffix?: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1970-01-01
       */
      date_of_birth?: string
      /** @description List of offender’s aliases */
      aliases?: components['schemas']['OffenderAlias'][]
      /** @description Gender */
      gender?: components['schemas']['CodeDescription']
      /** @description Nationalities */
      nationalities?: string
      /** @description Religion */
      religion?: components['schemas']['CodeDescription']
      /** @description Ethnicity */
      ethnicity?: components['schemas']['CodeDescription']
      /** @description Language */
      language?: components['schemas']['Language']
      /** @description Cell Sharing Risk Assessment */
      csra?: components['schemas']['CodeDescription']
      /**
       * @description indicates whether the offender has been convicted or is on remand
       * @example true
       */
      convicted?: boolean
      /**
       * @description PNC Number
       * @example 96/346527V
       */
      pnc_number?: string
      /**
       * @description CRO Number
       * @example ADF567890
       */
      cro_number?: string
      /** @description Imprisonment Status */
      imprisonment_status?: components['schemas']['CodeDescription']
      /** @description IEP Level */
      iep_level?: components['schemas']['CodeDescription']
      /** @description Diet */
      diet?: components['schemas']['CodeDescription']
      /** @description Security Categorisation */
      security_category?: components['schemas']['CodeDescription']
    }
    /** @description Offender Alias */
    OffenderAlias: {
      /**
       * @description Given Name
       * @example JENNIFER
       */
      given_name?: string
      /**
       * @description Middle Names
       * @example ESMERALADA JANE
       */
      middle_names?: string
      /**
       * @description Surname
       * @example HALLIBUT
       */
      surname?: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1970-01-01
       */
      date_of_birth?: string
    }
    /** @description Offender Event */
    Event: {
      /**
       * @description Type of event
       * @example IEP_CHANGED
       */
      type: string
      /**
       * Format: int64
       * @description Unique indentifier for event
       * @example 21
       */
      id: number
      /**
       * @description Offender Noms Id
       * @example A1417AE
       */
      noms_id: string
      /**
       * @description Prison ID
       * @example BMI
       */
      prison_id: string
      /**
       * Format: date-time
       * @description Date and time the event occurred
       * @example 2016-10-21 15:55:06.284
       */
      timestamp: string
      eventData?: string
    }
    /** @description Internal Location */
    InternalLocation: {
      /**
       * @description Description
       * @example BMI-C-2-03
       */
      description?: string
      /** @description Levels */
      levels?: components['schemas']['TypeValue'][]
    }
    /** @description Location */
    OffenderLocation: {
      /**
       * @description Establishment
       * @example {code: 'BMI', desc: 'BIRMINGHAM (HMP)'}
       */
      establishment?: components['schemas']['CodeDescription']
      /**
       * @description Housing Location
       * @example [{ type: 'Wing', value: 'C' },{ type: 'Landing', value: '2' },{ type: 'Cell', value: '03' }]
       */
      housing_location?: components['schemas']['InternalLocation']
    }
    /** @description Type Value */
    TypeValue: {
      /**
       * @description Type
       * @example Wing
       */
      type?: string
      /**
       * @description Value
       * @example C
       */
      value?: string
    }
    /** @description Prisoner Photo */
    Image: {
      /**
       * @description Base64 Encoded JPEG data
       * @example <base64_encoded_jpeg_data>
       */
      image?: string
    }
    /** @description Offender Booking */
    Booking: {
      /** @description Location of Offender */
      location?: components['schemas']['OffenderLocation']
      /**
       * @description Bookings
       * @example A12313
       */
      booking_no: string
      /**
       * Format: date
       * @description Start Date of Booking
       * @example 2017-02-04
       */
      booking_started: string
      /**
       * Format: date
       * @description End date of Booking
       * @example 2019-06-04
       */
      booking_ended?: string
      /**
       * @description Booking Active?
       * @example true
       */
      booking_active: boolean
      /**
       * Format: date
       * @description Release Date
       * @example 2019-02-04
       */
      release_date?: string
      /** @description Legal Cases */
      legal_cases?: components['schemas']['LegalCase'][]
    }
    /** @description Bookings */
    Bookings: {
      /** @description Bookings */
      bookings?: components['schemas']['Booking'][]
    }
    /** @description Offender Charge */
    Charge: {
      /**
       * @description Statute
       * @example {
       *       'code': 'PL96',
       *       'desc': 'Police Act 1996'
       *     }
       */
      statute?: components['schemas']['CodeDescription']
      /**
       * @description Offence
       * @example {
       *       'code': 'PL96001',
       *       'desc': 'Assault a constable in the execution of his / her duty'
       *     }
       */
      offence?: components['schemas']['CodeDescription']
      /**
       * @description Most Serious Offence
       * @example true
       */
      most_serious?: boolean
      /**
       * @description Charge Active
       * @example true
       */
      charge_active?: boolean
      /**
       * @description Severity Ranking
       * @example 100
       */
      severity_ranking?: string
      /**
       * @description Result
       * @example {
       *       'code': '1002',
       *       'desc': 'Imprisonment'
       *     }
       */
      result?: components['schemas']['CodeDescription']
      /**
       * @description Disposition
       * @example {
       *       'code': 'F',
       *       'desc': 'Final'
       *     }
       */
      disposition?: components['schemas']['CodeDescription']
      /**
       * @description Convicted
       * @example true
       */
      convicted?: boolean
      /**
       * @description Imprisonment Status
       * @example {
       *       'code': 'UNK_SENT',
       *       'desc': 'Unknown Sentenced'
       *     }
       */
      imprisonment_status?: components['schemas']['CodeDescription']
      /**
       * @description Band
       * @example {
       *       'code': '1',
       *       'desc': 'Sent-Determinate NonFine'
       *     }
       */
      band?: components['schemas']['CodeDescription']
    }
    /** @description Legal Case */
    LegalCase: {
      /**
       * @description Case Information Number
       * @example 1254232
       */
      case_info_number?: string
      /**
       * @description Case Active
       * @example true
       */
      case_active?: boolean
      /**
       * Format: date
       * @description Case Started Date
       * @example 2019-01-17
       */
      case_started?: string
      /**
       * @description Court
       * @example {
       *       'code': 'ABDRCT',
       *       'desc': 'Aberdare County Court'
       *     }
       */
      court?: components['schemas']['CodeDescription']
      /**
       * @description Legal Case Type
       * @example {
       *       'code': 'A',
       *       'desc': 'Adult'
       *     }
       */
      legal_case_type?: components['schemas']['CodeDescription']
      /** @description Charges */
      charges?: components['schemas']['Charge'][]
    }
    /** @description Offender Alert */
    AlertV1: {
      /**
       * @description Code and description identifying the type of alert
       * @example {
       *       'code': 'FX',
       *       'desc': 'Security'
       *     }
       */
      alert_type: components['schemas']['CodeDescription']
      /**
       * @description Code and description identifying the sub type of alert
       * @example {
       *       'code': 'XEL',
       *       'desc': 'Escape List'
       *     }
       */
      alert_sub_type: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date the alert became effective
       * @example 2019-02-13
       */
      alert_date: string
      /**
       * Format: date
       * @description Alert Type
       * @example 2019-04-15
       */
      expiry_date?: string
      /**
       * @description ACTIVE or INACTIVE (Inactive alerts will have a expiry date of today or earlier
       * @example ACTIVE
       * @enum {string}
       */
      status?: 'ACTIVE,INACTIVE'
      /**
       * @description Free Text Comment
       * @example has a large poster on cell wall
       */
      comment?: string
    }
    /** @description Alerts */
    Alerts: {
      /** @description Alerts */
      alerts?: components['schemas']['AlertV1'][]
    }
    /** @description Events */
    Events: {
      /** @description Events */
      events?: components['schemas']['Event'][]
    }
    /** @description Active Offender */
    ActiveOffender: {
      /**
       * @description found
       * @example true
       */
      found?: boolean
      /** @description offender */
      offender?: components['schemas']['OffenderId']
    }
    /** @description offender ID */
    OffenderId: {
      /**
       * Format: int64
       * @description ID
       * @example 1234567
       */
      id?: number
    }
    /** @description User Role */
    UserRole: {
      /**
       * Format: int64
       * @description Role Id
       */
      roleId: number
      /** @description code for this role */
      roleCode: string
      /** @description Full text description of the role type */
      roleName: string
      /** @description role code of the parent role */
      parentRoleCode?: string
      /** @description caseload that this role belongs to, (NOMIS only) */
      caseloadId?: string
    }
    /** @description Location Details */
    Location: {
      /**
       * Format: int64
       * @description Location identifier.
       */
      locationId: number
      /** @description Location type. */
      locationType: string
      /** @description Location description. */
      description: string
      /** @description What events this room can be used for. */
      locationUsage?: string
      /** @description Identifier of Agency this location is associated with. */
      agencyId: string
      /**
       * Format: int64
       * @description Identifier of this location's parent location.
       */
      parentLocationId?: number
      /**
       * Format: int32
       * @description Current occupancy of location.
       */
      currentOccupancy?: number
      /** @description Location prefix. Defines search prefix that will constrain search to this location and its subordinate locations. */
      locationPrefix?: string
      /**
       * Format: int32
       * @description Operational capacity of the location.
       */
      operationalCapacity?: number
      /** @description User-friendly location description. */
      userDescription?: string
      internalLocationCode?: string
      /** @description Indicates that sub locations exist for this location e.g. landings or cells */
      subLocations?: boolean
    }
    PrisonerTransaction: {
      /**
       * @description Transaction ID
       * @example 204564839-3
       */
      id: string
      /** @description The type of transaction */
      type: components['schemas']['CodeDescription']
      /**
       * @description Transaction description
       * @example Transfer In Regular from caseload PVR
       */
      description: string
      /**
       * Format: int64
       * @description Amount in pence
       * @example 12345
       */
      amount: number
      /**
       * Format: date
       * @description Date of the transaction
       * @example 2016-10-21
       */
      date: string
      /**
       * @description A reference unique to the client making the post. Maximum size 64 characters, only alphabetic, numeric, '-' and '_' are allowed
       * @example CLIENT121131-0_11
       */
      clientUniqueRef?: string
    }
    /** @description Account Transactions */
    PrisonerTransactions: {
      /** @description List of account transactions */
      transactions: components['schemas']['PrisonerTransaction'][]
    }
    /** @description Staff Role */
    StaffRole: {
      /** @description A code that defines staff member's role at agency. */
      role: string
      /** @description Description of staff member's role at agency. */
      roleDescription?: string
    }
    /** @description Staff Details with position and role */
    StaffLocationRole: {
      /**
       * Format: int64
       * @description Unique identifier for staff member.
       * @example 242342
       */
      staffId: number
      /**
       * @description Staff member's first name.
       * @example JOHN
       */
      firstName: string
      /**
       * @description Staff member's last name.
       * @example SMITH
       */
      lastName: string
      /**
       * @description Status of staff member.
       * @example ACTIVE
       * @enum {string}
       */
      status: 'ACTIVE' | 'INACTIVE'
      /**
       * Format: int64
       * @description Identifier for staff member image.
       * @example 2342334
       */
      thumbnailId?: number
      /**
       * @description Gender of Staff Member
       * @example M
       * @enum {string}
       */
      gender?: 'M' | 'F' | 'NK' | 'NS' | 'REF'
      /**
       * Format: date
       * @description Date of Birth of Staff Member
       * @example 1970-01-02
       */
      dateOfBirth?: string
      /**
       * @description Agency at which staff member is performing role.
       * @example LEI
       */
      agencyId: string
      /**
       * @description Agency description.
       * @example HMP Leeds
       */
      agencyDescription?: string
      /**
       * Format: date
       * @description Date from which staff member is actively performing role.
       * @example 2019-02-05
       */
      fromDate: string
      /**
       * Format: date
       * @description Date on which staff member stops actively performing role.
       * @example 2019-03-25
       */
      toDate?: string
      /**
       * @description A code that defines staff member's position at agency.
       * @example PRO
       */
      position: string
      /**
       * @description Description of staff member's position at agency.
       * @example Prison Officer
       */
      positionDescription?: string
      /**
       * @description A code that defines staff member's role at agency.
       * @example KW
       */
      role: string
      /**
       * @description Description of staff member's role at agency.
       * @example Key Worker
       */
      roleDescription?: string
      /**
       * @description A code the defines staff member's schedule type.
       * @example FT
       */
      scheduleType?: string
      /**
       * @description Description of staff member's schedule type.
       * @example Full Time
       */
      scheduleTypeDescription?: string
      /**
       * @description Number of hours worked per week by staff member.
       * @example 30
       */
      hoursPerWeek?: number
    }
    /** @description Prisoner Prison Schedule */
    PrisonerPrisonSchedule: {
      /** @description Offender number (e.g. NOMS Number) */
      offenderNo: string
      /** @description Offender first name */
      firstName: string
      /** @description Offender last name */
      lastName: string
      /** @description Event code */
      event: string
      /** @description Event type, e.g. VISIT, APP, PRISON_ACT */
      eventType: string
      /** @description Description of event code */
      eventDescription: string
      /** @description Location of the event */
      eventLocation: string
      /** @description The event's status. Includes 'CANC', meaning cancelled for 'VISIT' */
      eventStatus: string
      /** @description Comment */
      comment?: string
      /**
       * Format: date-time
       * @description Date and time at which event starts
       */
      startTime?: string
      /**
       * Format: date-time
       * @description Date and time at which event ends
       */
      endTime?: string
    }
    /** @description Scheduled appointment */
    ScheduledAppointmentDto: {
      /**
       * Format: int64
       * @description Appointment id
       */
      id?: number
      /** @description Offender number (e.g. NOMS Number) */
      offenderNo?: string
      /** @description Offender first name */
      firstName?: string
      /** @description Offender last name */
      lastName?: string
      /**
       * Format: date
       * @description Date the appointment is scheduled
       */
      date?: string
      /**
       * Format: date-time
       * @description Date and time at which appointment starts
       */
      startTime?: string
      /**
       * Format: date-time
       * @description Date and time at which appointment ends
       */
      endTime?: string
      /** @description Description of appointment type */
      appointmentTypeDescription?: string
      /** @description Appointment code */
      appointmentTypeCode?: string
      /** @description Description of location the appointment is held */
      locationDescription?: string
      /**
       * Format: int64
       * @description Id of location the appointment is held
       */
      locationId?: number
      /** @description Staff member who created the appointment */
      createUserId?: string
      /** @description Agency the appointment belongs to */
      agencyId?: string
      /** @description The event status for this appointment, one of SCH (scheduled), COMP (completed), EXP (expired) or CANC (cancelled) */
      eventStatus?: string
    }
    /** @description Reference Domain */
    ReferenceDomain: {
      /** @description Reference domain name */
      domain: string
      /** @description Reference domain description. */
      description: string
      /** @description Reference domain status. */
      domainStatus: string
      /** @description Reference domain owner. */
      ownerCode: string
      /** @description Application that uses reference domain. */
      applnCode: string
      /** @description Parent domain for reference domain. */
      parentDomain?: string
    }
    /** @description Prisoner Information */
    PrisonerInformation: {
      /**
       * @description Offender Identifier
       * @example A1234AA
       */
      nomsId: string
      /**
       * @description Establishment Code for prisoner
       * @example MDI
       */
      establishmentCode: string
      /**
       * Format: int64
       * @description Booking Id (Internal)
       * @example 1231232
       */
      bookingId: number
      /**
       * @description Given Name 1
       * @example John
       */
      givenName1: string
      /**
       * @description Given Name 2
       * @example Luke
       */
      givenName2?: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName: string
      /**
       * @description Requested Name
       * @example Dave
       */
      requestedName?: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1970-05-01
       */
      dateOfBirth: string
      /**
       * @description Gender
       * @example Male
       */
      gender: string
      /**
       * @description Indicated that is English speaking
       * @example true
       */
      englishSpeaking: boolean
      /**
       * @description Level 1 Location Unit Code
       * @example A
       */
      unitCode1?: string
      /**
       * @description Level 2 Location Unit Code
       * @example 2
       */
      unitCode2?: string
      /**
       * @description Level 3 Location Unit Code
       * @example 003
       */
      unitCode3?: string
      /**
       * Format: date
       * @description Date Prisoner booking was initial made
       * @example 2017-05-01
       */
      bookingBeginDate?: string
      /**
       * Format: date
       * @description Date of admission into this prison
       * @example 2019-06-01
       */
      admissionDate?: string
      /**
       * Format: date
       * @description Confirmed, actual, approved, provisional or calculated release date for offender, according to offender release date algorithm.<h3>Algorithm</h3><ul><li>If there is a confirmed release date, the offender release date is the confirmed release date.</li><li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li><li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li></ul>
       * @example 2021-04-12
       */
      releaseDate?: string
      /**
       * @description Category of this prisoner
       * @example C
       */
      categoryCode?: string
      /**
       * @description Status of prisoner in community
       * @example ACTIVE IN
       * @enum {string}
       */
      communityStatus: 'ACTIVE IN' | 'ACTIVE OUT'
      /**
       * @description Legal Status
       * @example REMAND
       * @enum {string}
       */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
      /**
       * @description Establishment Name for prisoner
       * @example Moorland
       */
      establishmentName: string
    }
    PageString: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: string[]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      paged?: boolean
      /** Format: int32 */
      pageNumber?: number
      unpaged?: boolean
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    OffenderLanguageDto: {
      /**
       * @description A LOV from domain LANG_TYPE
       * @enum {string}
       */
      type: 'PRIM' | 'SEC' | 'PREF_SPEAK' | 'PREF_WRITE'
      /**
       * @description The actual language code, from domain LANG
       * @example ENG
       */
      code: string
      /**
       * @description The level of reading skill, from domain LANG_SKILLS:
       *         |Y  Yes
       *         |A	Average
       *         |D	Dyslexia
       *         |G	Good
       *         |N	Nil
       *         |P	Poor
       *         |R	Refused
       * @enum {string}
       */
      readSkill?: 'Y' | 'N' | 'A' | 'D' | 'G' | 'P' | 'R'
      /**
       * @description The level of writing skill, see description for readSkill
       * @enum {string}
       */
      writeSkill?: 'Y' | 'N' | 'A' | 'D' | 'G' | 'P' | 'R'
      /**
       * @description The level of speaking skill, see description for readSkill
       * @enum {string}
       */
      speakSkill?: 'Y' | 'N' | 'A' | 'D' | 'G' | 'P' | 'R'
      /** @description Whether interpreter requested */
      interpreterRequested: boolean
    }
    /** @description Prisoner details required by Prisoner Search */
    PrisonerSearchDetails: {
      /**
       * @description Prisoner Number a.k.a NOMS number, offender number
       * @example A1234AA
       */
      offenderNo: string
      /**
       * Format: int64
       * @description Offender Id
       * @example 678673
       */
      offenderId?: number
      /**
       * Format: int64
       * @description Booking Id of the active booking
       * @example 432132
       */
      bookingId?: number
      /** @description Booking Number of the active booking */
      bookingNo?: string
      /** @description Title */
      title?: string
      /** @description First Name */
      firstName: string
      /** @description Middle Name(s) */
      middleName?: string
      /** @description Last Name */
      lastName: string
      /**
       * Format: date
       * @description Date of Birth of prisoner
       * @example 1970-03-15
       */
      dateOfBirth: string
      /**
       * @description Prison ID
       * @example MDI
       */
      agencyId?: string
      /** @description Cell or location of the prisoner */
      assignedLivingUnit?: components['schemas']['AssignedLivingUnit']
      /** @description Religion of the prisoner */
      religion?: string
      /** @description A set of physical attributes */
      physicalAttributes?: components['schemas']['PhysicalAttributes']
      /** @description List of physical characteristics */
      physicalCharacteristics?: components['schemas']['PhysicalCharacteristic'][]
      /** @description List of profile information */
      profileInformation?: components['schemas']['ProfileInformation'][]
      /** @description List of physical marks */
      physicalMarks?: components['schemas']['PhysicalMark'][]
      /** @description CSRA (Latest assessment with cellSharing=true from list of assessments) */
      csra?: string
      /** @description Category code (from list of assessments) */
      categoryCode?: string
      /**
       * @description In/Out Status
       * @example IN, OUT, TRN
       */
      inOutStatus?: string
      /** @description Prisoner Identifiers */
      identifiers?: components['schemas']['OffenderIdentifier'][]
      /** @description Prisoner Identifiers including those from aliases */
      allIdentifiers?: components['schemas']['OffenderIdentifier'][]
      /** @description Sentence Detail */
      sentenceDetail?: components['schemas']['SentenceCalcDates']
      /** @description Most serious offence */
      mostSeriousOffence?: string
      /** @description Currently serving an indeterminate sentence? */
      indeterminateSentence?: boolean
      /** @description Aliases */
      aliases?: components['schemas']['Alias'][]
      /**
       * @description Status of prisoner
       * @example ACTIVE IN, ACTIVE OUT, INACTIVE OUT, INACTIVE TRN
       */
      status?: string
      /**
       * @description Last Movement Type Code of prisoner. Note: Reference Data from MOVE_TYPE Domain
       * @example TAP, CRT, TRN, ADM, REL
       */
      lastMovementTypeCode?: string
      /**
       * @description Last Movement Reason of prisoner. Note: Reference Data from MOVE_RSN Domain
       * @example CA
       */
      lastMovementReasonCode?: string
      /**
       * Format: date-time
       * @description Last Movement time
       * @example 2024-12-01 12:23:34
       */
      lastMovementTime?: string
      /**
       * Format: date-time
       * @description Time of transfer into the current or most recent prison
       * @example 2024-12-01 12:23:34
       */
      lastAdmissionTime?: string
      /**
       * @description Legal Status
       * @example REMAND
       * @enum {string}
       */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
      /**
       * @description Recall
       * @example true
       */
      recall?: boolean
      /**
       * @description The prisoner's imprisonment status
       * @example LIFE
       */
      imprisonmentStatus?: string
      /**
       * @description The prisoner's imprisonment status description
       * @example Serving Life Imprisonment
       */
      imprisonmentStatusDescription?: string
      /**
       * @description The prisoner's convicted status
       * @example Convicted
       */
      convictedStatus?: string
      /**
       * Format: date
       * @description Date prisoner was first received into prison in their current or most recent term.
       * @example 2023-01-01
       */
      receptionDate?: string
      /**
       * @description current prison or outside with last movement information.
       * @example Outside - released from Leeds
       */
      locationDescription?: string
      /**
       * @description the current prison id or the last prison before release
       * @example MDI
       */
      latestLocationId?: string
      /** @description Prisoner Addresses */
      addresses?: components['schemas']['AddressDto'][]
      /** @description Prisoner Phone Numbers */
      phones?: components['schemas']['Telephone'][]
      /** @description Prisoner Email Addresses */
      emailAddresses?: components['schemas']['Email'][]
      /** @description Convicted offences for ALL bookings */
      allConvictedOffences?: components['schemas']['OffenceHistoryDetail'][]
      /** @description Personal Care Needs. Specific types are selected for the prisoner profile : DISAB, MATSTAT, PHY, PSYCH, SC */
      personalCareNeeds?: components['schemas']['PersonalCareNeed'][]
      /** @description Languages spoken, read or written */
      languages?: components['schemas']['OffenderLanguageDto'][]
      /**
       * Format: int64
       * @description The prisoner's current facial image can be retrieved by plugging this id into the endpoint /api/images/{prisonerNumber}/data?imageId={imageId}
       * @example 341221
       */
      imageId?: number
    }
    /** @description The prisoner to be calculated as part of a bulk calculation */
    CalculablePrisoner: {
      /**
       * @description Prisoner Identifier
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The booking ID
       */
      bookingId: number
    }
    PageCalculablePrisoner: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['CalculablePrisoner'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Summary of cell usage for this level */
    LocationRollCount: {
      /**
       * Format: int32
       * @description Beds in use
       */
      bedsInUse: number
      /**
       * Format: int32
       * @description Currently in cell
       */
      currentlyInCell: number
      /**
       * Format: int32
       * @description Currently out
       */
      currentlyOut: number
      /**
       * Format: int32
       * @description Working capacity
       */
      workingCapacity: number
      /**
       * Format: int32
       * @description Net vacancies
       */
      netVacancies: number
      /**
       * Format: int32
       * @description Out of order
       */
      outOfOrder: number
    }
    /** @description Establishment Roll Count */
    PrisonRollCount: {
      /** @description Prison Id */
      prisonId: string
      /**
       * Format: int32
       * @description Unlock roll today
       */
      numUnlockRollToday: number
      /**
       * Format: int32
       * @description Current population
       */
      numCurrentPopulation: number
      /**
       * Format: int32
       * @description Arrived today
       */
      numArrivedToday: number
      /**
       * Format: int32
       * @description In reception
       */
      numInReception: number
      /**
       * Format: int32
       * @description Still to arrive
       */
      numStillToArrive: number
      /**
       * Format: int32
       * @description Out today
       */
      numOutToday: number
      /**
       * Format: int32
       * @description No cell allocated
       */
      numNoCellAllocated: number
      /** @description Totals */
      totals: components['schemas']['LocationRollCount']
      /** @description Residential location roll count summary */
      locations: components['schemas']['ResidentialLocation'][]
    }
    /** @description Residential Roll Count Summary */
    ResidentialLocation: {
      /**
       * @description Location Id
       * @example 121212
       */
      locationId: string
      /**
       * @description Type of location
       * @example CELL
       */
      locationType: string
      /**
       * @description Code of this location
       * @example 002
       */
      locationCode: string
      /**
       * @description Path of this location from top level
       * @example A-1-002
       */
      fullLocationPath: string
      /**
       * @description Certified location
       * @example true
       */
      certified: boolean
      /**
       * @description Local name of the location
       * @example Wing A
       */
      localName?: string
      /** @description Summary of cell roll count for this level (aggregated) */
      rollCount: components['schemas']['LocationRollCount']
      /** @description List of residential locations for this summary, including wings and sub-locations such as landings and cells */
      subLocations: unknown
      key: string
    }
    /** @description Prison Roll Summary */
    PrisonRollSummary: {
      /** @description Prison Id */
      prisonId: string
      /**
       * Format: int32
       * @description Unlock roll today
       */
      numUnlockRollToday: number
      /**
       * Format: int32
       * @description Arrived today
       */
      numArrivedToday: number
      /**
       * Format: int32
       * @description Out today
       */
      numOutToday: number
      /**
       * Format: int32
       * @description Current population
       */
      numCurrentPopulation: number
    }
    /** @description Establishment roll count in and out numbers */
    MovementCount: {
      /**
       * Format: int32
       * @description Number of prisoners arrived so far on given date
       */
      in: number
      /**
       * Format: int32
       * @description Number of prisoners that have left so far on given date
       */
      out: number
    }
    /** @description Summary movements in and out of a prison today */
    PrisonRollMovementInfo: {
      /** @description In/Out count of movements today */
      inOutMovementsToday: components['schemas']['MovementCount']
      /**
       * Format: int32
       * @description Prisoner en-route count for today
       */
      enRouteToday: number
    }
    /** @description PersonIdentifier */
    PersonIdentifier: {
      /** @description The identifier type */
      identifierType: string
      /** @description The most recent identifier value of that type. */
      identifierValue: string
    }
    /** @description Offender transaction details */
    OffenderTransactionHistoryDto: {
      /**
       * Format: int64
       * @description Offender Id
       * @example 1
       */
      offenderId?: number
      /**
       * Format: int64
       * @description Transaction Id
       * @example 1
       */
      transactionId?: number
      /**
       * Format: int64
       * @description Transaction Sequence
       * @example 1
       */
      transactionEntrySequence?: number
      /**
       * Format: date
       * @description Transaction Date
       * @example 2020-12-11
       */
      entryDate?: string
      /** @description Transaction Type */
      transactionType?: string
      /**
       * @description Transaction Description
       * @example some textual description here
       */
      entryDescription?: string
      /** @description Transaction Reference Number */
      referenceNumber?: string
      /**
       * @description Currency of these amounts.
       * @example GBP
       */
      currency: string
      /**
       * Format: int64
       * @description Transaction Amount
       * @example 60
       */
      penceAmount?: number
      /**
       * @description Offender Sub Account
       * @example savings,spends,cash
       */
      accountType?: string
      /**
       * @description Posting type. Denotes the direction of money moving in or out of the account
       * @example CR,DR
       */
      postingType?: string
      /**
       * @description Offender number
       * @example G6123VU
       */
      offenderNo?: string
      /**
       * @description The place the transaction took place
       * @example MDI
       */
      agencyId?: string
      /** @description List of related transaction details */
      relatedOffenderTransactions?: components['schemas']['RelatedTransactionDetails'][]
      /**
       * Format: int64
       * @description Balance at a point in time
       */
      currentBalance?: number
      /** @description Indicates that the amount has been cleared from holding */
      holdingCleared?: boolean
      /**
       * Format: date-time
       * @description Creation date time
       * @example 2020-12-11T:20:00
       */
      createDateTime?: string
    }
    /** @description Offender transaction drill down details */
    RelatedTransactionDetails: {
      /**
       * Format: int64
       * @description Transaction details id
       * @example 1
       */
      id?: number
      /**
       * Format: int64
       * @description Transaction Id
       * @example 1
       */
      transactionId?: number
      /**
       * Format: int64
       * @description Transaction Sequence
       * @example 1
       */
      transactionEntrySequence?: number
      /**
       * Format: date
       * @description Calendar date the payment was processed
       * @example 2020-10-12
       */
      calendarDate?: string
      /**
       * @description Pay type code
       * @example UNEMPLOYED,SESSION,LTSICK,STSICK,MATERNAL,RETIRED,HOSPITAL
       */
      payTypeCode?: string
      /**
       * Format: int64
       * @description Event id the payment is associated with
       * @example 1
       */
      eventId?: number
      /**
       * Format: int64
       * @description Payment amount in pence
       * @example 100
       */
      payAmount?: number
      /**
       * Format: int64
       * @description Piece work amount in pence
       * @example 250
       */
      pieceWork?: number
      /**
       * Format: int64
       * @description Bonus payment in pence
       * @example 55
       */
      bonusPay?: number
      /**
       * Format: int64
       * @description Balance at a point in time
       */
      currentBalance?: number
      /**
       * @description Reason for payment
       * @example Cleaner HB1 PM
       */
      paymentDescription?: string
    }
    /** @description A period of time in prison */
    PrisonPeriod: {
      /** @description The book number for this booking */
      bookNumber: string
      /**
       * Format: int64
       * @description The ID of this booking
       */
      bookingId: number
      /**
       * Format: int32
       * @description The order sequence of this booking
       */
      bookingSequence: number
      /**
       * Format: date-time
       * @description Date they first entered prison in this booking
       */
      entryDate: string
      /**
       * Format: date-time
       * @description Date they were last released from prison in this booking if they have been released
       */
      releaseDate?: string
      /** @description List of significant period of time when in prison. The time between these periods means they person was out of prison (but not including court) */
      movementDates: components['schemas']['SignificantMovement'][]
      /** @description List of transfers during this period. Will be empty if there have been no transfers. Transfer via court or temporary absence are also included */
      transfers: components['schemas']['TransferDetail'][]
      /** @description List of prisons the person was detained during this booking period */
      prisons: string[]
    }
    /** @description Prisoners time in prison summary */
    PrisonerInPrisonSummary: {
      /**
       * @description Prisoner Identifier
       * @example A1234AA
       */
      prisonerNumber: string
      /** @description List of date when prisoner was in prison */
      prisonPeriod?: components['schemas']['PrisonPeriod'][]
    }
    /** @description A movement IN and OUT range */
    SignificantMovement: {
      /**
       * @description Reason for movement into prison
       * @example Unconvicted Remand
       */
      reasonInToPrison: string
      /** Format: date-time */
      dateInToPrison?: string
      /**
       * @description Type of movement into prison
       * @enum {string}
       */
      inwardType: 'ADM' | 'TAP'
      /**
       * @description Reason for movement out from prison
       * @example Conditional Release (CJA91) -SH Term>1YR
       */
      reasonOutOfPrison?: string
      /**
       * Format: date-time
       * @description Date this sub-period ended - if it has ended
       */
      dateOutOfPrison?: string
      /**
       * @description Type of movement out of prison
       * @enum {string}
       */
      outwardType?: 'REL' | 'TAP'
      /**
       * @description The initial prison they entered during this period
       * @example MDI
       */
      admittedIntoPrisonId: string
      /**
       * @description The final prison they left during this period - if this period has ended
       * @example MDI
       */
      releaseFromPrisonId?: string
    }
    /** @description A movement that is a transfer */
    TransferDetail: {
      /**
       * Format: date-time
       * @description Date prisoner left the original prison
       */
      dateOutOfPrison?: string
      /**
       * Format: date-time
       * @description Date prisoner entered the new prison. Can be absent if they have not arrived at the prison yet
       */
      dateInToPrison?: string
      /**
       * @description Reason for the transfer
       * @example Compassionate Transfer
       */
      transferReason?: string
      /**
       * @description The prison they were transferred from
       * @example WWI
       */
      fromPrisonId?: string
      /**
       * @description The prison they were transferred to. Can be absent if they have not arrived at the prison yet
       * @example BXI
       */
      toPrisonId: string
    }
    /** @description Offender restriction */
    OffenderRestriction: {
      /**
       * Format: int64
       * @description restriction id
       */
      restrictionId: number
      /** @description Restriction comment text */
      comment?: string
      /**
       * @description code of restriction type
       * @example ACC
       */
      restrictionType: string
      /**
       * @description description of restriction type
       * @example Access Requirements
       */
      restrictionTypeDescription: string
      /**
       * Format: date
       * @description Date from which the restrictions applies
       * @example 1980-01-01
       */
      startDate: string
      /**
       * Format: date
       * @description Date restriction applies to, or indefinitely if null
       * @example 1980-01-01
       */
      expiryDate?: string
      /** @description true if restriction is within the start date and optional expiry date range */
      active: boolean
    }
    /** @description Offender restrictions */
    OffenderRestrictions: {
      /**
       * Format: int64
       * @description Booking id for offender
       */
      bookingId?: number
      /** @description Offender restrictions */
      offenderRestrictions?: components['schemas']['OffenderRestriction'][]
    }
    /** @description Prisoner military record with details about service in the UK Armed Forces. */
    MilitaryRecord: {
      /**
       * Format: int64
       * @description Booking ID of the prisoner.
       * @example 1234567
       */
      bookingId: number
      /**
       * Format: int32
       * @description Sequence number of the military record within the booking.
       * @example 1
       */
      militarySeq: number
      /**
       * @description Code identifying the war zone where the service took place.
       * @example AFG
       */
      warZoneCode?: string
      /**
       * @description Description of the war zone where the service took place.
       * @example Afghanistan
       */
      warZoneDescription?: string
      /**
       * Format: date
       * @description Start date of the military service.
       * @example 2017-06-01
       */
      startDate: string
      /**
       * Format: date
       * @description End date of the military service, if applicable.
       * @example 2019-12-01
       */
      endDate?: string
      /**
       * @description Code indicating the discharge status from the UK military forces.
       * @example HON
       */
      militaryDischargeCode?: string
      /**
       * @description Description of the discharge status from the UK military forces.
       * @example Honourable
       */
      militaryDischargeDescription?: string
      /**
       * @description Code identifying the branch of the UK military in which the individual served.
       * @example ARM
       */
      militaryBranchCode: string
      /**
       * @description Description of the military branch of the UK Armed Forces.
       * @example Army
       */
      militaryBranchDescription?: string
      /**
       * @description Additional notes or details about the military service.
       * @example Deployed to Afghanistan in support of Operation Herrick.
       */
      description?: string
      /**
       * @description Unit number in which the individual served.
       * @example 2nd Battalion, The Royal Anglian Regiment
       */
      unitNumber?: string
      /**
       * @description Location where the individual enlisted in the UK military.
       * @example Windsor, Berkshire
       */
      enlistmentLocation?: string
      /**
       * @description Location where the individual was discharged from the UK military.
       * @example Colchester, Essex
       */
      dischargeLocation?: string
      /**
       * @description Flag indicating if the individual was registered for UK selective military service (National Service).
       * @example false
       */
      selectiveServicesFlag: boolean
      /**
       * @description Code identifying the individual's military rank in the UK forces.
       * @example CPL_ARM
       */
      militaryRankCode?: string
      /**
       * @description Description of the individual's military rank in the UK forces.
       * @example Corporal
       */
      militaryRankDescription?: string
      /**
       * @description Service number of the individual within the UK military.
       * @example 2345678
       */
      serviceNumber?: string
      /**
       * @description Code identifying any disciplinary actions taken against the individual during service.
       * @example CM
       */
      disciplinaryActionCode?: string
      /**
       * @description Description of any disciplinary actions taken against the individual during service.
       * @example Court Martial
       */
      disciplinaryActionDescription?: string
    }
    /** @description Prisoner military records with details about service in the UK Armed Forces. */
    MilitaryRecords: {
      /** @description List of military records. */
      militaryRecords: components['schemas']['MilitaryRecord'][]
    }
    /** @description Incident Case */
    IncidentCase: {
      /**
       * Format: int64
       * @description Incident Case ID
       * @example 2131231
       */
      incidentCaseId: number
      /**
       * @description Title of the case
       * @example Assault on staff member
       */
      incidentTitle: string
      /**
       * @description Type of incident
       * @example ASSAULT
       * @enum {string}
       */
      incidentType:
        | 'MISC'
        | 'ASSAULT'
        | 'FINDS1'
        | 'DISORDER'
        | 'KEY_LOCK'
        | 'ROOF_CLIMB'
        | 'DEATH_NI'
        | 'REL_ERROR'
        | 'FINDS'
        | 'FIRE'
        | 'DAMAGE'
        | 'FOOD_REF'
        | 'BOMB'
        | 'ATT_ESC_E'
        | 'ESCAPE_ESC'
        | 'DRONE'
        | 'TRF3'
        | 'ATT_ESCAPE'
        | 'BREACH'
        | 'ESCAPE_EST'
        | 'FIND'
        | 'TRF2'
        | 'FIND1'
        | 'BARRICADE'
        | 'HOSTAGE'
        | 'SELF_HARM'
        | 'DRUGS'
        | 'TOOL_LOSS'
        | 'RADIO_COMP'
        | 'FIREARM_ETC'
        | 'CON_INDISC'
        | 'KEY_LOCKNEW'
        | 'CLOSE_DOWN'
        | 'DEATH'
        | 'ABSCOND'
        | 'TRF'
        | 'MOBILES'
      /**
       * @description Details about the case
       * @example There was a big fight
       */
      incidentDetails?: string
      /**
       * Format: date
       * @description Date the incident took place
       * @example 2018-02-10
       */
      incidentDate: string
      /**
       * Format: date-time
       * @description Time when incident occurred
       * @example 2018-02-10T16:35:20
       */
      incidentTime: string
      /**
       * Format: int64
       * @description Staff ID who created report
       * @example 2131231
       */
      reportedStaffId: number
      /**
       * Format: date
       * @description Date when incident reported
       * @example 2018-02-11
       */
      reportDate: string
      /**
       * Format: date-time
       * @description Time incident reported
       * @example 2018-02-11T08:00:00
       */
      reportTime: string
      /**
       * @description Current Status of Incident.  Note:
       *     AWAN = Awaiting Analysis
       *     INAN = In Analysis
       *     INREQ = Information Required
       *     INAME =Information Amended
       *     CLOSE = Closed
       *     PIU = Post Incident Update
       *     IUP = Incident Updated
       *     DUP = Duplicate (Created In Error)
       * @example CLOSE
       * @enum {string}
       */
      incidentStatus: 'CLOSE' | 'DUP' | 'AWAN' | 'INAN' | 'INREQ' | 'INAME' | 'PIU' | 'IUP'
      /**
       * @description Agency where incident happened
       * @example MDI
       */
      agencyId?: string
      /**
       * @description Is the response completed?
       * @example true
       */
      responseLockedFlag?: boolean
      /** @description Question And Answer Responses */
      responses?: components['schemas']['IncidentResponse'][]
      /** @description Parties Involved in case */
      parties?: components['schemas']['IncidentParty'][]
    }
    /** @description Incident Party */
    IncidentParty: {
      /**
       * Format: int64
       * @description Booking Id of offender involved
       * @example 1241232
       */
      bookingId: number
      /**
       * Format: int64
       * @description Sequence or each party member
       * @example 1
       */
      partySeq: number
      /**
       * Format: int64
       * @description Staff Member ID (optional)
       * @example 1534133
       */
      staffId?: number
      /**
       * Format: int64
       * @description Person (non-staff) ID (optional)
       * @example 544233
       */
      personId?: number
      /**
       * @description Role in the Incident
       * @example ASSIAL
       */
      participationRole: string
      /**
       * @description Outcome Code
       * @example POR
       */
      outcomeCode: string
      /**
       * @description Additional Comments
       * @example Some additional Information
       */
      commentText: string
      /**
       * Format: int64
       * @description Incident Case ID
       * @example 12431243
       */
      incidentCaseId: number
    }
    /** @description Incident Reponses */
    IncidentResponse: {
      /**
       * @description The Question
       * @example Was it a violent assault?
       */
      question: string
      /**
       * @description The Answer to the Question
       * @example YES
       */
      answer: string
      /**
       * Format: int32
       * @description Sequence of presented Questions
       * @example 2131231
       */
      questionSeq: number
      /**
       * Format: int64
       * @description ID for Questionnaire Question
       * @example 983431
       */
      questionnaireQueId: number
      /**
       * Format: int64
       * @description ID for Questionnaire Answer
       * @example 983434
       */
      questionnaireAnsId: number
      /**
       * Format: date-time
       * @description Date response was recorded
       * @example 2018-03-04T11:00:05
       */
      responseDate?: string
      /**
       * @description Additional comments for the response to the question
       * @example The knife was in his pocket
       */
      responseCommentText?: string
      /**
       * Format: int64
       * @description Staff Id recording comment
       * @example 123123
       */
      recordStaffId?: number
    }
    /** @description Damage obligation for an offender */
    OffenderDamageObligationModel: {
      /**
       * Format: int64
       * @description Identifier of damage obligation
       * @example 1
       */
      id?: number
      /**
       * @description Offender number
       * @example G4346UT
       */
      offenderNo?: string
      /**
       * @description Reference number
       * @example 841177/1, A841821/1, 842371
       */
      referenceNumber?: string
      /**
       * Format: date-time
       * @description The start date time when the damage obligation started
       * @example 2020-12-10T21:00:00
       */
      startDateTime?: string
      /**
       * Format: date-time
       * @description The end date time when the damage obligation ended
       * @example 2020-12-11T21:00:00
       */
      endDateTime?: string
      /**
       * @description Prison the damages occurred
       * @example MDI
       */
      prisonId?: string
      /**
       * @description Original amount to pay
       * @example 50
       */
      amountToPay?: number
      /**
       * @description Amount paid
       * @example 10
       */
      amountPaid?: number
      /**
       * @description Status
       * @example ACTIVE
       */
      status?: string
      /**
       * @description Comment
       * @example Damages to canteen furniture
       */
      comment?: string
      /**
       * @description Currency of these amounts.
       * @example GBP
       */
      currency: string
    }
    /** @description Offender damage obligation response */
    OffenderDamageObligationResponse: {
      /** @description List of offender damage obligations */
      damageObligations?: components['schemas']['OffenderDamageObligationModel'][]
    }
    /** @description Core Person Record Physical Attributes */
    CorePersonPhysicalAttributes: {
      /**
       * Format: int32
       * @description Height (in centimetres)
       */
      height?: number
      /**
       * Format: int32
       * @description Weight (in kilograms)
       */
      weight?: number
      /** @description Hair type or colour */
      hair?: components['schemas']['ProfileCode']
      /** @description Facial hair type */
      facialHair?: components['schemas']['ProfileCode']
      /** @description Face shape */
      face?: components['schemas']['ProfileCode']
      /** @description Build */
      build?: components['schemas']['ProfileCode']
      /** @description Left eye colour */
      leftEyeColour?: components['schemas']['ProfileCode']
      /** @description Right eye colour */
      rightEyeColour?: components['schemas']['ProfileCode']
      /**
       * @description Shoe size
       * @example 9
       */
      shoeSize?: string
    }
    PK: {
      type?: components['schemas']['ProfileType']
      code?: string
    }
    ProfileCode: {
      createUserId?: string
      /** Format: date-time */
      createDatetime?: string
      modifyUserId?: string
      /** Format: date-time */
      modifyDatetime?: string
      id?: components['schemas']['PK']
      description?: string
      updateAllowed?: boolean
      active?: boolean
      /** Format: date */
      endDate?: string
      /** Format: int32 */
      listSequence?: number
    }
    ProfileType: {
      createUserId?: string
      /** Format: date-time */
      createDatetime?: string
      modifyUserId?: string
      /** Format: date-time */
      modifyDatetime?: string
      type?: string
      category?: string
      description?: string
      mandatory?: boolean
      updateAllowed?: boolean
      codeValueType?: string
      active?: boolean
      /** Format: date */
      endDate?: string
      /** Format: int32 */
      listSequence?: number
    }
    /** @description Core Person Record Communication Needs */
    CorePersonCommunicationNeeds: {
      /**
       * @description Prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /** @description Language preferences */
      languagePreferences?: components['schemas']['CorePersonLanguagePreferences']
      /** @description List of secondary languages */
      secondaryLanguages: components['schemas']['CorePersonSecondaryLanguage'][]
    }
    /** @description Core Person Record Language Preferences */
    CorePersonLanguagePreferences: {
      /** @description Preferred spoken language */
      preferredSpokenLanguage?: components['schemas']['LanguageReferenceCode']
      /** @description Preferred written language */
      preferredWrittenLanguage?: components['schemas']['LanguageReferenceCode']
      /**
       * @description Is interpreter required
       * @example true
       */
      interpreterRequired?: boolean
    }
    /** @description Secondary language information */
    CorePersonSecondaryLanguage: {
      /** @description Language reference code */
      language: components['schemas']['LanguageReferenceCode']
      /** @description Reading proficiency */
      canRead: boolean
      /** @description Writing proficiency */
      canWrite: boolean
      /** @description Speaking proficiency */
      canSpeak: boolean
    }
    LanguageReferenceCode: {
      domain?: string
      code?: string
      description?: string
      /** Format: int32 */
      listSequence?: number
      active?: boolean
      primaryKey?: components['schemas']['Pk']
    }
    Pk: {
      domain?: string
      code?: string
    }
    /** @description Offender Contact */
    OffenderContact: {
      /**
       * @description Last name of the contact
       * @example Smith
       */
      lastName: string
      /**
       * @description First Name
       * @example John
       */
      firstName: string
      /**
       * @description Middle Names
       * @example Mark
       */
      middleName?: string
      /**
       * Format: date
       * @description date of birth
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /**
       * @description Contact type
       * @example O
       */
      contactType: string
      /**
       * @description Contact type text
       * @example Official
       */
      contactTypeDescription?: string
      /**
       * @description Relationship to prisoner
       * @example RO
       */
      relationshipCode: string
      /**
       * @description Relationship text
       * @example Responsible Officer
       */
      relationshipDescription?: string
      /**
       * @description Comments
       * @example Some additional information
       */
      commentText?: string
      /**
       * @description Is an emergency contact
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Indicates that the contact is Next of Kin Type
       * @example false
       */
      nextOfKin: boolean
      /**
       * Format: int64
       * @description id of the person
       * @example 5871791
       */
      personId?: number
      /**
       * @description Approved Visitor
       * @example true
       */
      approvedVisitor: boolean
      /**
       * Format: int64
       * @description Offender Booking Id for this contact
       * @example 2468081
       */
      bookingId: number
      /** @description List of emails associated with the contact */
      emails?: components['schemas']['Email'][]
      /** @description List of phone numbers associated with the contact */
      phones?: components['schemas']['Telephone'][]
      /** @description List of restrictions associated with the contact */
      restrictions?: components['schemas']['VisitorRestriction'][]
      /**
       * @description active contact
       * @example true
       */
      active: boolean
    }
    /** @description Offender contacts */
    OffenderContacts: {
      /** @description Offender contacts */
      offenderContacts?: components['schemas']['OffenderContact'][]
    }
    /** @description Visitor restriction */
    VisitorRestriction: {
      /**
       * Format: int64
       * @description restriction id
       */
      restrictionId: number
      /** @description Restriction comment text */
      comment?: string
      /** @description code of restriction type */
      restrictionType: string
      /** @description description of restriction type */
      restrictionTypeDescription: string
      /**
       * Format: date
       * @description Date from which the restrictions applies
       * @example 1980-01-01
       */
      startDate: string
      /**
       * Format: date
       * @description Date restriction applies to, or indefinitely if null
       * @example 1980-01-01
       */
      expiryDate?: string
      /** @description true if applied globally to the contact or false if applied in the context of a visit */
      globalRestriction: boolean
    }
    /** @description Court case details */
    CourtSentences: {
      /**
       * @description The case information number
       * @example TD20177010
       */
      caseInfoNumber?: string
      /**
       * Format: int64
       * @description The case identifier (internal)
       * @example 1
       */
      id?: number
      /**
       * Format: int32
       * @description The case sequence number for the offender
       * @example 1
       */
      caseSeq?: number
      /**
       * Format: date
       * @description The begin date of the court hearings
       * @example 2019-12-01
       */
      beginDate?: string
      /** @description Court details */
      court?: components['schemas']['Agency']
      /**
       * @description The case type
       * @example Adult
       */
      caseType?: string
      /** @description The prefix of the case number */
      caseInfoPrefix?: string
      /**
       * @description The case status
       * @example ACTIVE
       * @enum {string}
       */
      caseStatus?: 'ACTIVE' | 'CLOSED' | 'INACTIVE'
      /** @description Court sentences associated with the court case */
      sentences?: components['schemas']['SentencesOffencesTerms'][]
      /** @description Issuing Court Details */
      issuingCourt?: components['schemas']['Agency']
      /**
       * Format: date
       * @description Issuing Court Date
       */
      issuingCourtDate?: string
    }
    /** @description Key Dates */
    KeyDates: {
      /**
       * Format: date
       * @description Sentence start date.
       * @example 2010-02-03
       */
      sentenceStartDate: string
      /**
       * Format: date
       * @description Effective sentence end date
       * @example 2020-02-03
       */
      effectiveSentenceEndDate?: string
      /**
       * Format: int32
       * @description ADA - days added to sentence term due to adjustments.
       * @example 5
       */
      additionalDaysAwarded?: number
      /**
       * Format: date
       * @description Release date for non-DTO sentence (if applicable). This will be based on one of ARD, CRD, NPD or PRRD.
       * @example 2020-04-01
       */
      nonDtoReleaseDate?: string
      /**
       * @description Indicates which type of non-DTO release date is the effective release date. One of 'ARD', 'CRD', 'NPD' or 'PRRD'.
       * @example CRD
       * @enum {string}
       */
      nonDtoReleaseDateType: 'ARD' | 'CRD' | 'NPD' | 'PRRD'
      /**
       * Format: date
       * @description Confirmed release date for offender.
       * @example 2020-04-20
       */
      confirmedReleaseDate?: string
      /**
       * Format: date
       * @description Confirmed, actual, approved, provisional or calculated release date for offender, according to offender release date algorithm.<h3>Algorithm</h3><ul><li>If there is a confirmed release date, the offender release date is the confirmed release date.</li><li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li><li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li></ul>
       * @example 2020-04-01
       */
      releaseDate?: string
      /**
       * Format: date
       * @description SED - date on which sentence expires.
       * @example 2020-02-03
       */
      sentenceExpiryDate?: string
      /**
       * Format: date
       * @description ARD - calculated automatic (unconditional) release date for offender.
       * @example 2020-02-03
       */
      automaticReleaseDate?: string
      /**
       * Format: date
       * @description CRD - calculated conditional release date for offender.
       * @example 2020-02-03
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description NPD - calculated non-parole date for offender (relating to the 1991 act).
       * @example 2020-02-03
       */
      nonParoleDate?: string
      /**
       * Format: date
       * @description PRRD - calculated post-recall release date for offender.
       * @example 2020-02-03
       */
      postRecallReleaseDate?: string
      /**
       * Format: date
       * @description LED - date on which offender licence expires.
       * @example 2020-02-03
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description HDCED - date on which offender will be eligible for home detention curfew.
       * @example 2020-02-03
       */
      homeDetentionCurfewEligibilityDate?: string
      /**
       * Format: date
       * @description PED - date on which offender is eligible for parole.
       * @example 2020-02-03
       */
      paroleEligibilityDate?: string
      /**
       * Format: date
       * @description HDCAD - the offender's actual home detention curfew date.
       * @example 2020-02-03
       */
      homeDetentionCurfewActualDate?: string
      /**
       * Format: date
       * @description APD - the offender's actual parole date.
       * @example 2020-02-03
       */
      actualParoleDate?: string
      /**
       * Format: date
       * @description ROTL - the date on which offender will be released on temporary licence.
       * @example 2020-02-03
       */
      releaseOnTemporaryLicenceDate?: string
      /**
       * Format: date
       * @description ERSED - the date on which offender will be eligible for early removal (under the Early Removal Scheme for foreign nationals).
       * @example 2020-02-03
       */
      earlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description ETD - early term date for offender.
       * @example 2020-02-03
       */
      earlyTermDate?: string
      /**
       * Format: date
       * @description MTD - mid term date for offender.
       * @example 2020-02-03
       */
      midTermDate?: string
      /**
       * Format: date
       * @description LTD - late term date for offender.
       * @example 2020-02-03
       */
      lateTermDate?: string
      /**
       * Format: date
       * @description TUSED - top-up supervision expiry date for offender.
       * @example 2020-02-03
       */
      topupSupervisionExpiryDate?: string
      /**
       * Format: date
       * @description Date on which minimum term is reached for parole (indeterminate/life sentences).
       * @example 2020-02-03
       */
      tariffDate?: string
      /**
       * Format: date
       * @description DPRRD - Detention training order post recall release date
       * @example 2020-02-03
       */
      dtoPostRecallReleaseDate?: string
      /**
       * Format: date
       * @description TERSED - Tariff early removal scheme eligibility date
       * @example 2020-02-03
       */
      tariffEarlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description Offender's home detention curfew end date - calculated as one day before the releaseDate.
       * @example 2019-04-01
       */
      homeDetentionCurfewEndDate?: string
      /**
       * Format: date
       * @description Top-up supervision start date for offender - calculated as licence end date + 1 day or releaseDate if licence end date not set.
       * @example 2019-04-01
       */
      topupSupervisionStartDate?: string
    }
    /** @description Offence details related to an offender */
    OffenderOffence: {
      /**
       * Format: int64
       * @description Internal ID for charge relating to offender
       */
      offenderChargeId?: number
      /**
       * Format: date
       * @description Offence Start Date
       */
      offenceStartDate?: string
      /**
       * Format: date
       * @description Offence End Date
       */
      offenceEndDate?: string
      /** @description Offence statute */
      offenceStatute?: string
      /** @description Offence Code */
      offenceCode?: string
      /** @description Offence Description */
      offenceDescription?: string
      /** @description Offence Indicators */
      indicators?: string[]
    }
    /** @description Prison Term */
    PrisonTerm: {
      /**
       * @description Book Number (Prison) / Prison Number (Probation)
       * @example B45232
       */
      bookNumber: string
      /**
       * Format: int64
       * @description Booking Identifier (internal)
       * @example 12312312
       */
      bookingId: number
      courtSentences?: components['schemas']['CourtSentences'][]
      /** @description Licence sentences */
      licenceSentences?: components['schemas']['SentencesOffencesTerms'][]
      keyDates?: components['schemas']['KeyDates']
      sentenceAdjustments?: components['schemas']['SentenceAdjustmentDetail']
    }
    /** @description Sentence adjustments */
    SentenceAdjustmentDetail: {
      /**
       * Format: int32
       * @description Number of additional days awarded
       * @example 12
       */
      additionalDaysAwarded?: number
      /**
       * Format: int32
       * @description Number unlawfully at large days
       * @example 12
       */
      unlawfullyAtLarge?: number
      /**
       * Format: int32
       * @description Number of lawfully at large days
       * @example 12
       */
      lawfullyAtLarge?: number
      /**
       * Format: int32
       * @description Number of restored additional days awarded
       * @example 12
       */
      restoredAdditionalDaysAwarded?: number
      /**
       * Format: int32
       * @description Number of special remission days
       * @example 12
       */
      specialRemission?: number
      /**
       * Format: int32
       * @description Number of recall sentence remand days
       * @example 12
       */
      recallSentenceRemand?: number
      /**
       * Format: int32
       * @description Number of recall sentence tagged bail days
       * @example 12
       */
      recallSentenceTaggedBail?: number
      /**
       * Format: int32
       * @description Number of remand days
       * @example 12
       */
      remand?: number
      /**
       * Format: int32
       * @description Number of tagged bail days
       * @example 12
       */
      taggedBail?: number
      /**
       * Format: int32
       * @description Number of unused remand days
       * @example 12
       */
      unusedRemand?: number
      /**
       * Format: int32
       * @description Number of time spent in custody abroad days
       * @example 12
       */
      timeSpentInCustodyAbroad?: number
      /**
       * Format: int32
       * @description Number of time spent as an appeal applicant days
       * @example 12
       */
      timeSpentAsAnAppealApplicant?: number
    }
    /** @description Sentence Summary */
    SentenceSummary: {
      /**
       * @description Prisoner Identifier
       * @example A1234AA
       */
      prisonerNumber: string
      /** @description Most recent term in prison */
      latestPrisonTerm?: components['schemas']['PrisonTerm']
    }
    /** @description Offender sentence and offence details */
    SentencesOffencesTerms: {
      /**
       * Format: int32
       * @description Sentence sequence - a number representing the order
       */
      sentenceSequence?: number
      /**
       * Format: int32
       * @description This sentence is consecutive to this sequence (if populated)
       */
      consecutiveToSequence?: number
      /** @description This sentence status: A = Active I = Inactive */
      sentenceStatus?: string
      /** @description The sentence category e.g. 2003 or Licence */
      sentenceCategory?: string
      /** @description The sentence calculation type e.g. R or ADIMP_ORA */
      sentenceCalculationType?: string
      /** @description The sentence type description e.g. Standard Determinate Sentence */
      sentenceTypeDescription?: string
      /**
       * Format: date
       * @description The sentence start date for this sentence (aka court date)
       */
      sentenceStartDate?: string
      /**
       * Format: date
       * @description The sentence end date for this sentence
       */
      sentenceEndDate?: string
      /**
       * Format: double
       * @description Fine amount.
       */
      fineAmount: number
      /**
       * Format: int64
       * @description Sentence line number
       * @example 1
       */
      lineSeq: number
      /** @description The offences related to this sentence (will usually only have one offence per sentence) */
      offences?: components['schemas']['OffenderOffence'][]
      /** @description The terms related to this sentence (will usually only have one term per sentence) */
      terms?: components['schemas']['Terms'][]
    }
    /** @description Offender Sentence terms details for booking id */
    Terms: {
      /**
       * Format: int32
       * @description Sentence term number within sentence.
       * @example 1
       */
      termSequence: number
      /**
       * Format: int32
       * @description Sentence number which this sentence follows if consecutive, otherwise concurrent.
       * @example 2
       */
      consecutiveTo?: number
      /**
       * @description Sentence type, using reference data from table SENTENCE_CALC_TYPES.
       * @example 2
       */
      sentenceType?: string
      /**
       * @description Sentence term code.
       * @example IMP
       */
      sentenceTermCode: string
      /**
       * @description Sentence type description.
       * @example 2
       */
      sentenceTypeDescription?: string
      /**
       * Format: date
       * @description Start date of sentence term.
       * @example 2018-12-31
       */
      startDate: string
      /**
       * Format: int32
       * @description Sentence length years.
       */
      years?: number
      /**
       * Format: int32
       * @description Sentence length months.
       */
      months?: number
      /**
       * Format: int32
       * @description Sentence length weeks.
       */
      weeks?: number
      /**
       * Format: int32
       * @description Sentence length days.
       */
      days?: number
      /** @description Whether this is a life sentence. */
      lifeSentence: boolean
    }
    Belief: {
      /**
       * Format: int64
       * @description Prisoner booking id
       * @example 1123456
       */
      bookingId: number
      /**
       * Format: int64
       * @description Offender belief id
       * @example 1123456
       */
      beliefId: number
      /**
       * @description Belief Code
       * @example SCIE
       */
      beliefCode: string
      /**
       * @description Description associated with the belief code
       * @example Scientologist
       */
      beliefDescription: string
      /**
       * Format: date
       * @description Date the belief started
       * @example 2024-01-01
       */
      startDate: string
      /**
       * Format: date
       * @description Date the belief ended
       * @example 2024-12-12
       */
      endDate?: string
      /** @description Was a reason given for change of belief? */
      changeReason?: boolean
      /** @description Comments describing reason for change of belief */
      comments?: string
      /** @description First name of staff member that added belief */
      addedByFirstName: string
      /** @description Last name of staff member that added belief */
      addedByLastName: string
      /** @description First name of staff member that updated belief */
      updatedByFirstName?: string
      /** @description Last name of staff member that updated belief */
      updatedByLastName?: string
      /**
       * Format: date
       * @description Date belief was updated
       */
      updatedDate?: string
      /** @description Verified flag */
      verified?: boolean
    }
    /** @description Base Sentence Calc Dates */
    BaseSentenceCalcDates: {
      /**
       * Format: date
       * @description SED - date on which sentence expires.
       * @example 2020-02-03
       */
      sentenceExpiryDate?: string
      /**
       * Format: date
       * @description ARD - calculated automatic (unconditional) release date for offender.
       * @example 2020-02-03
       */
      automaticReleaseDate?: string
      /**
       * Format: date
       * @description CRD - calculated conditional release date for offender.
       * @example 2020-02-03
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description NPD - calculated non-parole date for offender (relating to the 1991 act).
       * @example 2020-02-03
       */
      nonParoleDate?: string
      /**
       * Format: date
       * @description PRRD - calculated post-recall release date for offender.
       * @example 2020-02-03
       */
      postRecallReleaseDate?: string
      /**
       * Format: date
       * @description LED - date on which offender licence expires.
       * @example 2020-02-03
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description HDCED - date on which offender will be eligible for home detention curfew.
       * @example 2020-02-03
       */
      homeDetentionCurfewEligibilityDate?: string
      /**
       * Format: date
       * @description PED - date on which offender is eligible for parole.
       * @example 2020-02-03
       */
      paroleEligibilityDate?: string
      /**
       * Format: date
       * @description HDCAD - the offender's actual home detention curfew date.
       * @example 2020-02-03
       */
      homeDetentionCurfewActualDate?: string
      /**
       * Format: date
       * @description APD - the offender's actual parole date.
       * @example 2020-02-03
       */
      actualParoleDate?: string
      /**
       * Format: date
       * @description ROTL - the date on which offender will be released on temporary licence.
       * @example 2020-02-03
       */
      releaseOnTemporaryLicenceDate?: string
      /**
       * Format: date
       * @description ERSED - the date on which offender will be eligible for early removal (under the Early Removal Scheme for foreign nationals).
       * @example 2020-02-03
       */
      earlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description ETD - early term date for offender.
       * @example 2020-02-03
       */
      earlyTermDate?: string
      /**
       * Format: date
       * @description MTD - mid term date for offender.
       * @example 2020-02-03
       */
      midTermDate?: string
      /**
       * Format: date
       * @description LTD - late term date for offender.
       * @example 2020-02-03
       */
      lateTermDate?: string
      /**
       * Format: date
       * @description TUSED - top-up supervision expiry date for offender.
       * @example 2020-02-03
       */
      topupSupervisionExpiryDate?: string
      /**
       * Format: date
       * @description Date on which minimum term is reached for parole (indeterminate/life sentences).
       * @example 2020-02-03
       */
      tariffDate?: string
      /**
       * Format: date
       * @description DPRRD - Detention training order post recall release date
       * @example 2020-02-03
       */
      dtoPostRecallReleaseDate?: string
      /**
       * Format: date
       * @description TERSED - Tariff early removal scheme eligibility date
       * @example 2020-02-03
       */
      tariffEarlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description Effective sentence end date
       * @example 2020-02-03
       */
      effectiveSentenceEndDate?: string
    }
    /** @description Offender Sentence Calculation */
    OffenderSentenceCalcBaseSentenceCalcDates: {
      /**
       * Format: int64
       * @description Offender booking id.
       * @example 12341321
       */
      bookingId: number
      /**
       * @description Offender Unique Reference
       * @example A1000AA
       */
      offenderNo: string
      /**
       * @description First Name
       * @example John
       */
      firstName: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName: string
      /**
       * @description Agency Id
       * @example LEI
       */
      agencyLocationId: string
      /**
       * @description Is this the most recent active booking
       * @example true
       */
      mostRecentActiveBooking: boolean
      /** @description Offender Sentence Detail Information */
      sentenceDetail?: components['schemas']['BaseSentenceCalcDates']
    }
    /** @description Offender sentence and offence details */
    OffenderSentenceAndOffences: {
      /**
       * Format: int64
       * @description The bookingId this sentence and offence(s) relates to
       */
      bookingId?: number
      /**
       * Format: int32
       * @description Sentence sequence - a unique identifier a sentence on a booking
       */
      sentenceSequence?: number
      /**
       * Format: int32
       * @description This sentence is consecutive to this sequence (if populated)
       */
      consecutiveToSequence?: number
      /**
       * Format: int64
       * @description Sentence line sequence - a number representing the order
       */
      lineSequence?: number
      /**
       * Format: int32
       * @description Case sequence - a number representing the order of the case this sentence belongs to
       */
      caseSequence?: number
      /** @description Case reference - a string identifying the case this sentence belongs to */
      caseReference?: string
      /** @description Court description - a string describing the the court that the case was heard at */
      courtDescription?: string
      /** @description This sentence status: A = Active I = Inactive */
      sentenceStatus?: string
      /** @description The sentence category e.g. 2003 or Licence */
      sentenceCategory?: string
      /** @description The sentence calculation type e.g. R or ADIMP_ORA */
      sentenceCalculationType?: string
      /** @description The sentence type description e.g. Standard Determinate Sentence */
      sentenceTypeDescription?: string
      /**
       * Format: date
       * @description The sentenced date for this sentence (aka court date)
       */
      sentenceDate?: string
      /**
       * Format: date
       * @description Date that this sentence did or will start
       */
      sentenceStartDate?: string
      /**
       * Format: date
       * @description Date that this sentence would expire
       */
      sentenceEndDate?: string
      /** @description The sentence terms of the sentence */
      terms?: components['schemas']['OffenderSentenceTerm'][]
      /** @description The offences related to this sentence (will usually only have one offence per sentence) */
      offences?: components['schemas']['OffenderOffence'][]
      /**
       * Format: double
       * @description The amount of fine related to the sentence and offence
       */
      fineAmount?: number
    }
    /** @description Offender sentence term */
    OffenderSentenceTerm: {
      /**
       * Format: int32
       * @description The term duration - years
       * @example 1
       */
      years?: number
      /**
       * Format: int32
       * @description The term duration - months
       * @example 2
       */
      months?: number
      /**
       * Format: int32
       * @description The term duration - weeks
       * @example 3
       */
      weeks?: number
      /**
       * Format: int32
       * @description The term duration - days
       * @example 4
       */
      days?: number
      /** @description The sentence term code, indicating if this is the term of imprisonment or license */
      code?: string
    }
    /** @description Offender fine payments */
    OffenderFinePaymentDto: {
      /**
       * Format: int64
       * @description The bookingId this payment relates to
       */
      bookingId?: number
      /**
       * Format: int32
       * @description Payment sequence - a unique identifier a payment on a booking
       */
      sequence?: number
      /**
       * Format: date
       * @description The date of the payment
       */
      paymentDate?: string
      /** @description The amount of the payment */
      paymentAmount?: number
    }
    /** @description Offender Calculated Key Dates */
    OffenderCalculatedKeyDates: {
      /**
       * Format: date
       * @description HDCED - date on which offender will be eligible for home detention curfew.
       * @example 2020-02-03
       */
      homeDetentionCurfewEligibilityDate?: string
      /**
       * Format: date
       * @description ETD - early term date for offender.
       * @example 2020-02-03
       */
      earlyTermDate?: string
      /**
       * Format: date
       * @description MTD - mid term date for offender.
       * @example 2020-02-03
       */
      midTermDate?: string
      /**
       * Format: date
       * @description LTD - late term date for offender.
       * @example 2020-02-03
       */
      lateTermDate?: string
      /**
       * Format: date
       * @description DPRRD - Detention training order post recall release date
       * @example 2020-02-03
       */
      dtoPostRecallReleaseDate?: string
      /**
       * Format: date
       * @description ARD - calculated automatic (unconditional) release date for offender.
       * @example 2020-02-03
       */
      automaticReleaseDate?: string
      /**
       * Format: date
       * @description CRD - calculated conditional release date for offender.
       * @example 2020-02-03
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description PED - date on which offender is eligible for parole.
       * @example 2020-02-03
       */
      paroleEligibilityDate?: string
      /**
       * Format: date
       * @description NPD - calculated non-parole date for offender (relating to the 1991 act).
       * @example 2020-02-03
       */
      nonParoleDate?: string
      /**
       * Format: date
       * @description LED - date on which offender licence expires.
       * @example 2020-02-03
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description PRRD - calculated post-recall release date for offender.
       * @example 2020-02-03
       */
      postRecallReleaseDate?: string
      /**
       * Format: date
       * @description SED - date on which sentence expires.
       * @example 2020-02-03
       */
      sentenceExpiryDate?: string
      /**
       * Format: date
       * @description TUSED - top-up supervision expiry date for offender.
       * @example 2020-02-03
       */
      topupSupervisionExpiryDate?: string
      /**
       * Format: date
       * @description ERSED - Early Removal Scheme Eligibility Date
       * @example 2020-02-03
       */
      earlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description Effective sentence end date.
       * @example 2020-02-03
       */
      effectiveSentenceEndDate: string
      /**
       * @description Sentence length in the format 00 years/00 months/00 days.
       * @example 11/00/00
       */
      sentenceLength: string
      /**
       * Format: date
       * @description HDCAD - Home Detention Curfew Approved date
       * @example 2020-02-03
       */
      homeDetentionCurfewApprovedDate?: string
      /**
       * Format: date
       * @description Tarrif - Tarrif date
       * @example 2020-02-03
       */
      tariffDate?: string
      /**
       * Format: date
       * @description Tarrif Expiry date
       * @example 2020-02-03
       */
      tariffExpiredRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description APD - Approved Parole date
       * @example 2020-02-03
       */
      approvedParoleDate?: string
      /**
       * Format: date
       * @description ROTL - Release on Temporary Licence
       * @example 2020-02-03
       */
      releaseOnTemporaryLicenceDate?: string
      /**
       * @description Judicially imposed length in the format 00 years/00 months/00 days. Will default to 'sentenceLength'
       * @example 11/00/00
       */
      judiciallyImposedSentenceLength?: string
      /**
       * @description Comments for the given calculation
       * @example Calculated for new sentence
       */
      comment?: string
      /**
       * @description The reason code for the calculation
       * @example NEW
       */
      reasonCode?: string
      /**
       * Format: date-time
       * @description The date and time the calculation was recorded
       * @example 2017-10-31T01:30:00
       */
      calculatedAt?: string
    }
    /** @description Latest TUSED dates and associated info for offender */
    LatestTusedData: {
      /** Format: date */
      latestTused?: string
      /** Format: date */
      latestOverrideTused?: string
      comment?: string
      offenderNo?: string
    }
    /** @description Offender Sentence Calculation Summary */
    SentenceCalculationSummary: {
      /** Format: int64 */
      bookingId: number
      offenderNo: string
      firstName?: string
      lastName: string
      agencyLocationId: string
      agencyDescription: string
      /** Format: int64 */
      offenderSentCalculationId: number
      /** Format: date-time */
      calculationDate: string
      /** Format: int64 */
      staffId?: number
      commentText?: string
      calculationReason: string
      calculatedByUserId: string
    }
    /** @description AssessmentSummary */
    AssessmentSummary: {
      /**
       * Format: int64
       * @description Booking number
       * @example 123456
       */
      bookingId: number
      /**
       * Format: int32
       * @description Sequence number of assessment within booking
       * @example 1
       */
      assessmentSeq: number
      /**
       * @description Offender number (e.g. NOMS Number).
       * @example GV09876N
       */
      offenderNo: string
      /**
       * @description Classification code. This will not have a value if the assessment is incomplete or pending
       * @example STANDARD
       */
      classificationCode?: string
      /**
       * @description Identifies the type of assessment
       * @example CSR
       */
      assessmentCode: string
      /** @description Indicates whether this is a CSRA assessment */
      cellSharingAlertFlag: boolean
      /**
       * Format: date
       * @description Date assessment was created
       * @example 2018-02-11
       */
      assessmentDate: string
      /**
       * @description The assessment creation agency id
       * @example MDI
       */
      assessmentAgencyId?: string
      /**
       * @description Comment from assessor
       * @example Comment details
       */
      assessmentComment?: string
      /**
       * @description Username who made the assessment
       * @example NGK33Y
       */
      assessorUser?: string
      /**
       * Format: date
       * @description Date of next review
       * @example 2018-02-11
       */
      nextReviewDate?: string
    }
    /** @description AssessmentDetail */
    AssessmentDetail: {
      /**
       * Format: int64
       * @description Booking number
       * @example 123456
       */
      bookingId: number
      /**
       * Format: int32
       * @description Sequence number of assessment within booking
       * @example 1
       */
      assessmentSeq: number
      /**
       * @description Offender number (e.g. NOMS Number).
       * @example GV09876N
       */
      offenderNo: string
      /**
       * @description Classification code. This will not have a value if the assessment is incomplete or pending
       * @example STANDARD
       */
      classificationCode?: string
      /**
       * @description Identifies the type of assessment
       * @example CSR
       */
      assessmentCode: string
      /** @description Indicates whether this is a CSRA assessment */
      cellSharingAlertFlag: boolean
      /**
       * Format: date
       * @description Date assessment was created
       * @example 2018-02-11
       */
      assessmentDate: string
      /**
       * @description The assessment creation agency id
       * @example MDI
       */
      assessmentAgencyId?: string
      /**
       * @description Comment from assessor
       * @example Comment details
       */
      assessmentComment?: string
      /**
       * @description Username who made the assessment
       * @example NGK33Y
       */
      assessorUser?: string
      /**
       * Format: date
       * @description Date of next review
       * @example 2018-02-11
       */
      nextReviewDate?: string
      /**
       * @description The code of the committee that conducted the assessment
       * @example REVIEW
       */
      assessmentCommitteeCode?: string
      /**
       * @description The name of the committee that conducted the assessment
       * @example REVIEW
       */
      assessmentCommitteeName?: string
      /**
       * Format: date
       * @description Date of assessment approval
       * @example 2018-02-11
       */
      approvalDate?: string
      /**
       * @description The code of the committee that conducted the approval
       * @example REVIEW
       */
      approvalCommitteeCode?: string
      /**
       * @description The name of the committee that conducted the approval
       * @example REVIEW
       */
      approvalCommitteeName?: string
      /**
       * @description Classification code before it was reviewed
       * @example HI
       */
      originalClassificationCode?: string
      /**
       * @description The reason for the review of the classification
       * @example HI
       */
      classificationReviewReason?: string
      /**
       * @description The classification code entered to override the calculated value prior to approval
       * @example HI
       */
      overridingClassificationCode?: string
      /**
       * @description The classification code originally calculated by NOMIS based on the answers given to the questions when carrying out the initial review
       * @example HI
       */
      calculatedClassificationCode?: string
      /**
       * @description The classification code that has been approved
       * @example HI
       */
      approvedClassificationCode?: string
      /**
       * @description Comment added at approval of classification code
       * @example Comment
       */
      approvalComment?: string
      /**
       * @description The reason given for overriding the calculated classification code
       * @example Overriding comment
       */
      overrideReason?: string
      /** @description Assessment questions and answers, in the order they were asked */
      questions: components['schemas']['AssessmentQuestion'][]
    }
    /** @description AssessmentQuestion */
    AssessmentQuestion: {
      /** @description Question */
      question: string
      /** @description The answer given. More than one answer might have been given, in which case the other answers will be in the additionalAnswers property */
      answer?: string
      /** @description If a question has more than one answer, all but the first answer will be in this property */
      additionalAnswers?: string[]
    }
    PageOffenceDto: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['OffenceDto'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Offender out today details */
    OffenderOutTodayDto: {
      /** @description Offender Unique Reference */
      offenderNo: string
      /** Format: date */
      dateOfBirth: string
      /** @description Reason for out movement */
      reasonDescription?: string
      timeOut: string
      firstName: string
      lastName: string
      /** @description Address to where the prisoner is moving */
      toAddress?: string
      /** @description Type of movement */
      movementType?: string
    }
    /** @description Summary of an offender counted as Establishment Roll - In */
    OffenderIn: {
      /** @description Display Prisoner Number */
      offenderNo: string
      /**
       * Format: int64
       * @description Booking ID
       */
      bookingId: number
      /**
       * Format: date
       * @description Date of birth
       */
      dateOfBirth: string
      /** @description First name */
      firstName: string
      /** @description Middle name */
      middleName?: string
      /** @description Display Prisoner Number */
      lastName: string
      /** @description Id for Agency travelling from */
      fromAgencyId?: string
      /** @description Description for Agency travelling from */
      fromAgencyDescription?: string
      /** @description Id for Agency travelling to */
      toAgencyId?: string
      /** @description Description for Agency travelling to */
      toAgencyDescription?: string
      /** @description From city */
      fromCity?: string
      /** @description City offender was sent to */
      toCity?: string
      /** @description Movement time */
      movementTime: string
      /**
       * Format: date-time
       * @description Movement date time
       */
      movementDateTime: string
      /** @description Description of the offender's (internal) location */
      location?: string
      /**
       * @description Type of movement
       * @example TAP
       */
      movementType: string
      /** @description Reason for movement in */
      movementReasonDescription?: string
      /** @description From address */
      fromAddress?: string
    }
    /** @description Basic Summary data for a scheduled court event */
    CourtEventBasic: {
      /**
       * @description Offender number (NOMS ID)
       * @example G3878UK
       */
      offenderNo: string
      /**
       * @description The agency code of the court
       * @example LEEDCC
       */
      court: string
      /**
       * @description The court description
       * @example Leeds Crown Court
       */
      courtDescription?: string
      /**
       * Format: date-time
       * @description The planned date and time of the start of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2020-12-01T14:00:00
       */
      startTime: string
      /**
       * @description The court event subtype (from MOVE_RSN reference data)
       * @example CRT
       */
      eventSubType: string
      /**
       * @description The event description
       * @example Court Appearance
       */
      eventDescription?: string
      /** @description Whether hold ordered by the court at this hearing */
      hold?: boolean
    }
    /** @description Summary data for a scheduled court event */
    CourtEvent: {
      /**
       * @description Offender number (NOMS ID)
       * @example G3878UK
       */
      offenderNo: string
      /**
       * Format: date-time
       * @description Date and time the record was created in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2019-12-01T13:34:00
       */
      createDateTime: string
      /**
       * Format: int64
       * @description The internal event ID
       * @example 12343434
       */
      eventId: number
      /**
       * @description The agency code
       * @example LEI
       */
      fromAgency: string
      /**
       * @description The from agency description
       * @example HMP LEEDS
       */
      fromAgencyDescription: string
      /**
       * @description The agency code to which the transfer will be made (if an agency)
       * @example LEEDCC
       */
      toAgency: string
      /**
       * @description The to agency description
       * @example Leeds Crown Court
       */
      toAgencyDescription: string
      /**
       * Format: date
       * @description The date on which the event is scheduled to occur
       * @example 2019-12-01
       */
      eventDate: string
      /**
       * Format: date-time
       * @description The planned date and time of the start of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2019-12-01T14:00:00
       */
      startTime: string
      /**
       * Format: date-time
       * @description The planned date and time of the end of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2019-12-01T14:40:00
       */
      endTime: string
      /**
       * @description The event class (from COURT_EVENTS)
       * @example EXT_MOV
       */
      eventClass: string
      /**
       * @description The event type
       * @example CRT
       */
      eventType: string
      /**
       * @description The event sub-type
       * @example DP
       */
      eventSubType: string
      /**
       * @description The event status - either SCH (scheduled) or COMP (completed)
       * @example SCH
       */
      eventStatus: string
      /**
       * @description Judge name, where available
       * @example Harris
       */
      judgeName: string
      /**
       * @description The direction code (IN or OUT)
       * @example IN
       */
      directionCode: string
      /**
       * @description The comment text stored against this event
       * @example Restricted access to parking level
       */
      commentText: string
      /**
       * @description The booking active flag
       * @example true
       */
      bookingActiveFlag: boolean
      /**
       * @description The booking in or out status - either IN or OUT
       * @example OUT
       */
      bookingInOutStatus: string
    }
    /** @description Summary data for a completed movement */
    MovementSummary: {
      /**
       * @description Offender number (NOMS ID)
       * @example G3878UK
       */
      offenderNo: string
      /**
       * Format: date-time
       * @description Timestamp when the external movement record was created in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2019-12-01T13:34:00
       */
      createDateTime: string
      /**
       * Format: int64
       * @description The internal event ID
       * @example 1223232
       */
      eventId: number
      /**
       * @description Agency travelling from
       * @example LEI
       */
      fromAgency: string
      /**
       * @description Description of the agency travelling from
       * @example HMP LEEDS
       */
      fromAgencyDescription: string
      /**
       * @description Agency travelling to
       * @example MDI
       */
      toAgency: string
      /**
       * @description Description of the agency travelling to
       * @example HMP MOORLANDS
       */
      toAgencyDescription: string
      /**
       * @description City offender was received from
       * @example LEEDS
       */
      fromCity?: string
      /**
       * @description City offender was sent to
       * @example DONCASTER
       */
      toCity?: string
      /**
       * @description The arresting agency location ID
       * @example SYPOL
       */
      arrestAgencyLocId?: string
      /** @description Internal schedule type */
      internalScheduleType?: string
      /** @description Internal schedule reason code */
      internalScheduleReasonCode?: string
      /** @description To prov stat code - from offender_external_movements */
      toProvStatCode?: string
      /**
       * @description The escort code
       * @example PECS123
       */
      escortCode?: string
      /**
       * @description The escort text
       * @example Secure van
       */
      escortText?: string
      /**
       * @description ADM (admission), CRT (court), REL (release), TAP (temporary absence) or TRN (transfer)
       * @example ADM
       * @enum {string}
       */
      movementType: 'ADM' | 'CRT' | 'REL' | 'TAP' | 'TRN'
      /**
       * @description Description of the movement type
       * @example Admission
       */
      movementTypeDescription: string
      /**
       * @description IN or OUT
       * @example IN
       */
      directionCode: string
      /**
       * Format: date-time
       * @description Movement date and time in Europe/London local time format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2019-12-01T13:34:00
       */
      movementTime: string
      /**
       * @description Description of movement reason
       * @example Convicted at court
       */
      movementReason: string
      /**
       * @description Comment
       * @example This is a free text comment
       */
      commentText?: string
    }
    /** @description Summary data for a scheduled offender release */
    ReleaseEvent: {
      /**
       * @description Offender number (NOMS ID)
       * @example G3878UK
       */
      offenderNo: string
      /**
       * Format: date-time
       * @description Date and time the record was created in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2019-12-01T13:34:00
       */
      createDateTime: string
      /**
       * Format: int64
       * @description The internal event ID
       * @example 1234556
       */
      eventId: number
      /**
       * @description The agency code from which the release will be made
       * @example LEI
       */
      fromAgency: string
      /**
       * @description The agency description
       * @example HMP LEEDS
       */
      fromAgencyDescription: string
      /**
       * Format: date
       * @description The planned release date
       * @example 2019-12-01
       */
      releaseDate: string
      /**
       * Format: date
       * @description The approved release date
       * @example 2019-12-01
       */
      approvedReleaseDate: string
      /**
       * @description The event class - usually EXT_MOV
       * @example EXT_MOV
       */
      eventClass: string
      /**
       * @description The event status - either SCH (scheduled) or COMP (completed)
       * @example SCH
       */
      eventStatus: string
      /**
       * @description The movement type code - from OFFENDER_IND_SCHEDULE
       * @example REL
       */
      movementTypeCode: string
      /**
       * @description The movement type description from reference data
       * @example Release at end of sentence
       */
      movementTypeDescription: string
      /**
       * @description The movement reason code - from OFFENDER_IND_SCHEDULE
       * @example DD
       */
      movementReasonCode: string
      /**
       * @description The movement reason description from reference data
       * @example Release
       */
      movementReasonDescription: string
      /**
       * @description Any comment text entered against this event
       * @example Notes relating to this release
       */
      commentText: string
      /**
       * @description The booking active flag
       * @example true
       */
      bookingActiveFlag: boolean
      /**
       * @description The booking in or out status - either IN or OUT
       * @example OUT
       */
      bookingInOutStatus: string
    }
    /** @description A scheduled offender movement event */
    TransferEvent: {
      /**
       * @description Offender number(NOMS ID)
       * @example G3878UK
       */
      offenderNo: string
      /**
       * Format: date-time
       * @description Date and time the record was created in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2019-12-01T13:34:00
       */
      createDateTime: string
      /**
       * Format: int64
       * @description The internal event ID
       * @example 1232323
       */
      eventId: number
      /**
       * @description The agency code from which the event will start
       * @example LEI
       */
      fromAgency: string
      /**
       * @description The from agency description
       * @example HMP LEEDS
       */
      fromAgencyDescription: string
      /**
       * @description The agency code to which the transfer will be made (if an agency)
       * @example MDI
       */
      toAgency: string
      /**
       * @description The to agency description
       * @example HMP MOORLANDS
       */
      toAgencyDescription: string
      /**
       * @description The destination city when available
       * @example DONCASTER
       */
      toCity: string
      /**
       * @description The event status - either SCH or COMP
       * @example SCH
       */
      eventStatus: string
      /**
       * @description The event class - from OFFENDER_IND_SCHEDULES
       * @example EXT_MOV
       */
      eventClass: string
      /**
       * @description The event type - from OFFENDER_IND_SCHEDULES
       * @example TRN
       */
      eventType: string
      /**
       * @description The event sub-type - from OFFENDER_IND_SCHEDULES
       * @example PP
       */
      eventSubType: string
      /**
       * Format: date
       * @description The date on which the event is scheduled to occur
       * @example 2019-01-01
       */
      eventDate: string
      /**
       * Format: date-time
       * @description The planned date and time of the start of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2019-12-01T13:34:00
       */
      startTime: string
      /**
       * Format: date-time
       * @description The planned date and time of the end of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2019-12-01T13:34:00
       */
      endTime: string
      /**
       * @description The outcome reason code - from offender_ind_schedules
       * @example CO
       */
      outcomeReasonCode: string
      /** @description The name of the judge where known */
      judgeName: string
      /**
       * @description Engagement code
       * @example ENG
       */
      engagementCode: string
      /**
       * @description The escort code
       * @example DEF2
       */
      escortCode: string
      /**
       * @description The performance code
       * @example PERF1
       */
      performanceCode: string
      /**
       * @description The direction code (IN or OUT)
       * @example IN
       */
      directionCode: string
      /**
       * @description The booking active flag
       * @example true
       */
      bookingActiveFlag: boolean
      /**
       * @description The booking in or out status - either IN or OUT from offender bookings
       * @example OUT
       */
      bookingInOutStatus: string
    }
    /** @description The container object for transfer and movement events */
    TransferSummary: {
      /** @description List of scheduled or completed court events */
      courtEvents?: components['schemas']['CourtEvent'][]
      /** @description List of scheduled or completed offender events */
      transferEvents?: components['schemas']['TransferEvent'][]
      /** @description List of scheduled or completed release events */
      releaseEvents?: components['schemas']['ReleaseEvent'][]
      /** @description List of confirmed movements */
      movements?: components['schemas']['MovementSummary'][]
    }
    /** @description Summary of an offender counted as Establishment Roll - Reception */
    OffenderInReception: {
      /** @description Display Prisoner Number */
      offenderNo: string
      /**
       * Format: int64
       * @description Booking Id
       */
      bookingId: number
      /** Format: date */
      dateOfBirth: string
      firstName: string
      lastName: string
    }
    /** @description Summary of an offender 'currently out' according to Establishment Roll */
    OffenderOut: {
      /** @description Display Prisoner Number */
      offenderNo: string
      /** Format: int64 */
      bookingId: number
      /** Format: date */
      dateOfBirth: string
      firstName: string
      lastName: string
      /** @description The prisoner's internal location (Cell) */
      location: string
    }
    /** @description Movement DTO */
    BookingMovement: {
      /**
       * Format: int32
       * @description Sequence number
       */
      sequence?: number
      /** @description Agency travelling from */
      fromAgency?: string
      /** @description Agency travelling to */
      toAgency?: string
      /**
       * @description ADM (admission), CRT (court), REL (release), TAP (temporary absence) or TRN (transfer)
       * @enum {string}
       */
      movementType?: 'ADM' | 'CRT' | 'REL' | 'TAP' | 'TRN'
      /** @description IN or OUT */
      directionCode?: string
      /**
       * Format: date-time
       * @description Movement timestamp
       */
      movementDateTime?: string
      /** @description Code of movement reason */
      movementReasonCode?: string
      /**
       * Format: date-time
       * @description DB create timestamp
       */
      createdDateTime?: string
      /**
       * Format: date-time
       * @description DB modify timestamp
       */
      modifiedDateTime?: string
    }
    /** @description Summary data for a completed movement */
    OutOnTemporaryAbsenceSummary: {
      /**
       * @description Offender number (NOMS ID)
       * @example G3878UK
       */
      offenderNo: string
      /**
       * @description Prisoner first name.
       * @example JOHN
       */
      firstName: string
      /**
       * @description Prisoner's last name.
       * @example SMITH
       */
      lastName: string
      /**
       * Format: date
       * @description Prisoner's date of birth.
       * @example 1980-05-02
       */
      dateOfBirth: string
      /**
       * Format: date-time
       * @description Movement date and time in Europe/London local time format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2019-12-01T13:34:00
       */
      movementTime: string
      /**
       * @description Agency travelling to
       * @example MDI
       */
      toAgency?: string
      /**
       * @description Description of the agency travelling to
       * @example HMP MOORLANDS
       */
      toAgencyDescription?: string
      /**
       * @description City offender was sent to
       * @example DONCASTER
       */
      toCity?: string
      /**
       * @description The movement reason code
       * @example C1
       */
      movementReasonCode: string
      /**
       * @description Description of movement reason
       * @example Convicted at court
       */
      movementReason: string
      /**
       * @description Comment
       * @example This is a free text comment
       */
      commentText?: string
    }
    /** @description Keyworker Details */
    Keyworker: {
      /**
       * Format: int64
       * @description Unique identifier for staff member.
       */
      staffId: number
      /** @description Staff member's first name. */
      firstName: string
      /** @description Staff member's last name. */
      lastName: string
      /** @description Status of staff member. */
      status: string
      /**
       * Format: int64
       * @description Identifier for staff member image.
       */
      thumbnailId?: number
      /**
       * Format: int32
       * @description Current number allocated
       */
      numberAllocated: number
    }
    /** @description Incident Type Answer */
    IncidentTypeAnswer: {
      /**
       * Format: int64
       * @description ID for this Answer
       */
      questionnaireAnsId: number
      /**
       * Format: int32
       * @description Sequence for this answer
       * @example 1
       */
      answerSeq: number
      /**
       * @description Answer Text
       * @example YES
       */
      answerDesc: string
      /**
       * Format: int32
       * @description Answer Sequence
       * @example 1
       */
      answerListSeq: number
      /**
       * @description Indicates this answer is active
       * @example true
       */
      answerActiveFlag: boolean
      /**
       * Format: date
       * @description Date expired (not used)
       * @example 2017-01-02T00:00:00
       */
      answerExpiryDate: string
      /**
       * @description Should the answer include date information?
       * @example false
       */
      dateRequiredFlag: boolean
      /**
       * @description Should the answer include comment?
       * @example false
       */
      commentRequiredFlag: boolean
      /**
       * Format: int64
       * @description Next questionnaire question ID
       */
      nextQuestionnaireQueId: number
    }
    /** @description Incident Type Configuration */
    IncidentTypeConfiguration: {
      /**
       * @description Incident type of this configuration
       * @example DRONE1
       */
      incidentType: string
      /**
       * @description Incident type description
       * @example Drone Sighting
       */
      incidentTypeDescription?: string
      /**
       * Format: int64
       * @description ID internal of this question set for this incident type
       * @example 123412
       */
      questionnaireId: number
      /** @description List of questions (with answers) for this incident type */
      questions: components['schemas']['IncidentTypeQuestion'][]
      /** @description List of roles that can apply to a prisoner in this incident type */
      prisonerRoles: components['schemas']['IncidentTypePrisonerRole'][]
      /** @description Indicates this incident type is still usable */
      active: boolean
      /**
       * Format: date
       * @description Date the incident type was expired
       */
      expiryDate?: string
    }
    /** @description Incident type prisoner role */
    IncidentTypePrisonerRole: {
      /** @description Role type for this question set */
      prisonerRole: string
      /** @description If a single party can have this role in the question set */
      singleRole: boolean
      /** @description Indicates this role is active */
      active: boolean
      /**
       * Format: date
       * @description Indicates the date the role was made inactive
       */
      expiryDate: string
    }
    /** @description Incident type question */
    IncidentTypeQuestion: {
      /**
       * Format: int64
       * @description Question ID
       */
      questionnaireQueId: number
      /**
       * Format: int32
       * @description Question sequence number
       */
      questionSeq: number
      /** @description Question description */
      questionDesc: string
      /**
       * Format: int32
       * @description Question list sequence
       */
      questionListSeq: number
      /** @description Indicates question is active */
      questionActiveFlag: boolean
      /**
       * Format: date
       * @description Date question was retired
       */
      questionExpiryDate: string
      /** @description Indicate multiple responses can be given */
      multipleAnswerFlag: boolean
      /** @description Order list of answers */
      answers: components['schemas']['IncidentTypeAnswer'][]
    }
    /** @description Represents an offenders imprisonment status at a point in history */
    ImprisonmentStatusHistoryDto: {
      /** @description The imprisonment status */
      status: string
      /**
       * Format: date
       * @description The date the status was effective from
       */
      effectiveDate: string
      /** @description The agency the status was set by */
      agencyId: string
    }
    /** @description Gang Member Detail */
    GangMemberDetail: {
      /**
       * @description Prisoner Number of this gang member
       * @example A1234AA
       */
      offenderNo: string
      /**
       * @description First name of this gang member
       * @example John
       */
      firstName: string
      /**
       * @description Last name of this gang member
       * @example Smith
       */
      lastName: string
      /**
       * @description Prison ID if inside or OUT if not inside
       * @example MDI
       */
      prisonId?: string
      /** @description Name of the prison or Outside if not inside */
      Moorland?: string
      /**
       * @description Cell location of the gang member (if inside)
       * @example MDI-A-1-001
       */
      cellLocation?: string
    }
    /** @description Summary of Gangs for a specified prisoner */
    GangMemberSummary: {
      /** @description The details of the gang member */
      member?: components['schemas']['GangMemberDetail']
      /** @description Current gang involvement */
      currentGangs: components['schemas']['GangSummary'][]
      /** @description Non associations with other gangs */
      gangNonAssociations: components['schemas']['GangNonAssociationSummary'][]
    }
    /** @description Non associations Gang information */
    GangNonAssociationSummary: {
      /**
       * @description The code assigned for the gang
       * @example A_GANG
       */
      code: string
      /**
       * @description The name of the gang
       * @example A New Gang
       */
      name: string
      /**
       * @description Reason this gang should not be associated with other gang
       * @example Rival Gang
       */
      reason: string
      /** @description List of members of this gang */
      members: components['schemas']['GangMemberDetail'][]
    }
    /** @description Gang Summary */
    GangSummary: {
      /**
       * @description The code assigned for the gang
       * @example A_GANG
       */
      code: string
      /**
       * @description The name of the gang
       * @example A New Gang
       */
      name: string
      /**
       * @description Information about this member within the gang
       * @example Leader of gang
       */
      comment?: string
      /**
       * Format: int64
       * @description Number of members in this gang
       * @example 15
       */
      numberOfMembers: number
    }
    PageEducation: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Education'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    CourtEventDetails: {
      /** Format: int64 */
      eventId: number
      /** Format: date-time */
      startTime: string
      courtLocation: string
      courtEventType: string
      comments?: string
      caseReference?: string
    }
    /** @description A charge linked to a court date */
    CourtDateCharge: {
      /**
       * Format: int64
       * @description The id of the charge
       */
      chargeId?: number
      /** @description The offence code of the office in the court case */
      offenceCode?: string
      /** @description The offence statute of the office in the court case */
      offenceStatue?: string
      /** @description The offence description */
      offenceDescription?: string
      /**
       * Format: date
       * @description The date of the offence
       */
      offenceDate?: string
      /**
       * Format: date
       * @description The offence end date
       */
      offenceEndDate?: string
      /** @description Was the verdict guilty or not guilty */
      guilty?: boolean
      /**
       * Format: int64
       * @description The id of the court case
       */
      courtCaseId?: number
      /** @description Court case reference */
      courtCaseRef?: string
      /** @description Court case location */
      courtLocation?: string
      /**
       * Format: int32
       * @description The sequence of the sentence from this charge
       */
      sentenceSequence?: number
      /**
       * Format: date
       * @description The sentence date
       */
      sentenceDate?: string
      /** @description The sentence type */
      sentenceType?: string
      /** @description The result code of the charge */
      resultCode?: string
      /** @description The result description of the charge */
      resultDescription?: string
      /** @description The disposition code of the result of the charge */
      resultDispositionCode?: string
      /** @description Is this charge active in NOMIS. */
      active?: boolean
    }
    /** @description Represents a court date and its outcome */
    CourtDateResult: {
      /**
       * Format: int64
       * @description The ID of this court date
       */
      id: number
      /**
       * Format: date
       * @description The date of the court result
       */
      date?: string
      /** @description The result code of the court date */
      resultCode?: string
      /** @description The result description of the court date */
      resultDescription?: string
      /** @description The disposition code of the result of the court date */
      resultDispositionCode?: string
      /** @description The charge which is the subject of the court date */
      charge: components['schemas']['CourtDateCharge']
      /**
       * Format: int64
       * @description The id of the booking this court date was linked to
       */
      bookingId: number
      /** @description The user readable ID for a booking */
      bookNumber: string
    }
    /** @description A charge and all its court date outcomes */
    CourtDateChargeAndOutcomes: {
      /**
       * Format: int64
       * @description The id of the charge
       */
      chargeId?: number
      /** @description The offence code of the office in the court case */
      offenceCode?: string
      /** @description The offence statute of the office in the court case */
      offenceStatue?: string
      /** @description The offence description */
      offenceDescription?: string
      /**
       * Format: date
       * @description The date of the offence
       */
      offenceDate?: string
      /**
       * Format: date
       * @description The offence end date
       */
      offenceEndDate?: string
      /** @description Was the verdict guilty or not guilty */
      guilty: boolean
      /**
       * Format: int64
       * @description The id of the court case
       */
      courtCaseId?: number
      /** @description Court case reference */
      courtCaseRef?: string
      /** @description Court case location */
      courtLocation?: string
      /**
       * Format: int32
       * @description The sequence of the sentence from this charge
       */
      sentenceSequence?: number
      /**
       * Format: date
       * @description The sentence date
       */
      sentenceDate?: string
      /** @description The sentence type */
      sentenceType?: string
      /** @description The result code of the charge */
      resultCode?: string
      /** @description The result description of the charge */
      resultDescription?: string
      /** @description The disposition code of the result of the charge */
      resultDispositionCode?: string
      /**
       * Format: int64
       * @description The id of the booking this court date was linked to
       */
      bookingId: number
      /** @description The user readable ID for a booking */
      bookNumber: string
      /** @description Is this charge active in NOMIS. */
      active: boolean
      /** @description All the court date outcomes for this charge */
      outcomes: components['schemas']['CourtDateOutcome'][]
    }
    /** @description Represents the outcome for a court date of a given charge */
    CourtDateOutcome: {
      /**
       * Format: int64
       * @description The ID of this court date
       */
      id: number
      /**
       * Format: date
       * @description The date of the court result
       */
      date?: string
      /** @description The result code of the court date */
      resultCode?: string
      /** @description The result description of the court date */
      resultDescription?: string
      /** @description The disposition code of the result of the court date */
      resultDispositionCode?: string
    }
    /** @description Bed assignment history entry */
    BedAssignment: {
      /**
       * Format: int64
       * @description Unique, numeric booking id. Used as a primary key when combined with the bed assignment sequence
       * @example 1234134
       */
      bookingId?: number
      /**
       * Format: int64
       * @description Identifier of living unit (e.g. cell) that offender is assigned to.
       * @example 123123
       */
      livingUnitId?: number
      /**
       * Format: date
       * @description Date the offender was assigned to a living unit.
       * @example 2020-10-12
       */
      assignmentDate?: string
      /**
       * Format: date-time
       * @description Date and time the offender was moved to a living unit.
       * @example 2020-10-12T08:00
       */
      assignmentDateTime?: string
      /**
       * @description Assignment reason code
       * @example ADM
       */
      assignmentReason?: string
      /**
       * Format: date
       * @description Date an offender was moved out of the living unit
       * @example 2020-11-12
       */
      assignmentEndDate?: string
      /**
       * Format: date-time
       * @description Date and time an offender was moved out of the living unit
       * @example 2020-11-12:T15:00
       */
      assignmentEndDateTime?: string
      /**
       * @description Agency of living unit
       * @example MDI
       */
      agencyId?: string
      /**
       * @description Description of living unit (e.g. cell)
       * @example MDI-1-1-2
       */
      description?: string
      /**
       * Format: int32
       * @description Bed assignment sequence. Used as a primary key when combined with the booking id
       * @example 2
       */
      bedAssignmentHistorySequence?: number
      /**
       * @description the staff member responsible for the movement of a prisoner
       * @example KQJ74F
       */
      movementMadeBy?: string
      /**
       * @description Offender number
       * @example A1234AA
       */
      offenderNo?: string
    }
    /** @description Offender cell details */
    OffenderCell: {
      /**
       * Format: int64
       * @description The case identifier
       * @example 1
       */
      id?: number
      /**
       * @description Description
       * @example LEI-1-1
       */
      description?: string
      /**
       * @description Description
       * @example LEI-1-1
       */
      userDescription?: string
      /**
       * Format: int32
       * @description Capacity
       * @example 2
       */
      capacity?: number
      /**
       * Format: int32
       * @description Number of occupants
       * @example 2
       */
      noOfOccupants?: number
      /** @description List of attributes */
      attributes?: components['schemas']['OffenderCellAttribute'][]
    }
    /** @description Offender cell details */
    OffenderCellAttribute: {
      /**
       * @description Attribute code
       * @example LC
       */
      code?: string
      /**
       * @description Attribute description
       * @example Listener Cell
       */
      description?: string
    }
    /** @description Visit summary */
    VisitSummary: {
      /**
       * Format: date-time
       * @description Date and time at which next scheduled (i.e. not cancelled) event starts (if any)
       */
      startDateTime?: string
      /** @description Whether the prisoner has any visits (previous or next) */
      hasVisits: boolean
    }
    PageVisitWithVisitors: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['VisitWithVisitors'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Visit details */
    VisitDetails: {
      /** @description Relationship of lead visitor to offender */
      relationship?: string
      /** @description Location at which event takes place (could be an internal location, agency or external address). */
      location?: string
      /** @description Prison at which event takes place */
      prison?: string
      /** @description Whether the visit was attended. Translation of eventOutcome into boolean. Defaults in NOMIS to true when the visit is created */
      attended: boolean
      /**
       * @description Status of event (EVENT_STS reference code)
       * @enum {string}
       */
      eventStatus: 'EXP' | 'SCH' | 'COMP' | 'CANC'
      /** @description Description of eventStatus code */
      eventStatusDescription?: string
      /**
       * @description Completion status of visit (VIS_COMPLETE reference code)
       * @enum {string}
       */
      completionStatus: 'NORM' | 'SCH' | 'VDE' | 'OFFEND' | 'VISITOR' | 'CANC' | 'HMPOP'
      /** @description Description of completionStatus code */
      completionStatusDescription?: string
      /**
       * @description Code for social (SCON) or official (OFFI) type of visit (VISIT_TYPE reference code)
       * @enum {string}
       */
      visitType: 'OFFI' | 'SCON'
      /**
       * @description Description of social or official visit
       * @enum {string}
       */
      visitTypeDescription?: 'Official Visit' | 'Social Contact'
      /** @description Name of lead visitor (blank if there was no visiting order for this visit) */
      leadVisitor?: string
      /** @description Description of relationship code */
      relationshipDescription?: string
      /**
       * Format: date-time
       * @description Date and time at which event starts
       */
      startTime: string
      /**
       * Format: date-time
       * @description Date and time at which event ends
       */
      endTime?: string
      /**
       * @description Whether attended (ATT) or not (ABS) (OUTCOMES reference code)
       * @enum {string}
       */
      eventOutcome: 'ATT' | 'ABS'
      /** @description Description of eventOutcome code */
      eventOutcomeDescription?: string
      /** @description Reason for cancellation if not attended (MOVE_CANC_RS reference code) */
      cancellationReason?: string
      /** @description Description of cancellationReason code */
      cancelReasonDescription?: string
      /** @description List of visitors on visit */
      visitors?: components['schemas']['Visitor'][]
      /**
       * @description Type of search performed - mandatory if visit completed (SEARCH_LEVEL reference code)
       * @example FULL
       */
      searchType?: string
      /** @description Description of searchType code */
      searchTypeDescription?: string
    }
    /** @description List of visitors for a visit */
    VisitWithVisitors: {
      /** @description List of visitors on visit */
      visitors: components['schemas']['Visitor'][]
      /** @description Visit Information */
      visitDetails: components['schemas']['VisitDetails']
    }
    /** @description Visitor */
    Visitor: {
      /** @description Relationship of visitor to offender */
      relationship: string
      /** @description Whether the visitor attended.  Defaults in NOMIS to true when the visit is created so of limited value. */
      attended: boolean
      /**
       * Format: int64
       * @description Person id of visitor
       */
      personId: number
      /** @description Last name of visitor */
      lastName: string
      /** @description First name of visitor */
      firstName: string
      /**
       * Format: date
       * @description Date of birth of visitor
       */
      dateOfBirth: string
      /**
       * @description Flag marking the visitor as lead visitor or not (only set for visit orders)
       * @example true
       */
      leadVisitor: boolean
    }
    /** @description Secondary language */
    SecondaryLanguage: {
      /**
       * Format: int64
       * @description Booking id
       * @example 10000
       */
      bookingId?: number
      /**
       * @description Language code
       * @example ENG
       */
      code?: string
      /**
       * @description Language description
       * @example English
       */
      description?: string
      /** @description Reading proficiency */
      canRead?: boolean
      /** @description Writing proficiency */
      canWrite?: boolean
      /** @description Speaking proficiency */
      canSpeak?: boolean
    }
    /** @description Reasonable Adjustment */
    ReasonableAdjustment: {
      /**
       * @description Treatment Code
       * @example WHEELCHR_ACC
       */
      treatmentCode?: string
      /**
       * @description Comment Text
       * @example abcd
       */
      commentText?: string
      /**
       * Format: date
       * @description Start Date
       * @example 2010-06-21
       */
      startDate?: string
      /**
       * Format: date
       * @description End Date
       * @example 2010-06-21
       */
      endDate?: string
      /**
       * @description The agency id where the adjustment was created
       * @example LEI
       */
      agencyId?: string
      /**
       * @description The formatted agency description where the adjustment was created
       * @example Moorland (HMP)
       */
      agencyDescription?: string
      /**
       * @description Treatment Description
       * @example Wheelchair accessibility
       */
      treatmentDescription?: string
      /**
       * Format: int64
       * @description Personal care need ID
       * @example 1
       */
      personalCareNeedId?: number
    }
    /** @description Reasonable Adjustments */
    ReasonableAdjustments: {
      /** @description Reasonable Adjustments */
      reasonableAdjustments?: components['schemas']['ReasonableAdjustment'][]
    }
    /** @description Offender property container details */
    PropertyContainer: {
      /** @description The location id of the property container */
      location?: components['schemas']['Location']
      /**
       * @description The case sequence number for the offender
       * @example MDI10
       */
      sealMark?: string
      /**
       * @description The type of container
       * @example Valuables
       */
      containerType?: string
    }
    /** @description Details relating to the fixed term recall on a booking */
    FixedTermRecallDetails: {
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId?: number
      /**
       * Format: date
       * @description The date the offender returned to custody
       */
      returnToCustodyDate?: string
      /**
       * Format: int32
       * @description The length of the fixed term recall
       */
      recallLength?: number
    }
    /** @description Represents court hearings for an offender booking. */
    CourtHearings: {
      hearings?: components['schemas']['CourtHearing'][]
    }
    /** @description Offender court case details */
    CourtCase: {
      /**
       * Format: int64
       * @description The case identifier
       * @example 1
       */
      id?: number
      /**
       * Format: int32
       * @description The case sequence number for the offender
       * @example 1
       */
      caseSeq?: number
      /**
       * Format: date
       * @description The begin date
       * @example 2019-12-01
       */
      beginDate?: string
      /** @description Agency details */
      agency?: components['schemas']['Agency']
      /**
       * @description The case type
       * @example Adult
       */
      caseType?: string
      /** @description The prefix of the case number */
      caseInfoPrefix?: string
      /**
       * @description The case information number
       * @example TD20177010
       */
      caseInfoNumber?: string
      /**
       * @description The case status
       * @example ACTIVE
       * @enum {string}
       */
      caseStatus?: 'ACTIVE' | 'CLOSED' | 'INACTIVE'
      /** @description Court hearings associated with the court case */
      courtHearings?: components['schemas']['CourtHearing'][]
    }
    /** @description Contact */
    Contact: {
      /**
       * @description Last name of the contact
       * @example SMITH
       */
      lastName: string
      /**
       * @description First Name
       * @example JOHN
       */
      firstName: string
      /**
       * @description Middle Names
       * @example MARK
       */
      middleName?: string
      /**
       * @description Contact type
       * @example O
       */
      contactType: string
      /**
       * @description Contact type text
       * @example Official
       */
      contactTypeDescription?: string
      /**
       * @description Relationship to prisoner
       * @example RO
       */
      relationship: string
      /**
       * @description Relationship text
       * @example Responsible Officer
       */
      relationshipDescription?: string
      /**
       * @description Comments
       * @example Some additional information
       */
      commentText?: string
      /**
       * @description Is an emergency contact
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Indicates that the contact is Next of Kin Type
       * @example false
       */
      nextOfKin: boolean
      /**
       * Format: int64
       * @description ID of the relationship (internal)
       * @example 10466277
       */
      relationshipId?: number
      /**
       * Format: int64
       * @description id of the person contact
       * @example 5871791
       */
      personId?: number
      /**
       * @description Active indicator flag.
       * @example true
       */
      activeFlag: boolean
      /**
       * Format: date
       * @description Date made inactive
       * @example 2019-01-31
       */
      expiryDate?: string
      /**
       * @description Approved Visitor
       * @example true
       */
      approvedVisitorFlag: boolean
      /**
       * @description Can be contacted
       * @example false
       */
      canBeContactedFlag: boolean
      /**
       * @description Aware of charges against prisoner
       * @example true
       */
      awareOfChargesFlag: boolean
      /**
       * Format: int64
       * @description Link to root offender ID
       * @example 5871791
       */
      contactRootOffenderId?: number
      /**
       * Format: int64
       * @description Offender Booking Id for this contact
       * @example 2468081
       */
      bookingId: number
      /**
       * Format: date-time
       * @description Date time the contact was created
       * @example 2020-10-10T:20:00
       */
      createDateTime: string
    }
    /** @description Contacts Details for offender */
    ContactDetail: {
      /** Format: int64 */
      bookingId: number
      nextOfKin: components['schemas']['Contact'][]
      otherContacts: components['schemas']['Contact'][]
    }
    PageBedAssignment: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['BedAssignment'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Case Note Count Detail */
    CaseNoteCount: {
      /**
       * Format: int64
       * @description Offender booking id
       */
      bookingId: number
      /** @description Case note type. */
      type: string
      /** @description Case note sub-type. */
      subType: string
      /**
       * Format: int64
       * @description Number of case notes of defined type and subType for offender.
       */
      count: number
      /**
       * Format: date
       * @description Count includes case notes occurring on or after this date (in YYYY-MM-DD format).
       */
      fromDate?: string
      /**
       * Format: date
       * @description Count includes case notes occurring on or before this date (in YYYY-MM-DD format).
       */
      toDate?: string
    }
    /** @description Prisoner Account Balance */
    Account: {
      /** @description Spends sub account balance. */
      spends: number
      /** @description Cash sub account balance. */
      cash: number
      /** @description Saves sub account balance. */
      savings: number
      /** @description Damage obligation balance. */
      damageObligations: number
      /** @description Currency of these balances. */
      currency: string
    }
    PagePrisonerBookingSummary: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['PrisonerBookingSummary'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Prisoner Booking Summary */
    PrisonerBookingSummary: {
      /**
       * Format: int64
       * @description Unique, numeric booking id.
       * @example 1234134
       */
      bookingId: number
      /**
       * @description Book number.
       * @example A12121
       */
      bookingNo?: string
      /**
       * @description Prisoner number (e.g. NOMS Number).
       * @example A1234AA
       */
      offenderNo: string
      /**
       * @description Prisoner first name.
       * @example JOHN
       */
      firstName: string
      /**
       * @description Prisoner's middle name.
       * @example ASHLEY
       */
      middleName?: string
      /**
       * @description Prisoner's last name.
       * @example SMITH
       */
      lastName: string
      /**
       * Format: date
       * @description Prisoner's date of birth.
       * @example 1980-05-02
       */
      dateOfBirth: string
      /**
       * Format: int32
       * @description Prisoner's current age.
       * @example 32
       */
      age: number
      /**
       * @description Identifier of agency that prisoner is associated with.
       * @example MDI
       */
      agencyId: string
      /**
       * Format: int64
       * @description Identifier of living unit (e.g. cell) that prisoner is assigned to.
       * @example 123123
       */
      assignedLivingUnitId?: number
      /**
       * Format: int64
       * @description Identifier of facial image of prisoner.
       * @example 1241241
       */
      facialImageId?: number
      /**
       * @description The imprisonment status of the prisoner
       * @example SENT
       */
      imprisonmentStatus?: string
      /**
       * @description Legal Status
       * @example REMAND
       * @enum {string}
       */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
      /**
       * @description Convicted Status
       * @example Convicted
       * @enum {string}
       */
      convictedStatus?: 'Convicted' | 'Remand'
      /**
       * @description Description of living unit (e.g. cell) that prisoner is assigned to.
       * @example MDI-1-1-3
       */
      assignedLivingUnitDesc?: string
    }
    /** @description Balances of visit orders and privilege visit orders */
    VisitBalances: {
      /**
       * Format: int32
       * @description Balance of visit orders remaining
       */
      remainingVo: number
      /**
       * Format: int32
       * @description Balance of privilege visit orders remaining
       */
      remainingPvo: number
      /**
       * Format: date
       * @description Date of last IEP adjustment for Visit orders
       */
      latestIepAdjustDate?: string
      /**
       * Format: date
       * @description Date of last IEP adjustment for Privilege Visit orders
       */
      latestPrivIepAdjustDate?: string
    }
    /** @description Agency prisoner pay profile */
    AgencyPrisonerPayProfile: {
      /**
       * @description Agency identifier
       * @example MDI
       */
      agencyId: string
      /**
       * Format: date
       * @description The start date when this pay profile took effect
       * @example 2022-10-01
       */
      startDate: string
      /**
       * Format: date
       * @description The end date when this pay profile will stop taking effect
       * @example 2027-10-01
       */
      endDate?: string
      /**
       * @description Whether automatic payments are enabled
       * @example true
       */
      autoPayFlag: boolean
      /**
       * Format: int32
       * @description The frequency that payroll runs for this agency (usually 1)
       * @example 1
       */
      payFrequency?: number
      /**
       * Format: int32
       * @description The number of absences that are acceptable within one week
       * @example 5
       */
      weeklyAbsenceLimit?: number
      /**
       * @description The minimum value for a half-day rate
       * @example 1.25
       */
      minHalfDayRate?: number
      /**
       * @description The maximum value for a half-day rate
       * @example 5
       */
      maxHalfDayRate?: number
      /**
       * @description The maximum value for piece work earnings
       * @example 6
       */
      maxPieceWorkRate?: number
      /**
       * @description The maximum value for a bonus award
       * @example 3
       */
      maxBonusRate?: number
      /**
       * Format: int32
       * @description The number of days allowed to backdate attendance before it locks.
       * @example 7
       */
      backdateDays?: number
      /**
       * @description The default pay band to use when allocating offenders to paid activities.
       * @example 1
       */
      defaultPayBandCode?: string
    }
    /** @description Cell Locations are grouped for unlock lists as a 2 level tree. The two levels are referred to as Location and Sub-Location in the digital prison services UI. Each (location/sub-location) group has a name that is understood by prison officers and also serves as a key to retrieve the corresponding Cell Locations and information about their occupants. */
    LocationGroup: {
      /** @description The name of the group */
      name: string
      /** @description A key for the group */
      key: string
      /** @description The child groups of this group */
      children: unknown[]
    }
    /** @description Location Summary Details */
    LocationSummary: {
      /**
       * Format: int64
       * @description Location identifier.
       */
      locationId: number
      /** @description User-friendly location description. */
      userDescription?: string
      /** @description Location description. */
      description: string
    }
    /** @description Agency Establishment Type */
    AgencyEstablishmentType: {
      /**
       * @description Code.
       * @example IM
       */
      code: string
      /**
       * @description Description.
       * @example Closed Young Offender Institute (Male)
       */
      description: string
    }
    /** @description Agency Establishment Types */
    AgencyEstablishmentTypes: {
      /**
       * @description Agency id
       * @example MDI
       */
      agencyId: string
      /** @description The establishment types for the agency. */
      establishmentTypes?: components['schemas']['AgencyEstablishmentType'][]
    }
    Prison: {
      /**
       * @description Agency identifier.
       * @example MDI
       */
      agencyId: string
      /**
       * @description Agency description.
       * @example Moorland (HMP & YOI)
       */
      description: string
      /**
       * @description Long description of the agency
       * @example Moorland (HMP & YOI)
       */
      longDescription?: string
      /**
       * @description Agency type.  Reference domain is AGY_LOC_TYPE.  Will be INST for a prison.
       * @example INST
       * @enum {string}
       */
      agencyType:
        | 'CRC'
        | 'POLSTN'
        | 'INST'
        | 'COMM'
        | 'APPR'
        | 'CRT'
        | 'POLICE'
        | 'IMDC'
        | 'TRN'
        | 'OUT'
        | 'YOT'
        | 'SCH'
        | 'STC'
        | 'HOST'
        | 'AIRPORT'
        | 'HSHOSP'
        | 'HOSPITAL'
        | 'PECS'
        | 'PAR'
        | 'PNP'
        | 'PSY'
      /**
       * @description Indicates the Agency is active
       * @example true
       */
      active: boolean
    }
    /** @description Contacts details for agency */
    PrisonContactDetail: {
      /**
       * @description Identifier of agency/prison.
       * @example MDI
       */
      agencyId: string
      /**
       * @description Agency description.
       * @example MOORLAND (HMP & YOI)
       */
      description: string
      /**
       * @description Formatted agency description.
       * @example Moorland (HMP & YOI)
       */
      formattedDescription: string
      /**
       * @description Type of agency.
       * @example INST
       */
      agencyType: string
      /** @description Type of address. */
      addressType: string
      /** @description The Prison name. */
      premise: string
      /** @description Describes the geographic location. */
      locality: string
      /** @description Address city. */
      city: string
      /** @description Address country. */
      country: string
      /** @description Address postcode. */
      postCode: string
      /** @description List of Telephone details */
      phones: components['schemas']['Telephone'][]
      /** @description List of Address details */
      addresses: components['schemas']['AddressDto'][]
    }
    /** @description Sentence Adjustment values */
    BookingAdjustment: {
      /**
       * @description Adjustment type
       * @enum {string}
       */
      type?:
        | 'SPECIAL_REMISSION'
        | 'ADDITIONAL_DAYS_AWARDED'
        | 'RESTORED_ADDITIONAL_DAYS_AWARDED'
        | 'UNLAWFULLY_AT_LARGE'
        | 'LAWFULLY_AT_LARGE'
      /**
       * Format: int32
       * @description Number of days to adjust
       * @example 12
       */
      numberOfDays?: number
      /**
       * Format: date
       * @description The 'from date' of the adjustment
       * @example 2022-01-01
       */
      fromDate?: string
      /**
       * Format: date
       * @description The 'to date' of the adjustment
       * @example 2022-01-31
       */
      toDate?: string
      /**
       * @description Boolean flag showing if the adjustment is active
       * @example true
       */
      active?: boolean
      /**
       * @description The user comments for this adjustment
       * @example This is an adjustment
       */
      comment?: string
    }
    /** @description Adjustments associated at a booking level and a sentence level */
    BookingAndSentenceAdjustments: {
      /** @description Adjustments associated at a sentence level (of type RECALL_SENTENCE_REMAND, TAGGED_BAIL, RECALL_SENTENCE_TAGGED_BAIL, REMAND, UNUSED_REMAND, TIME_SPENT_IN_CUSTODY_ABROAD or TIME_SPENT_AS_AN_APPEAL_APPLICANT) */
      sentenceAdjustments?: components['schemas']['SentenceAdjustmentValues'][]
      /** @description Adjustments associated at a booking level (of type SPECIAL_REMISSION, ADDITIONAL_DAYS_AWARDED, RESTORED_ADDITIONAL_DAYS_AWARDED, UNLAWFULLY_AT_LARGE, LAWFULLY_AT_LARGE) */
      bookingAdjustments?: components['schemas']['BookingAdjustment'][]
    }
    /** @description Sentence Adjustment values */
    SentenceAdjustmentValues: {
      /**
       * Format: int32
       * @description Sentence sequence
       * @example 1
       */
      sentenceSequence?: number
      /**
       * @description Adjustment type
       * @enum {string}
       */
      type?:
        | 'RECALL_SENTENCE_REMAND'
        | 'TAGGED_BAIL'
        | 'RECALL_SENTENCE_TAGGED_BAIL'
        | 'REMAND'
        | 'UNUSED_REMAND'
        | 'TIME_SPENT_IN_CUSTODY_ABROAD'
        | 'TIME_SPENT_AS_AN_APPEAL_APPLICANT'
      /**
       * Format: int32
       * @description Number of days to adjust
       * @example 12
       */
      numberOfDays?: number
      /**
       * Format: date
       * @description The 'from date' of the adjustment
       * @example 2022-01-01
       */
      fromDate?: string
      /**
       * Format: date
       * @description The 'to date' of the adjustment
       * @example 2022-01-31
       */
      toDate?: string
      /**
       * @description Boolean flag showing if the adjustment is active
       * @example true
       */
      active?: boolean
      /**
       * @description The user comments for this adjustment
       * @example This is an adjustment
       */
      comment?: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  updateMyActiveCaseLoad: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CaseLoad']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid username or password */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description the user does not have permission to view the caseload. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addApiAccessForCaseload: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The caseload (equates to prison) id to add all active users to default API caseload (NWEB) */
        caseload: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No New Users */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseloadUpdate']
        }
      }
      /** @description New Users Enabled */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseloadUpdate']
        }
      }
    }
  }
  getSplashScreenByModuleName: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Module name
         * @example OIDCHOLO
         */
        moduleName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SplashScreenDto']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateSplashScreen: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Module name
         * @example OIDCHOLO
         */
        moduleName: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestSplashScreenCreateOrUpdate']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SplashScreenDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createSplashScreen: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Module name
         * @example OIDCHOLO
         */
        moduleName: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestSplashScreenCreateOrUpdate']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SplashScreenDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteSplashScreen: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Module name
         * @example OIDCHOLO
         */
        moduleName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCondition: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Module name
         * @example OIDCHOLO
         */
        moduleName: string
        /**
         * @description Condition type
         * @example CASELOAD
         */
        conditionType: string
        /**
         * @description Condition value
         * @example MDI
         */
        conditionValue: string
        /**
         * @description Block access
         * @example true
         */
        blockAccess: boolean
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SplashScreenDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  offenderStatusSetup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description offenderNo
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Requires role ROLE_SMOKE_TEST */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  releasePrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description offenderNo
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Requires role ROLE_SMOKE_TEST */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  recallPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description offenderNo
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Requires role ROLE_SMOKE_TEST */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReferenceCodeByDomainAndCode: {
    parameters: {
      query?: {
        /** @description Specify whether or not to return the reference code with its associated sub-codes. */
        withSubCodes?: boolean
      }
      header?: never
      path: {
        /** @description The domain identifier/name. */
        domain: string
        /** @description The reference code. */
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateReferenceCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The domain identifier/name. */
        domain: string
        /** @description The reference code. */
        code: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReferenceCodeInfo']
      }
    }
    responses: {
      /** @description Updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createReferenceCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The domain identifier/name. */
        domain: string
        /** @description The reference code. */
        code: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReferenceCodeInfo']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIdentifyingMark: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prisoner unique reference
         * @example A1234AA
         */
        prisonerNumber: string
        /** @description The sequence id of the mark */
        seqId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DistinguishingMark']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description PRISON_API__PRISONER_PROFILE__RW role required to access endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateMark: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prisoner unique reference
         * @example A1234AA
         */
        prisonerNumber: string
        /** @description The sequence id of the mark */
        seqId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DistinguishingMarkDetails']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DistinguishingMark']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description PRISON_API__PRISONER_PROFILE__RW role required to access endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The offender number could not be found or has no bookings. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateImage: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the image */
        photoId: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description The image as a file to upload
           */
          file: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description PRISON_API__PRISONER_PROFILE__RW role required to access endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  transferOutPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderNo of prisoner
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToTransferOut']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  transferInPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderNo of prisoner
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToTransferIn']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to transfer a prisoner */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  transferOutPrisonerToTemporaryAbsence: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderNo of prisoner
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToTransferOutToTemporaryAbsence']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  temporaryAbsenceArrival: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderNo of prisoner
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestForTemporaryAbsenceArrival']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to transfer a prisoner */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateSmokerStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSmokerStatus']
      }
    }
    responses: {
      /** @description The smoker status has been updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateSexualOrientation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSexualOrientation']
      }
    }
    responses: {
      /** @description The sexual orientation has been updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateReligion: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateReligion']
      }
    }
    responses: {
      /** @description The religion has been updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  releasePrisoner_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderNo of prisoner
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToReleasePrisoner']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to release a prisoner. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  recallPrisoner_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderNo of prisoner
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToRecall']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to recall a prisoner. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateOffenderPhoneNumber: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
        /** @description The phone number ID */
        phoneNumberId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenderPhoneNumberCreateRequest']
      }
    }
    responses: {
      /** @description Phone number updated. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Telephone']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to update phone numbers. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner or phone number ID not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Record in use for this phone ID id (possibly in P-Nomis). */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateNationality: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNationality']
      }
    }
    responses: {
      /** @description The nationality has been updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateMilitaryRecord: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No
         * @example A1234AA
         */
        offenderNo: string
        /**
         * @description Military record sequence number
         * @example 1
         */
        militarySeq: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MilitaryRecordRequest']
      }
    }
    responses: {
      /** @description The military record has been updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to update military record for prisoner */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  moveToCellOrReception: {
    parameters: {
      query: {
        /**
         * @description The reason code for the move (from reason code domain CHG_HOUS_RSN)
         * @example ADM
         */
        reasonCode: string
        /**
         * @description The date / time of the move (defaults to current)
         * @example 2020-03-24T12:13:40
         */
        dateTime?: string
      }
      header?: never
      path: {
        /**
         * @description Offender No
         * @example A1234AA
         */
        offenderNo: string
        /**
         * @description The cell location the offender has been moved to
         * @example MDI-1-1
         */
        internalLocationDescription: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CellMoveResult']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateOffenderEmailAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
        /** @description The email address ID */
        emailAddressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenderEmailAddressCreateRequest']
      }
    }
    responses: {
      /** @description Email address updated. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Email']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to update email addresses. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner or email address ID not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Record in use for this email address ID id (possibly in P-Nomis). */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  dischargePrisonerToHospital: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderNo of prisoner
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToDischargePrisoner']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to release a prisoner. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  transferOutPrisonerToCourt: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderNo of prisoner
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToTransferOutToCourt']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  courtTransferIn: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderNo of prisoner
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestForCourtTransferIn']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to transfer a prisoner */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addSecondaryLanguage: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CorePersonSecondaryLanguageRequest']
      }
    }
    responses: {
      /** @description A core person secondary language has been added or updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPhysicalAttributes: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CorePersonPhysicalAttributes']
        }
      }
      /** @description Offender not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePhysicalAttributes: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CorePersonPhysicalAttributesRequest']
      }
    }
    responses: {
      /** @description The core person physical attributes have been updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateLanguagePreferences: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CorePersonLanguagePreferencesRequest']
      }
    }
    responses: {
      /** @description The core person language preferences have been updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateBirthPlaceOfCurrentAlias: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBirthPlace']
      }
    }
    responses: {
      /** @description The birth place has been updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateBirthCountryOfCurrentAlias: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBirthCountry']
      }
    }
    responses: {
      /** @description The birth country has been updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  setCurfewChecks: {
    parameters: {
      query?: never
      header?: never
      path: {
        bookingId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HdcChecks']
      }
    }
    responses: {
      /** @description The checks passed flag was set */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Curfew or HDC status in use for this booking id (possibly in P-Nomis). */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  clearCurfewChecks: {
    parameters: {
      query?: never
      header?: never
      path: {
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The checks passed flag was cleared */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Curfew or HDC status in use for this booking id (possibly in P-Nomis). */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  setApprovalStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        bookingId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ApprovalStatus']
      }
    }
    responses: {
      /** @description The new approval status was set */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Curfew or HDC status in use for this booking id (possibly in P-Nomis). */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  clearApprovalStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The new approval status was cleared */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Curfew or HDC status in use for this booking id (possibly in P-Nomis). */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCategorisationNextReviewDate: {
    parameters: {
      query?: {
        /**
         * @description Whether to timeout if locked
         * @example true
         */
        lockTimeout?: boolean
      }
      header?: never
      path: {
        /** @description The booking id of offender */
        bookingId: number
        /** @description The new next review date (in YYYY-MM-DD format) */
        nextReviewDate: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - user not authorised to update the categorisation. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Active categorisation not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Record in use for this booking id (possibly in P-Nomis). */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  setCategorisationInactive: {
    parameters: {
      query?: {
        /** @description Indicates which categorisation statuses to set.<li>ACTIVE (default): set all active (i.e. approved) categorisations inactive,</li><li>PENDING: set all pending (i.e. awaiting approval) categorisations inactive,</li> */
        status?: 'ACTIVE' | 'PENDING'
        /**
         * @description Whether to timeout if locked
         * @example true
         */
        lockTimeout?: boolean
      }
      header?: never
      path: {
        /** @description The booking id of offender */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request - e.g. invalid status. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to update categorisations. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Record in use for this booking id (possibly in P-Nomis). */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  rejectCategorisation: {
    parameters: {
      query?: {
        /**
         * @description Whether to timeout if locked
         * @example true
         */
        lockTimeout?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CategoryRejectionDetail']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation error - e.g. comment too long or committee code does not exist. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Record in use for this booking id (possibly in P-Nomis). */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCategorisation: {
    parameters: {
      query?: {
        /**
         * @description Whether to timeout if locked
         * @example true
         */
        lockTimeout?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CategorisationUpdateDetail']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request - e.g. category does not exist. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Record in use for this booking id (possibly in P-Nomis). */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createCategorisation: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CategorisationDetail']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: number
          }
        }
      }
      /** @description Invalid request - e.g. category does not exist. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  approveCategorisation: {
    parameters: {
      query?: {
        /**
         * @description Whether to timeout if locked
         * @example true
         */
        lockTimeout?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CategoryApprovalDetail']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Validation error - e.g. category does not exist. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Record in use for this booking id (possibly in P-Nomis). */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateOffenceActiveFlag: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenceActivationDto']
      }
    }
    responses: {
      /** @description The active flag has been updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  updateOffences: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenceDto'][]
      }
    }
    responses: {
      /** @description Offence updated successfully */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description A dependent resource is missing (either the offence or the home office code doesnt exist) */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createOffences: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenceDto'][]
      }
    }
    responses: {
      /** @description Offences created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description A dependent resource is missing (either the statute or the home office code doesnt exist) */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description A record already exists for a passed in offence */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  cancelPrisonToPrisonMove: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking linked to the scheduled event. */
        bookingId: number
        /** @description The identifier of the scheduled event to be cancelled. */
        eventId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonMoveCancellation']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  moveToCellSwap: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offender booking id
         * @example 1200866
         */
        bookingId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestMoveToCellSwap']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderBooking']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  moveToCell: {
    parameters: {
      query: {
        /**
         * @description The reason code for the move (from reason code domain CHG_HOUS_RSN)
         * @example ADM
         */
        reasonCode: string
        /**
         * @description The date / time of the move (defaults to current)
         * @example 2020-03-24T12:13:40
         */
        dateTime?: string
        /**
         * @description Whether to timeout if locked
         * @example true
         */
        lockTimeout?: boolean
      }
      header?: never
      path: {
        /**
         * @description The offender booking id
         * @example 1200866
         */
        bookingId: number
        /**
         * @description The cell location the offender has been moved to
         * @example MDI-1-1
         */
        internalLocationDescription: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CellMoveResult']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Record in use for this booking id (possibly in P-Nomis). */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  courtHearingDateAmendment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking to associate the update with. */
        bookingId: number
        /** @description The  court hearing to be updated. */
        hearingId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourtHearingDateAmendment']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtHearing']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAttendance: {
    parameters: {
      query?: {
        /**
         * @description Whether to timeout if locked
         * @example true
         */
        lockTimeout?: boolean
      }
      header?: never
      path: {
        /**
         * @description The booking Id of the prisoner
         * @example 213531
         */
        bookingId: number
        /**
         * @description The activity id
         * @example 1212131
         */
        activityId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAttendance']
      }
    }
    responses: {
      /** @description Attendance data has been updated */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request - e.g. validation error. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to attend activity. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Resource not found - booking or event does not exist. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Record in use for this booking id (possibly in P-Nomis). */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal server error. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAttendance_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderNo of the prisoner
         * @example A1234AA
         */
        offenderNo: string
        /**
         * @description The activity id
         * @example 1212131
         */
        activityId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAttendance']
      }
    }
    responses: {
      /** @description Attendance data has been updated */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request - e.g. validation error. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to attend activity. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Resource not found - booking or event does not exist. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal server error. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAttendanceForMultipleBookingIds: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAttendanceBatch']
      }
    }
    responses: {
      /** @description Attendance data has been updated */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request - e.g. validation error. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to attend activity. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Resource not found - booking or event does not exist. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal server error. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAppointmentComment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The appointment's unique identifier. */
        appointmentId: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['UpdateComment']
      }
    }
    responses: {
      /** @description The appointment's comment has been set. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The client is not authorised for this operation */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The appointment was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Record in use for this booking id (possibly in P-Nomis) */
      423: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getAlias: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The alias identifier (offenderId) */
        offenderId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alias successfully returned. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CorePersonRecordAlias']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAlias: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The alias identifier (offenderId) */
        offenderId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAlias']
      }
    }
    responses: {
      /** @description The prisoner's alias has been updated. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CorePersonRecordAlias']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderIdentifier: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The alias identifier (offenderId) */
        offenderId: number
        /** @description The sequence id */
        offenderIdSeq: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderIdentifier']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to view identifiers. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateOffenderIdentifier: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The alias identifier (offenderId) */
        offenderId: number
        /** @description The identifier sequence */
        offenderIdSeq: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenderIdentifierUpdateRequest']
      }
    }
    responses: {
      /** @description Identifier updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to update identifiers. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Identifier not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAgency: {
    parameters: {
      query?: {
        /** @description Only return active agencies */
        activeOnly?: boolean
        /** @description Agency Type */
        agencyType?: string
        /** @description Returns Address Information */
        withAddresses?: boolean
        /** @description Don't format the location */
        skipFormatLocation?: boolean
        /** @description Returns area and region information */
        withAreas?: boolean
      }
      header?: never
      path: {
        /** @description The ID of the agency */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Agency']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAgency: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The ID of the agency */
        agencyId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToUpdateAgency']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Agency']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to update a agency location */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAgencyAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The ID of the agency */
        agencyId: string
        /** @description The ID of the address */
        addressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToUpdateAddress']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AddressDto']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to update a agency address */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAgencyAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The ID of the agency */
        agencyId: string
        /** @description The ID of the address */
        addressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - user not authorised to delete a agency address */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAgencyAddressPhoneContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The ID of the agency */
        agencyId: string
        /** @description The ID of the address */
        addressId: number
        /** @description The ID of the contact */
        phoneId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToUpdatePhone']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Telephone']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to update a agency address */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAgencyAddressPhoneContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The ID of the agency */
        agencyId: string
        /** @description The ID of the address */
        addressId: number
        /** @description The ID of the contact */
        phoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden - user not authorised to delete a agency address */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createTransaction: {
    parameters: {
      query?: never
      header?: {
        /** @description If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway. */
        'X-Client-Name'?: string
      }
      path: {
        /**
         * @description Prison ID
         * @example BMI
         */
        prison_id: string
        /**
         * @description Offender Noms Id
         * @example A1417AE
         */
        noms_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTransaction']
      }
    }
    responses: {
      /** @description Transaction Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Transaction']
        }
      }
      /** @description One of: <ul><li>Insufficient Funds - The prisoner has insufficient funds in the required account to cover the cost of the debit transaction</li><li>Offender not in specified prison - prisoner identified by {noms_id} is not in prison {prison_id}</li><li>Invalid transaction type - The transaction type has not been set up for the API for {prison_id}</li><li>Finance Exception - An unexpected error has occurred. Details will have been logged in the nomis_api_logs table on the Nomis database.</li></ul> */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Duplicate post - The unique_client_ref has been used before */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  storePayment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison ID
         * @example BMI
         */
        prison_id: string
        /**
         * @description Offender Noms Id
         * @example A1417AE
         */
        noms_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['StorePaymentRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaymentResponse']
        }
      }
      /** @description One of: <ul><li>Offender not in specified prison - prisoner identified by {noms_id} is not in prison {prison_id}</li><li>Invalid payment type</li><li>Client reference more than 12 characters</li><li>Missing data in request</li><li>Exception - An unexpected error has occurred. Details will have been logged in the nomis_api_logs table on the Nomis database.</li></ul> */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested prison or offender could not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Duplicate post - after an error with a post this response will be given for subsequent duplicate attempts */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  transferTransaction: {
    parameters: {
      query?: never
      header?: {
        /** @description If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway. */
        'X-Client-Name'?: string
      }
      path: {
        /**
         * @description Prison ID
         * @example BMI
         */
        previous_prison_id: string
        /**
         * @description Offender Noms Id
         * @example A1417AE
         */
        noms_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTransaction']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Transfer']
        }
      }
      /** @description One of: <ul><li>Invalid transaction type - The transaction type has not been set up for the API for {prison_id}</li><li>Finance Exception - This indicates an unexpected financial problem, check the nomis_api_log table for details.</li><li>Only receipt transaction types allowed - Only transaction types with a transaction usage of Receipt are allowed.</li><li>Sum of sub account balances not equal to current balance - The sum of all the sub account balances does equal the current balance held for the trust account</li><li>Offender being transferred - The offender is currently in transit</li><li>Offender still in specified prison - The offender is still at the specified prison. Use Record Transaction instead.</li></ul> */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description One of: <ul><li>Offender Not Found - No offender matching the specified offender_id has been found on nomis.</li><li>Offender never at prison - The offender has never been at the specified prison</li></ul> */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Duplicate Post - A transaction already exists with the client_unique_ref provided. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getUserDetailsList: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description The list of user details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserDetail'][]
        }
      }
    }
  }
  getStaffDetails: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StaffDetail'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addCondition: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Module name
         * @example OIDCHOLO
         */
        moduleName: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestSplashCondition']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SplashScreenDto']
        }
      }
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePrisonerDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description offenderNo
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePrisonerDetails']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Requires role ROLE_SMOKE_TEST */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  checkServicePrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The code of the service from the EXTERNAL_SERVICES table
         * @example ACTIVITY
         */
        serviceCode: string
        /**
         * @description The id of the prison
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Service is switched on for the service code and prison id. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description A valid auth token was not presented */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The auth token does not have the necessary role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The service code does not exist or the service is not switched on for the prison. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addServicePrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The code of the service from the EXTERNAL_SERVICES table */
        serviceCode: string
        /** @description The id of the prison from the AGENCY_LOCATIONS table */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonDetails']
        }
      }
      /** @description A valid auth token was not presented */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The auth token does not have the necessary role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The service code or prison does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The prison is already active for the service */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  removeServicePrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The code of the service from the EXTERNAL_SERVICES table */
        serviceCode: string
        /** @description The id of the prison from the AGENCY_LOCATIONS table */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description A valid auth token was not presented */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The auth token does not have the necessary role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The service code or prison does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getEventsByLocationPath: {
    parameters: {
      query?: {
        /** @description Date of whereabouts list, default today */
        date?: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: {
        /** @description Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path: {
        /** @description The prison Id */
        prisonId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisits: {
    parameters: {
      query?: {
        /** @description Date of whereabouts list, default today */
        date?: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
    }
  }
  getExternalTransfers: {
    parameters: {
      query: {
        /** @description Date of scheduled transfer */
        date: string
      }
      header?: never
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
    }
  }
  getEventsByLocationId: {
    parameters: {
      query?: {
        /** @description Date of whereabouts list, default today */
        date?: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: {
        /** @description Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path: {
        /** @description The prison. */
        agencyId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtEvents: {
    parameters: {
      query?: {
        /** @description Date of whereabouts list, default today */
        date?: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
    }
  }
  getCountActivitiesByDateRange: {
    parameters: {
      query: {
        /** @description From date of whereabouts list */
        fromDate: string
        /** @description To Date of whereabouts list */
        toDate: string
        /** @description Set of one or more of AM, PM or ED */
        timeSlots: ('AM' | 'PM' | 'ED')[]
      }
      header?: never
      path: {
        /**
         * @description The prison.
         * @example MDI
         */
        agencyId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          [key: string]: number
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerActivitiesCount']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointments: {
    parameters: {
      query: {
        /** @description Date the appointments are scheduled */
        date: string
        /** @description Location id */
        locationId?: number
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledAppointmentDto'][]
        }
      }
    }
  }
  getAppointmentsForOffenders: {
    parameters: {
      query?: {
        /** @description Date of whereabouts list, default today */
        date?: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
    }
  }
  getActivitiesAtAllLocations: {
    parameters: {
      query?: {
        /** @description Date of whereabouts list, default today */
        date?: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
        /** @description Include suspended scheduled activity - defaults to false */
        includeSuspended?: boolean
      }
      header?: {
        /** @description Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path: {
        /** @description The prison. */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivitiesForBookings: {
    parameters: {
      query?: {
        /** @description Date of whereabouts list, default today */
        date?: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
        /** @description Whether to include 'excluded' activities in the results */
        includeExcluded?: boolean
      }
      header?: never
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
    }
  }
  getActivitiesByEventIds: {
    parameters: {
      query?: never
      header?: never
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
    }
  }
  getPrisoners: {
    parameters: {
      query?: {
        /** @description If true the result set should include a row for every matched alias.  If the request includes some combination of firstName, lastName and dateOfBirth then this will be a subset of the OFFENDERS records for one or more offenders. Otherwise it will be every OFFENDERS record for each match on the other search criteria. Default is false. */
        includeAliases?: boolean
        /** @description List of offender NOMS numbers. NOMS numbers have the format:<b>ANNNNAA</b> */
        offenderNo?: string[]
        /** @description The offender's PNC (Police National Computer) number. */
        pncNumber?: string
        /** @description The offender's CRO (Criminal Records Office) number. */
        croNumber?: string
        /** @description The first name of the offender. */
        firstName?: string
        /** @description The middle name(s) of the offender. */
        middleNames?: string
        /** @description The last name of the offender. */
        lastName?: string
        /** @description The offender's date of birth. Cannot be used in conjunction with <i>dobFrom</i> or <i>dobTo</i>. Must be specified using YYYY-MM-DD format. */
        dob?: string
        /** @description Start date for offender date of birth search. If <i>dobTo</i> is not specified, an implicit <i>dobTo</i> value of <i>dobFrom</i> + 10 years will be applied. If <i>dobTo</i> is specified, it will be adjusted, if necessary, to ensure it is not more than 10 years after <i>dobFrom</i>. Cannot be used in conjunction with <i>dob</i>. Must be specified using YYYY-MM-DD format. */
        dobFrom?: string
        /** @description End date for offender date of birth search. If <i>dobFrom</i> is not specified, an implicit <i>dobFrom</i> value of <i>dobTo</i> - 10 years will be applied. Cannot be used in conjunction with <i>dob</i>. Must be specified using YYYY-MM-DD format. */
        dobTo?: string
        /** @description Offender's location filter (IN, OUT or ALL) - defaults to ALL. */
        location?: string
        /** @description Offender's gender code (F - Female, M - Male, NK - Not Known or NS - Not Specified). */
        gender?: string
        /** @description If <i>true</i>, the search will use partial, start-of-name matching of offender names (where provided). For example, if <i>lastName</i> criteria of 'AD' is specified, this will match an offender whose last name is 'ADAMS' but not an offender whose last name is 'HADAD'. This will typically increase the number of matching offenders found. This parameter can be used with any other search processing parameter (e.g. <i>prioritisedMatch</i> or <i>anyMatch</i>). */
        partialNameMatch?: boolean
        /** @description If <i>true</i>, search criteria prioritisation is used and searching/matching will stop as soon as one or more matching offenders are found. The criteria priority is:<br/><br/>1. <i>offenderNo</i><br/> 2. <i>pncNumber</i><br/>3. <i>croNumber</i><br/>4. <i>firstName</i>, <i>lastName</i>, <i>dob</i> <br/>5. <i>dobFrom</i>, <i>dobTo</i><br/><br/>As an example of how this works, if this parameter is set <i>true</i> and an <i>offenderNo</i> is specified and an offender having this offender number is found, searching will stop and that offender will be returned immediately. If no offender matching the specified <i>offenderNo</i> is found, the search will be repeated using the next priority criteria (<i>pncNumber</i>) and so on. Note that offender name and date of birth criteria have the same priority and will be used together to search for matching offenders (In this case the location filter will be ignored). */
        prioritisedMatch?: boolean
        /** @description If <i>true</i>, offenders that match any of the specified criteria will be returned. The default search behaviour is to only return offenders that match <i>all</i> of the specified criteria. If the <i>prioritisedMatch</i> parameter is also set <i>true</i>, this parameter will only impact the behaviour of searching using offender name and date of birth criteria. */
        anyMatch?: boolean
      }
      header?: {
        /** @description Requested offset of first record in returned collection of prisoner records. */
        'Page-Offset'?: number
        /** @description Requested limit to number of prisoner records returned. */
        'Page-Limit'?: number
        /** @description Comma separated list of one or more of the following fields - <b>offenderNo, pncNumber, croNumber, firstName, lastName, dob</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerDetail'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisoners_1: {
    parameters: {
      query?: never
      header?: {
        /** @description Requested offset of first record in returned collection of prisoner records. */
        'Page-Offset'?: number
        /** @description Requested limit to number of prisoner records returned. */
        'Page-Limit'?: number
        /** @description Comma separated list of one or more of the following fields - <b>offenderNo, pncNumber, croNumber, firstName, lastName, dob</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerDetailSearchCriteria']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerDetail'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMark: {
    parameters: {
      query: {
        /** @description The create request */
        request: components['schemas']['DistinguishingMarkDetails']
      }
      header?: never
      path: {
        /**
         * @description Prisoner unique reference
         * @example A1234AA
         */
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': {
          /**
           * Format: binary
           * @description The image as a file to upload (optional)
           */
          file: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DistinguishingMark']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description PRISON_API__PRISONER_PROFILE__RW role required to access endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The offender number could not be found or has no bookings. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addMarkPhoto: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prisoner unique reference
         * @example A1234AA
         */
        prisonerNumber: string
        /** @description The sequence id of the mark */
        seqId: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description The image as a file to upload
           */
          file: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DistinguishingMark']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description PRISON_API__PRISONER_PROFILE__RW role required to access endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The offender number could not be found or has no bookings. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPrisoner: {
    parameters: {
      query: {
        /** @description When true do not reject new prisoners with same name as existing person */
        allowNameDuplicate: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToCreate']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to create a prisoner. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderNumbers: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Telephone'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to view prisoner phone numbers. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addOffenderPhoneNumbers: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenderPhoneNumberCreateRequest']
      }
    }
    responses: {
      /** @description Phone number added. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Telephone']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to add phone numbers. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllOffenderIdentifiers: {
    parameters: {
      query?: {
        includeAliases?: boolean
      }
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderIdentifier'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to view identifiers. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addOffenderIdentifiers: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenderIdentifierCreateRequest'][]
      }
    }
    responses: {
      /** @description Identifiers added. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to add identifiers. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMilitaryRecords: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MilitaryRecords']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMilitaryRecord: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MilitaryRecordRequest']
      }
    }
    responses: {
      /** @description Military record created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to create military record for prisoner */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderEmails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Email'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to view prisoner email addresses. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addOffenderEmailAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenderEmailAddressCreateRequest']
      }
    }
    responses: {
      /** @description Email address added. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Email']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to add email addresses */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  newBooking: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderNo of prisoner
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestForNewBooking']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to receive prisoner on new bookings */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAliases: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Aliases successfully returned. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CorePersonRecordAlias'][]
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAlias: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAlias']
      }
    }
    responses: {
      /** @description A new alias for the prisoner has been created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CorePersonRecordAlias']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAddressesByOffenderNo: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description offenderNo
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AddressDto'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addOffenderAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAddress']
      }
    }
    responses: {
      /** @description Address added. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AddressDto']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to add email addresses */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderAdjudicationHearings: {
    parameters: {
      query: {
        agencyId: string
        fromDate: string
        toDate: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderAdjudicationHearing'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderSentences: {
    parameters: {
      query?: {
        /** @description agency/prison to restrict results, if none provided current active caseload will be used, unless offenderNo list is specified */
        agencyId?: string
        /** @description a list of offender numbers to search. */
        offenderNo?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSentenceDetail'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  postOffenderSentences: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description The list of offenders is returned. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSentenceDetail'][]
        }
      }
    }
  }
  getBatchLatestHomeDetentionCurfew: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description List of HDC status information */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HomeDetentionCurfew'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  postOffenderSentencesBookings: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description The list of offenders is returned. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSentenceDetail'][]
        }
      }
    }
  }
  getOffenderKeyDates: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The booking id of offender */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Offender key dates found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderCalculatedKeyDates']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to update an offender's dates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateOffenderKeyDates: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The booking id of offender */
        bookingId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToUpdateOffenderDates']
      }
    }
    responses: {
      /** @description Offender key dates calculation created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceCalcDates']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to update an offender's dates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderAssessmentsAssessmentCode: {
    parameters: {
      query: {
        /** @description The required offender numbers */
        offenderNo: string[]
        /** @description Returns only assessments for the current sentence if true, otherwise assessments for all previous sentences are included */
        latestOnly?: boolean
        /** @description Returns only active assessments if true, otherwise inactive and pending assessments are included */
        activeOnly?: boolean
        /** @description Returns only the last assessment per sentence if true, otherwise all assessments for the booking are included */
        mostRecentOnly?: boolean
      }
      header?: never
      path: {
        /** @description Assessment Type Code */
        assessmentCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Assessment'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  postOffenderAssessmentsAssessmentCode: {
    parameters: {
      query?: {
        /** @description Returns only assessments for the current sentence if true, otherwise assessments for all previous sentences are included */
        latestOnly?: boolean
        /** @description Returns only active assessments if true, otherwise inactive and pending assessments are included */
        activeOnly?: boolean
        /** @description Returns only the last assessment per sentence if true, otherwise all assessments for the booking are included */
        mostRecentOnly?: boolean
      }
      header?: never
      path: {
        /** @description Assessment Type Code */
        assessmentCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description The assessment list is returned. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Assessment'][]
        }
      }
    }
  }
  postOffenderAssessmentsCsraList: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description The CSRA assessment list is returned, 1 per offender. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Assessment'][]
        }
      }
    }
  }
  getOffenderCategorisationsSystem: {
    parameters: {
      query?: {
        /** @description Only get the latest category for each booking */
        latestOnly?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description The list of offenders with categorisation details is returned if categorisation record exists */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderCategorise'][]
        }
      }
    }
  }
  unlinkOffencesFromSchedules: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenceToScheduleMappingDto'][]
      }
    }
    responses: {
      /** @description Offences unlinked from schedules successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  createStatute: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['StatuteDto'][]
      }
    }
    responses: {
      /** @description Statutes created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  linkOffencesToSchedules: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenceToScheduleMappingDto'][]
      }
    }
    responses: {
      /** @description Offences linked to schedules successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  createHomeOfficeCodes: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HOCodeDto'][]
      }
    }
    responses: {
      /** @description Home Office Notifiable Offence Codes created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getRecentMovementsByDate: {
    parameters: {
      query: {
        /** @description A timestamp that indicates the earliest record required */
        fromDateTime: string
        /** @description The date for which movements are searched, defaults to today */
        movementDate?: string
        /** @description movement type codes to filter by, defaults to TRN, REL, ADM */
        movementTypes?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Movement'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createExternalMovement: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateExternalMovement']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderMovement']
        }
      }
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderMovement']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMovementsByOffenders: {
    parameters: {
      query?: {
        /** @description movement type codes to filter by */
        movementTypes?: string[]
        /** @description Returns only latest movement for the offenders specified */
        latestOnly?: boolean
        /** @description Returns all movements for this offender list from all bookings if true */
        allBookings?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Movement'][]
        }
      }
    }
  }
  getLatestArrivalDate: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderLatestArrivalDate'][]
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  postKeyWorkerAgencyIdCurrentAllocations: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The agency (prison) identifier. */
        agencyId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description The allocations list is returned. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['KeyWorkerAllocationDetail'][]
        }
      }
    }
  }
  postKeyWorkerOffendersAllocationHistory: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description The allocations history list is returned. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderKeyWorker'][]
        }
      }
    }
  }
  getImagesByOffender: {
    parameters: {
      query?: never
      header?: never
      path: {
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ImageDetail'][]
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  putImageMultiPart: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender number relating to this image. */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description The image as a file to upload
           */
          file: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ImageDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description PRISON_API__PRISONER_PROFILE__RW role required to access endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The offender number could not be found or has no bookings. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  transferToSavings: {
    parameters: {
      query?: never
      header?: {
        /** @description If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway. */
        'X-Client-Name'?: string
      }
      path: {
        /**
         * @description Prison ID
         * @example BMI
         */
        prisonId: string
        /**
         * @description Offender Noms Id
         * @example A1417AE
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TransferTransaction']
      }
    }
    responses: {
      /** @description Transaction Created */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TransferTransactionDetail']
        }
      }
      /** @description One of: <ul><li>Insufficient Funds - The prisoner has insufficient funds in the required account to cover the cost of the debit transaction</li><li>Offender not in specified prison - prisoner identified by {noms_id} is not in prison {prison_id}</li><li>Finance Exception - An unexpected error has occurred. Details will have been logged in the nomis_api_logs table on the Nomis database.</li></ul> */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Duplicate post - The unique_client_ref has been used before */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerEducationsInBulk: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Education'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCaseNoteUsageSummary: {
    parameters: {
      query?: {
        /** @description a list of offender numbers to search. */
        offenderNo?: string[]
        /** @description Staff Id to filter by */
        staffId?: number
        /** @description Agency Id to filter by */
        agencyId?: string
        /** @description Number of month to look forward (if fromDate only defined), or back (if toDate only defined). Default is 1 month */
        numMonths?: number
        /** @description Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered.  If not defined then the numMonth before the current date, unless a toDate is defined when it will be numMonths before toDate */
        fromDate?: string
        /** @description Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered. If not defined then the current date will be used, unless a fromDate is defined when it will be numMonths after fromDate */
        toDate?: string
        /** @description Case note type. */
        type?: string
        /** @description Case note sub-type. */
        subType?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseNoteUsage'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCaseNoteUsageSummaryByPost: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CaseNoteUsageRequest']
      }
    }
    responses: {
      /** @description The case note usage list is returned. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseNoteUsage'][]
        }
      }
    }
  }
  getCaseNoteUsageSummaryByDates: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CaseNoteTypeSummaryRequest']
      }
    }
    responses: {
      /** @description The case note usage list is returned. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseNoteTypeCount'][]
        }
      }
    }
  }
  getCaseNoteStaffUsageSummaryByPost: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CaseNoteStaffUsageRequest']
      }
    }
    responses: {
      /** @description The case note usage list is returned. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseNoteStaffUsage'][]
        }
      }
    }
  }
  prisonToPrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking to associate the prison to prison move with. */
        bookingId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SchedulePrisonToPrisonMove']
      }
    }
    responses: {
      /** @description The scheduled prison move. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledPrisonToPrisonMove']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  prisonToCourt: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking to associate the court hearing with. */
        bookingId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonToCourtHearing']
      }
    }
    responses: {
      /** @description Court hearing created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtHearing']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonalCareNeeds: {
    parameters: {
      query: {
        /**
         * @description a list of types and optionally subtypes (joined with +) to search.
         * @example DISAB+RM
         */
        type: string[]
      }
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonalCareNeeds']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addPersonalCareNeed: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePersonalCareNeed']
      }
    }
    responses: {
      /** @description If successful the Personal Care Need is returned. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  prisonToCourt_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking to associate the court hearing with. */
        bookingId: number
        /** @description The court case to associate the hearing with. */
        courtCaseId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonToCourtHearing']
      }
    }
    responses: {
      /** @description Court hearing created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtHearing']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  postBookingsBookingIdAppointments: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NewAppointment']
      }
    }
    responses: {
      /** @description The appointment has been recorded. The updated object is returned including the status. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEvent']
        }
      }
    }
  }
  getBasicInmateDetailsForOffenders: {
    parameters: {
      query?: {
        /** @description Returns only Offender details with an active booking if true, otherwise Offenders without an active booking are included */
        activeOnly?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateBasicDetails'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonalCareNeeds_1: {
    parameters: {
      query: {
        /**
         * @description a list of types and optionally subtypes (joined with +) to search.
         * @example DISAB+RM
         */
        type: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonalCareNeeds'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  countPersonalCareNeeds: {
    parameters: {
      query: {
        /**
         * @description problem type
         * @example DISAB
         */
        type: string
        /** @description Personal needs care must be on or after this date (in YYYY-MM-DD format). */
        fromStartDate: string
        /** @description Personal needs care must be on or before this date (in YYYY-MM-DD format). */
        toStartDate: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonalCareCounterDto'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAlertsByOffenderNos: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Alert'][]
        }
      }
    }
  }
  getOffenceHistoryForBookings: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenceHistoryDetail'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMainOffence: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenceDetail'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtEventOutcomes: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtEventOutcome'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAppointments: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentsToCreate']
      }
    }
    responses: {
      /** @description The appointments have been created. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreatedAppointmentDetails'][]
        }
      }
    }
  }
  deleteAppointments: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The client is not authorised for this operation */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Record in use for this booking id (possibly in P-Nomis) */
      423: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  checkServiceAgency: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The code of the service from the EXTERNAL_SERVICES table
         * @example ACTIVITY
         */
        serviceCode: string
        /**
         * @description The id of the agency
         * @example MDI
         */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Service is switched on for the service code and agency id. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description A valid auth token was not presented */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The auth token does not have the necessary role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The service code does not exist or the service is not switched on for the prison. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addServiceAgency: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The code of the service from the EXTERNAL_SERVICES table */
        serviceCode: string
        /** @description The id of the agency from the AGENCY_LOCATIONS table */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AgencyDetails']
        }
      }
      /** @description A valid auth token was not presented */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The auth token does not have the necessary role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The service code or agency does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The agency is already active for the service */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  removeServiceAgency: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The code of the service from the EXTERNAL_SERVICES table */
        serviceCode: string
        /** @description The id of the agency from the AGENCY_LOCATIONS table */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description A valid auth token was not presented */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The auth token does not have the necessary role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The service code or agency does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAgencies: {
    parameters: {
      query?: never
      header?: {
        /** @description Requested offset of first record in returned collection of agency records. */
        'Page-Offset'?: number
        /** @description Requested limit to number of agency records returned. */
        'Page-Limit'?: number
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Agency'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAgency: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToCreateAgency']
      }
    }
    responses: {
      /** @description The Agency location created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Agency']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to create an agency location */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAgencyAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The ID of the agency */
        agencyId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToUpdateAddress']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AddressDto']
        }
      }
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AddressDto']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to create a agency address */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAgencyAddressPhoneContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The ID of the agency */
        agencyId: string
        /** @description The ID of the address */
        addressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToUpdatePhone']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Telephone']
        }
      }
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Telephone']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to create a agency address */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitSlotsWithCapacity: {
    parameters: {
      query: {
        /**
         * @description Start date
         * @example 2019-04-01
         */
        start_date: string
        /**
         * @description End date
         * @example 2019-05-01
         */
        end_date: string
      }
      header?: never
      path: {
        /**
         * @description Prison ID
         * @example BMI
         */
        prison_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitSlots']
        }
      }
      /** @description Invalid start and end date range */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison Not Found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getTransactionByClientUniqueRef: {
    parameters: {
      query?: never
      header?: {
        /** @description If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway. */
        'X-Client-Name'?: string
      }
      path: {
        /**
         * @description Prison ID
         * @example WLI
         */
        prison_id: string
        /**
         * @description Offender Noms Id
         * @example A1404AE
         */
        noms_id: string
        /** @description Client unique reference */
        client_unique_ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AccountTransaction']
        }
      }
      /** @description Not a digital prison.  Prison not found. Offender has no account at this prison. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison, offender or accountType not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getHolds: {
    parameters: {
      query?: {
        /** @description Client unique reference */
        client_unique_ref?: string
      }
      header?: {
        /** @description If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway. */
        'X-Client-Name'?: string
      }
      path: {
        /**
         * @description Prison ID
         * @example BMI
         */
        prison_id: string
        /**
         * @description Offender Noms Id
         * @example A1417AE
         */
        noms_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Hold'][]
        }
      }
      /** @description Offender Not Found - No offender matching the specified offender_id has been found on nomis. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not in specified prison */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAccountBalance: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison ID
         * @example WLI
         */
        prison_id: string
        /**
         * @description Offender Noms Id
         * @example A1404AE
         */
        noms_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AccountBalance']
        }
      }
      /** @description Not a digital prison.  Prison not found. Offender has no account at this prison. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison or offender was not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAccountTransactions: {
    parameters: {
      query?: {
        /**
         * @description Start date for transactions (defaults to today if not supplied)
         * @example 2019-04-01
         */
        from_date?: string
        /**
         * @description To date for transactions (defaults to today if not supplied)
         * @example 2019-05-01
         */
        to_date?: string
      }
      header?: never
      path: {
        /**
         * @description Prison ID
         * @example WLI
         */
        prison_id: string
        /**
         * @description Offender Noms Id
         * @example A1404AE
         */
        noms_id: string
        /**
         * @description Account code
         * @example spends
         */
        account_code: 'spends' | 'cash' | 'savings'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AccountTransactions']
        }
      }
      /** @description Not a digital prison.  Prison not found. Offender has no account at this prison. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison, offender or accountType not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAccountBalanceTrailingSlash: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison ID
         * @example WLI
         */
        prison_id: string
        /**
         * @description Offender Noms Id
         * @example A1404AE
         */
        noms_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AccountBalance']
        }
      }
      /** @description Not a digital prison.  Prison not found. Offender has no account at this prison. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison or offender was not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLiveRoll: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison ID
         * @example BMI
         */
        prison_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LiveRoll']
        }
      }
      /** @description Not a digital prison.  Prison not found. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitUnavailability: {
    parameters: {
      query: {
        /**
         * @description dates
         * @example 2019-05-01,2019-05-02
         */
        dates: string
      }
      header?: never
      path: {
        /**
         * @description Offender Id
         * @example 1234567
         */
        offender_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            [key: string]: components['schemas']['UnavailabilityReason']
          }
        }
      }
      /** @description Dates requested must be in future */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitContactList: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Id
         * @example 1234567
         */
        offender_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactList']
        }
      }
      /** @description Invalid start and end date range */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitAvailableDates: {
    parameters: {
      query: {
        /**
         * @description Start date
         * @example 2019-04-01
         */
        start_date: string
        /**
         * @description To date
         * @example 2019-05-01
         */
        end_date: string
      }
      header?: never
      path: {
        /**
         * @description Offender Id
         * @example 1234567
         */
        offender_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AvailableDates']
        }
      }
      /** @description Invalid start and end date range */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffender: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Noms ID
         * @example A1417AE
         */
        noms_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Offender']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderPssDetail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Noms Id
         * @example A1404AE
         */
        noms_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Event']
        }
      }
      /** @description Invalid Noms ID */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestBookingLocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Noms ID
         * @example A1417AE
         */
        noms_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderLocation']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderImage: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Noms ID
         * @example A1417AE
         */
        noms_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Image']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBookings: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Noms ID
         * @example A1417AE
         */
        noms_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Bookings']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAlerts: {
    parameters: {
      query?: {
        /**
         * @description Alert Type, if alert_type is specified then only alerts of that type are returned
         * @example H
         */
        alert_type?: string
        /**
         * @description Modified Since - if modified_since is specified then only those alerts created or modified on or after the specified date time. The following formats are supported: 2018-01-10, 2018-01-10 03:34, 2018-01-10 03:34:12, 2018-01-10 03:34:12.123
         * @example 2017-10-07T12:23:45.678
         */
        modified_since?: string
        /**
         * @description Include Inactive alerts, If include_inactive=true is specified then inactive alerts are also returned.
         * @example true
         */
        include_inactive?: boolean
      }
      header?: never
      path: {
        /**
         * @description Offender Noms Id
         * @example A1583AE
         */
        noms_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Alerts']
        }
      }
      /** @description Invalid Noms ID */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderEvents: {
    parameters: {
      query: {
        /**
         * @description Prison ID
         * @example BMI
         */
        prison_id: string
        /**
         * @description Offender Noms Id
         * @example A1417AE
         */
        offender_id?: string
        /**
         * @description Event Type
         * @example ALERT
         */
        event_type?: string
        /**
         * @description From Date Time. The following formats are supported: 2018-01-10, 2018-01-10 03:34, 2018-01-10 03:34:12, 2018-01-10 03:34:12.123
         * @example 2017-10-07T12:23:45.678
         */
        from_datetime: string
        /**
         * @description Number of events to return.  If from_datetime is over a week ago then limit has to be specified and be less than or equal to 1000
         * @example 100
         */
        limit?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Events']
        }
      }
      /** @description Invalid Noms ID */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActiveOffender: {
    parameters: {
      query: {
        /**
         * @description Offender Noms Id
         * @example A1404AE
         */
        noms_id: string
        /**
         * @description date of birth
         * @example 2019-05-01
         */
        date_of_birth: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActiveOffender']
        }
      }
      /** @description Invalid Noms ID */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Parameter exception (invalid date, time, format, type) */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getUserDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The username of the user. */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMyUserInformation: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMyRoles: {
    parameters: {
      query?: {
        /** @description If set to true then all roles are returned rather than just API roles */
        allRoles?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRole'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMyLocations: {
    parameters: {
      query?: {
        /** @description Indicates non residential locations should be included */
        'include-non-residential-locations'?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMyCaseLoads: {
    parameters: {
      query?: {
        /** @description If set to true then all caseloads are returned */
        allCaseloads?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseLoad'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAccountTransactions_1: {
    parameters: {
      query?: {
        /**
         * @description Start date for transactions (defaults to today if not supplied)
         * @example 2019-04-01
         */
        from_date?: string
        /**
         * @description To date for transactions
         * @example 2019-05-01
         */
        to_date?: string
      }
      header?: never
      path: {
        /**
         * @description Prison ID
         * @example WLI
         */
        prison_id: string
        /**
         * @description Offender Noms Id
         * @example A1404AE
         */
        noms_id: string
        /**
         * @description Account code
         * @example spends
         */
        account_code: 'spends' | 'cash' | 'savings'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerTransactions']
        }
      }
      /** @description Not a digital prison.  Prison not found. Offender has no account at this prison. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison, offender or accountType not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getStaffDetail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The staff id of the staff member. */
        staffId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllRolesForAgency: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Agency Id. */
        agencyId: string
        /** @description The staff id of the staff member. */
        staffId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StaffRole'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  hasStaffRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Agency Id.
         * @example MDI
         */
        agencyId: string
        /**
         * @description The staff id of the staff member.
         * @example 1111111
         */
        staffId: number
        /**
         * @description Type of role
         * @example KW
         */
        roleType: 'KW' | 'POM'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getStaffEmailAddresses: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The staff id of the staff user. */
        staffId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
      /** @description No email addresses were found for this staff member. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
      /** @description The staffId supplied was not valid. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getStaffCaseloads: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The staff id of the staff user.
         * @example 123123
         */
        staffId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseLoad'][]
        }
      }
      /** @description No caseloads were found for this staff member. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseLoad'][]
        }
      }
      /** @description The staffId supplied was not valid or not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getStaffByAgencyRole: {
    parameters: {
      query?: {
        /** @description Filter results by first name and/or last name of staff member. Supplied filter term is matched to start of staff member's first and last name. */
        nameFilter?: string
        /** @description The staff id of a staff member. */
        staffId?: number
        /** @description Filters results by activeOnly staff members. */
        activeOnly?: boolean
      }
      header?: {
        /** @description Requested offset of first record in returned collection of role records. */
        'Page-Offset'?: number
        /** @description Requested limit to number of role records returned. */
        'Page-Limit'?: number
        /** @description Comma separated list of one or more of the following fields - <b>firstName, lastName</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path: {
        /** @description The agency (prison) id. */
        agencyId: string
        /** @description The staff role. */
        role: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StaffLocationRole'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllSplashScreens: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SplashScreenDto'][]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getConditionsByType: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Module name
         * @example OIDCHOLO
         */
        moduleName: string
        /**
         * @description Condition type
         * @example CASELOAD
         */
        conditionType: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SplashConditionDto'][]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getConditionsByTypeAndValue: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Module name
         * @example OIDCHOLO
         */
        moduleName: string
        /**
         * @description Condition type
         * @example CASELOAD
         */
        conditionType: string
        /**
         * @description Condition value
         * @example MDI
         */
        conditionValue: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SplashConditionDto']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  removeCondition: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Module name
         * @example OIDCHOLO
         */
        moduleName: string
        /**
         * @description Condition type
         * @example CASELOAD
         */
        conditionType: string
        /**
         * @description Condition value
         * @example MDI
         */
        conditionValue: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SplashScreenDto']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSplashScreensByCondition: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Condition type
         * @example CASELOAD
         */
        conditionType: string
        /**
         * @description Condition value
         * @example MDI
         */
        conditionValue: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SplashScreenDto'][]
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getServicePrisons: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The code of the service from the EXTERNAL_SERVICES table */
        serviceCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonDetails'][]
        }
      }
      /** @description A valid auth token was not presented */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The auth token does not have the necessary role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The service code does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledTransfersForPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerPrisonSchedule'][]
        }
      }
    }
  }
  getSuspendedActivitiesAtAllLocationsByDateRange: {
    parameters: {
      query?: {
        /** @description From date of whereabouts list, default today */
        fromDate?: string
        /** @description To Date of whereabouts list, default from date */
        toDate?: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        /** @description The prison. */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationEvents: {
    parameters: {
      query?: {
        /** @description Date of whereabouts list, default today */
        date?: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: {
        /** @description Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path: {
        /** @description The prison. */
        agencyId: string
        /** @description The location id where event is held. */
        locationId: number
        /** @description The locationUsage code from the location object - one of the INTERNAL_LOCATION_USAGE reference codes. */
        usage: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivitiesAtLocation: {
    parameters: {
      query?: {
        /** @description Date of whereabouts list, default today */
        date?: string
        /** @description AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
        /** @description Include suspended scheduled activity - defaults to false */
        includeSuspended?: boolean
      }
      header?: {
        /** @description Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path: {
        /** @description The location id where activity is held. */
        locationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLastRestoreDate: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      /** @description No restore information found - this endpoint is only guaranteed to return information when run on pre-prod. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduleReasons: {
    parameters: {
      query: {
        /** @description Specify event type. */
        eventType: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllReferenceDomains: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceDomain'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReferenceCodesByDomain: {
    parameters: {
      query?: {
        /** @description Specify whether or not to return reference codes with their associated sub-codes. */
        withSubCodes?: boolean
      }
      header?: {
        /** @description Requested offset of first record in returned collection of domain records. */
        'Page-Offset'?: number
        /** @description Requested limit to number of domain records returned. */
        'Page-Limit'?: number
        /** @description Comma separated list of one or more of the following fields - <b>code, description</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path: {
        /** @description The domain identifier/name. */
        domain: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReferenceCodeByDomainAndDescription: {
    parameters: {
      query: {
        /** @description decription of a reference code to find */
        description: string
        /** @description Specify whether or not to wild card the results */
        wildcard?: boolean
      }
      header?: never
      path: {
        /** @description The domain identifier/name. */
        domain: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReferenceCodesByDomain_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The domain identifier/name. */
        domain: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReferenceOrProfileCodesByDomain: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The domain or profile type identifier/name. */
        domain: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAlertTypes: {
    parameters: {
      query?: never
      header?: {
        /** @description Requested offset of first record in returned collection of alertType records. */
        'Page-Offset'?: number
        /** @description Requested limit to number of alertType records returned. */
        'Page-Limit'?: number
        /** @description Comma separated list of one or more of the following fields - <b>code, description</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonersOffenderNo: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offenderNo to search for */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerDetail'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerInformationById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No (NOMS ID)
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerInformation']
        }
      }
      /** @description Unauthorized. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerNumbers: {
    parameters: {
      query?: {
        /** @description The page number of the paged results */
        page?: number
        /** @description Requested limit to number of prisoner numbers returned. */
        size?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageString']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description offenderNo
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerSearchDetails']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requires role ROLE_PRISONER_INDEX */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCalculablePrisonerEnvelopeByEstablishment: {
    parameters: {
      query?: {
        /** @description The page number to retrieve of the paged results (starts at zero) */
        page?: number
        /** @description Requested limit of the page size (i.e. the number of bookings in response) */
        size?: number
      }
      header?: never
      path: {
        /** @description The identifier of the establishment(prison) to get the active bookings for */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageCalculablePrisoner']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonRollCount: {
    parameters: {
      query?: {
        'include-cells'?: boolean
      }
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns roll count for a specific prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonRollCount']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the ESTABLISHMENT_ROLL role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonRollCountSummary: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns roll count summary for a specific prison */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonRollSummary']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the ESTABLISHMENT_ROLL role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getRollCountMovementInformation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns cell list of roll-counts for a specific prison and sub-location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonRollMovementInfo']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the ESTABLISHMENT_ROLL role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCellLevelRollCount: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prisonId: string
        /**
         * @description Location ID of parent of the cells
         * @example 1212312
         */
        locationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns cell list of roll-counts for a specific prison and sub-location */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonRollCount']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing required role. Requires the ESTABLISHMENT_ROLL role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonPhones: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The persons NOMIS identifier (personId). */
        personId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Telephone'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonIdentifiers: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The persons NOMIS identifier (personId). */
        personId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonIdentifier'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonEmails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The persons NOMIS identifier (personId). */
        personId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Email'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonAddresses: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The persons NOMIS identifier (personId). */
        personId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AddressDto'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIdentifyingMarksForLatestBooking: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prisoner unique reference
         * @example A1234AA
         */
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DistinguishingMark'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description PRISON_API__PRISONER_PROFILE__RW role required to access endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getImage: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the image */
        photoId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description PRISON_API__PRISONER_PROFILE__RW role required to access endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffender_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderNo of offender
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getTransactionsHistory: {
    parameters: {
      query?: {
        /**
         * @description Account code
         * @example spends
         */
        account_code?: 'spends' | 'cash' | 'savings'
        /**
         * @description Start date for transactions, format yyyy-MM-dd
         * @example 2019-04-01
         */
        from_date?: string
        /**
         * @description To date for transactions, format yyyy-MM-dd
         * @example 2019-05-01
         */
        to_date?: string
        /**
         * @description Transaction type
         * @example A_EARN
         */
        transaction_type?: string
      }
      header?: never
      path: {
        /**
         * @description Offender No
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderTransactionHistoryDto'][]
        }
      }
      /** @description Not a digital offender. Offender has no account at this prison. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison, offender or accountType not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderSentenceDetail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Noms ID or Prisoner number (also called offenderNo) */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSentenceDetail']
        }
      }
    }
  }
  getScheduledEvents: {
    parameters: {
      query?: {
        /** @description Returned events must be scheduled on or after this date (in YYYY-MM-DD format).  The from date must be on or after today. */
        fromDate?: string
        /** @description Returned events must be scheduled on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
      header?: never
      path: {
        /**
         * @description Offender No
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderPrisonPeriods: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The offenderNo of offender
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerInPrisonSummary']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitRestrictions: {
    parameters: {
      query?: {
        /** @description return only restriction that are active (derived from startDate and expiryDate) */
        activeRestrictionsOnly?: boolean
      }
      header?: never
      path: {
        /**
         * @description Offender No
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderRestrictions']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIncidentsByOffenderNo: {
    parameters: {
      query: {
        /**
         * @description incidentType
         * @example ASSAULT
         */
        incidentType: string[]
        /**
         * @description participationRoles
         * @example ASSIAL
         */
        participationRoles:
          | 'ACTINV'
          | 'ASSIAL'
          | 'FIGHT'
          | 'IMPED'
          | 'PERP'
          | 'SUSASS'
          | 'SUSINV'
          | 'VICT'
          | 'AI'
          | 'PAS'
          | 'AO'
      }
      header?: never
      path: {
        /**
         * @description offenderNo
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncidentCase'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getHousingLocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderLocation']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getEvents: {
    parameters: {
      query?: {
        /** @description Returned events must be scheduled on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** @description Returned events must be scheduled on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
      header?: never
      path: {
        /**
         * @description Offender No
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderDamageObligations: {
    parameters: {
      query?: {
        /**
         * @description Filter by obligation status. Leave blank to return all
         * @example ACTIVE
         */
        status?: 'INACT' | 'PAID' | 'ONH' | 'ACTIVE' | 'APPEAL'
      }
      header?: never
      path: {
        /**
         * @description offenderNo
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderDamageObligationResponse']
        }
      }
      /** @description Offender does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCommunicationNeeds: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CorePersonCommunicationNeeds']
        }
      }
      /** @description Offender not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderContacts: {
    parameters: {
      query?: {
        /** @description return only contacts approved for visits */
        approvedVisitorsOnly?: boolean
        /** @description return only active contacts, nb visitors can be inactive contacts */
        activeOnly?: boolean
      }
      header?: never
      path: {
        /**
         * @description Offender No
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderContacts']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAlertsForLatestBookingByOffenderNo: {
    parameters: {
      query?: {
        /**
         * @description Comma separated list of alertCodes to filter by
         * @example XA,RSS
         */
        alertCodes?: string
        /** @description Comma separated list of one or more Alert fields */
        sort?:
          | 'alertId'
          | 'bookingId'
          | 'alertType'
          | 'alertCode'
          | 'comment'
          | 'dateCreated'
          | 'dateExpires'
          | 'active'
        /**
         * @description Sort order
         * @example DESC
         */
        direction?: string
      }
      header?: never
      path: {
        /**
         * @description Noms ID or Prisoner number
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Alert'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestSentenceSummary: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Noms ID or Prisoner number (also called offenderNo) */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceSummary']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderBeliefHistory: {
    parameters: {
      query?: {
        bookingId?: string
      }
      header?: never
      path: {
        /** @description The prisoner number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Belief'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to view belief history. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAlertsForAllBookingByOffenderNo: {
    parameters: {
      query?: {
        /**
         * @description Comma separated list of alertCodes to filter by
         * @example XA,RSS
         */
        alertCodes?: string
        /** @description Comma separated list of one or more Alert fields */
        sort?:
          | 'alertId'
          | 'bookingId'
          | 'alertType'
          | 'alertCode'
          | 'comment'
          | 'dateCreated'
          | 'dateExpires'
          | 'active'
        /**
         * @description Sort order
         * @example DESC
         */
        direction?: string
      }
      header?: never
      path: {
        /**
         * @description Noms ID or Prisoner number
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Alert'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNextPrisonerIdentifier: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderSentencesHomeDetentionCurfewCandidates: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Sentence details for offenders who are candidates for Home Detention Curfew. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSentenceCalcBaseSentenceCalcDates'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSentenceAndOffenceDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The required booking id (mandatory) */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Sentence and offence details for a prisoner. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSentenceAndOffences']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderSentenceTerms: {
    parameters: {
      query?: {
        filterBySentenceTermCodes?: string[]
      }
      header?: never
      path: {
        /** @description The required booking id (mandatory) */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Sentence term details for a prisoner. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderSentenceTerms'][]
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestHomeDetentionCurfew: {
    parameters: {
      query?: never
      header?: never
      path: {
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description HDC information */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HomeDetentionCurfew']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderFinePayments: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The required booking id (mandatory) */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Offender fine payment details for a prisoner. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderFinePaymentDto']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderKeyDatesForOffenderSentCalcId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The Offender Sent Calc Id id of offender */
        offenderSentCalcId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Offender key dates found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderCalculatedKeyDates']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to get an offender's calculated dates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderLatestTused: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The nomis id of the offender */
        nomsId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description TUSED data found for offender */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LatestTusedData']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to access latest TUSED information for offender */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderCalculations: {
    parameters: {
      query?: {
        /** @description return only calculations from the latest booking */
        latestOnly?: boolean
      }
      header?: never
      path: {
        /** @description The booking id of offender */
        nomsId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Offender calculations found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceCalculationSummary'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden - user not authorised to update an offender's dates */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderCsraAssessments: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssessmentSummary'][]
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderCsraAssessment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The booking id of offender */
        bookingId: number
        /** @description The assessment sequence number for the given offender booking */
        assessmentSeq: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssessmentDetail']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderCategorisations: {
    parameters: {
      query: {
        /** @description Indicates which type of category information is required.
         *         <li>UNCATEGORISED: Offenders who need to be categorised,</li>
         *         <li>CATEGORISED: Offenders who have an approved categorisation,</li>
         *         <li>RECATEGORISATIONS: Offenders who will soon require recategorisation</li> */
        type: string
        /** @description For type CATEGORISED: The past date from which categorisations are returned.<br />
         *     For type RECATEGORISATIONS: the future cutoff date: list includes all prisoners who require re-categorisation on or before this date.<br />
         *     For type UNCATEGORISED: Ignored do not set this parameter. */
        date?: string
      }
      header?: never
      path: {
        /** @description Prison id */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderCategorise'][]
        }
      }
    }
  }
  getAssessments: {
    parameters: {
      query: {
        /** @description The required offender numbers Ids (mandatory) */
        offenderNo: string[]
        /** @description Returns only assessments for the current sentence if true, otherwise assessments for all previous sentences are included */
        latestOnly?: boolean
        /** @description Returns only active assessments if true, otherwise inactive and pending assessments are included */
        activeOnly?: boolean
        /** @description Returns only the last assessment per sentence if true, otherwise all assessments for the booking are included */
        mostRecentOnly?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Assessment'][]
        }
      }
      /** @description Invalid request - e.g. no offender numbers provided. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getHistoricalAttendances: {
    parameters: {
      query: {
        /**
         * @description Only include attendences on or after this date
         * @example 2021-01-02
         */
        fromDate: string
        /**
         * @description Only include attendences on or before this date
         * @example 2021-05-27
         */
        toDate: string
        /** @description Only include attendences which have this outcome (default all) */
        outcome?: 'ABS' | 'ACCAB' | 'ATT' | 'CANC' | 'NREQ' | 'SUS' | 'UNACAB' | 'REST'
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path: {
        /** @description The offenderNo of the prisoner */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getRecentStartedActivities: {
    parameters: {
      query: {
        /**
         * @description Only include activities that have not ended or have an end date after the given date
         * @example 1970-01-02
         */
        earliestEndDate: string
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path: {
        /** @description The offenderNo of the prisoner */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffencesThatStartWith: {
    parameters: {
      query?: {
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path: {
        /**
         * @description The offence code
         * @example AA1256A
         */
        offenceCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageOffenceDto']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffendersOutToday: {
    parameters: {
      query?: {
        /** @description The optional movement type to filter by e.g CRT, REL, TAP, TRN */
        movementType?: string
      }
      header?: never
      path: {
        /** @description The prison id */
        agencyId: string
        /** @description date */
        isoDate: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderOutTodayDto'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMovementsIn: {
    parameters: {
      query: {
        /** @description Returns movements for inactive prisoners */
        allMovements?: boolean
        /** @description fromDateTime */
        fromDateTime: string
        /** @description toDateTime */
        toDateTime?: string
      }
      header?: {
        /** @description Requested offset of first record in returned collection of prisoner records. */
        'Page-Offset'?: number
        /** @description Requested limit to number of records returned. */
        'Page-Limit'?: number
      }
      path: {
        /** @description The prison id */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderIn'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMovementsIn_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prison id */
        agencyId: string
        /** @description date */
        isoDate: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderIn'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getEnRouteOffenderMovements: {
    parameters: {
      query?: {
        /** @description Optional filter on date of movement */
        movementDate?: string
      }
      header?: never
      path: {
        /** @description The prison id */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderMovement'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getUpcomingCourtAppearances: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtEventBasic'][]
        }
      }
    }
  }
  getTransfers: {
    parameters: {
      query: {
        /** @description One or more agencyId values eg.agencyId=LEI&agencyId=MDI */
        agencyId: string[]
        /** @description From date and time ISO 8601 format without timezone e.g. YYYY-MM-DDTHH:MM:SS */
        fromDateTime: string
        /** @description To date and time in ISO 8601 format without timezone e.g. YYYY-MM-DDTHH:MM:SS */
        toDateTime: string
        /** @description Set to true to include planned court events */
        courtEvents?: boolean
        /** @description Set to true to include planned release events */
        releaseEvents?: boolean
        /** @description Set to true to include planned transfer/appointment events */
        transferEvents?: boolean
        /** @description Set to true to include confirmed movements */
        movements?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TransferSummary']
        }
      }
      /** @description Invalid agency identifiers, or from time after the to time, or a time period greater than 24 hours specified, or parameter format not correct. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getRollCountMovements: {
    parameters: {
      query?: {
        /** @description The date for which movements are counted, default today. */
        movementDate?: string
      }
      header?: never
      path: {
        /** @description The prison id */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MovementCount']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffendersInReception: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prison id */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderInReception'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getEnRouteOffenderMovementCount: {
    parameters: {
      query?: {
        /** @description Optional filter on date of movement. Defaults to today */
        movementDate?: string
      }
      header?: never
      path: {
        /** @description The prison id */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestArrivalDate_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender number */
        offenderNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  getMovementsByOffender: {
    parameters: {
      query?: {
        /** @description movement type codes to filter by */
        movementTypes?: string[]
        /** @description Returns all movements for this offender list from all bookings if true */
        allBookings?: boolean
        /** @description Filters movements that happened since this date */
        movementsAfter?: string
      }
      header?: never
      path: {
        /** @description The required offender id (mandatory) */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Movement'][]
        }
      }
    }
  }
  getOffendersCurrentlyOut: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The identifier of a living unit, otherwise known as an internal location. */
        livingUnitId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderOut'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMovementsByBooking: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BookingMovement'][]
        }
      }
    }
  }
  getTemporaryAbsences: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prison id */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OutOnTemporaryAbsenceSummary'][]
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffendersCurrentlyOut_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prison id */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderOut'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocation: {
    parameters: {
      query?: {
        /** @description Match a location that is inactive? */
        includeInactive?: 'true' | 'false'
      }
      header?: never
      path: {
        /** @description The location id of location */
        locationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffendersAtLocation: {
    parameters: {
      query?: never
      header?: {
        /** @description Requested offset of first record in returned collection of inmate records. */
        'Page-Offset'?: number
        /** @description Requested limit to number of inmate records returned. */
        'Page-Limit'?: number
        /** @description Comma separated list of one or more of the following fields - <b>bookingNo, bookingId, offenderNo, firstName, lastName, agencyId, or assignedLivingUnitId</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path: {
        /** @description The location id of location */
        locationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderBooking'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffendersAtLocationDescription: {
    parameters: {
      query?: {
        /** @description offender name or id to match */
        keywords?: string
        /**
         * @description Offenders with a DOB >= this date
         * @example 1970-01-02
         */
        fromDob?: string
        /**
         * @description Offenders with a DOB <= this date
         * @example 1975-01-02
         */
        toDob?: string
        /** @description alert flags to filter by */
        alerts?: string[]
        /** @description return Alert data */
        returnAlerts?: boolean
        /** @description retrieve category classification from assessments */
        returnCategory?: boolean
        /** @description retrieve inmates with a specific convicted status (Convicted, Remand, default: All) */
        convictedStatus?: string
      }
      header?: {
        /** @description Requested offset of first record in returned collection of inmate records. */
        'Page-Offset'?: number
        /** @description Requested limit to number of inmate records returned. */
        'Page-Limit'?: number
        /** @description Comma separated list of one or more of the following fields - <b>bookingNo, bookingId, offenderNo, firstName, lastName, agencyId, or assignedLivingUnitId</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path: {
        locationPrefix: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderBooking'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationByCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @example MDI-1 */
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAvailableKeyworkers: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The agency (prison) identifier. */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Keyworker'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllocationHistory: {
    parameters: {
      query?: never
      header?: {
        /** @description Requested offset of first record in returned collection of allocationHistory records. */
        'Page-Offset'?: number
        /** @description Requested limit to number of allocationHistory records returned. */
        'Page-Limit'?: number
      }
      path: {
        /** @description The agency (prison) identifier. */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderKeyWorker'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIncident: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Incident Id */
        incidentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncidentCase']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getQuestionnaires: {
    parameters: {
      query?: {
        /** @description Return configuration for incident type only */
        'incident-type'?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns incident type configuration */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncidentTypeConfiguration'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Missing privileges to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getImprisonmentStatusHistory: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The required offender id (mandatory) */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The imprisonment status history. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ImprisonmentStatusHistoryDto']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getImage_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The image id of offender */
        imageId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ImageDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getImageData: {
    parameters: {
      query?: {
        /** @description Return full size image */
        fullSizeImage?: boolean
      }
      header?: never
      path: {
        /** @description The image id of offender */
        imageId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'image/jpeg': string
          'application/json': string
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'image/jpeg': string
          'application/json': string
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'image/jpeg': string
          'application/json': string
        }
      }
    }
  }
  getNonAssociationGangsForPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prisoner number
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GangMemberSummary']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerEducations: {
    parameters: {
      query?: {
        /** @description The page number of the paged results */
        page?: number
        /** @description Requested limit to number of results returned. */
        size?: number
      }
      header?: never
      path: {
        /** @description The offender NOMS number. NOMS numbers have the format:<b>G0364GX</b> */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageEducation']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNextCourtEvent: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The bookingId to check court events against */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtEventDetails']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCountOfActiveCourtCases: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The bookingId to check court cases against */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtDateResults: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The required offender id (mandatory) */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The court date results. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtDateResult']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtDateChargesAndOutcomes: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The required offender id (mandatory) */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The court date results. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtDateChargeAndOutcomes']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBedAssignmentsHistory: {
    parameters: {
      query: {
        /**
         * @description From date
         * @example 2020-03-24T10:10:10
         */
        fromDate: string
        /**
         * @description To date
         * @example 2020-12-01T11:11:11
         */
        toDate: string
      }
      header?: never
      path: {
        /** @description The location id. */
        locationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BedAssignment'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCellAttributes: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The location id. */
        locationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderCell']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBedAssignmentsHistoryByDateForAgency: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Agency Id
         * @example MDI
         */
        agencyId: string
        /**
         * @description Assignment date (2020-03-24)
         * @example 2020-03-24
         */
        assignmentDate: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BedAssignment'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderBooking: {
    parameters: {
      query?: {
        /** @description If set to true then only basic data is returned */
        basicInfo?: boolean
        /** @description Only used when requesting more than basic data, returns identifiers,offences,aliases,sentence dates,convicted status */
        extraInfo?: boolean
      }
      header?: never
      path: {
        /** @description The booking id of offender */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBookingVisitsSummary: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitSummary']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBookingVisitsPrisons: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Ok */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonDetails'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBookingVisitsNext: {
    parameters: {
      query?: {
        /** @description Toggle to return Visitors in response (or not). */
        withVisitors?: boolean
      }
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Invalid request. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBookingVisitsWithVisitor: {
    parameters: {
      query?: {
        /** @description Returned visits must be scheduled on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** @description Returned visits must be scheduled on or before this date (in YYYY-MM-DD format). */
        toDate?: string
        /** @description Type of visit */
        visitType?: 'SCON' | 'OFFI'
        /** @example SCH */
        'Status of visit. code from VIS_COMPLETE domain, e.g: CANC (Cancelled) or SCH (Scheduled)'?: string
        /** @example NSHOW */
        'Reason for cancellation. code from MOVE_CANC_RS domain, e.g: VISCANC (Visitor Cancelled) or NO_VO (No Visiting Order)'?: string
        /**
         * @description The prison id
         * @example MDI
         */
        prisonId?: string
        /** @description Target page number, zero being the first page */
        page?: number
        /** @description The number of results per page */
        size?: number
      }
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageVisitWithVisitors']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBookingSentenceDetail: {
    parameters: {
      query?: never
      header?: {
        /** @description Version of Sentence Calc Dates, 1.0 is default */
        version?: string
      }
      path: {
        /** @description The booking id of offender */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceCalcDates']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBookingSentenceAdjustments: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The booking id of offender */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceAdjustmentDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSecondaryLanguages: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description bookingId */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SecondaryLanguage'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReasonableAdjustments: {
    parameters: {
      query: {
        /**
         * @description a list of treatment codes to search.
         * @example PEEP
         */
        type: string[]
      }
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReasonableAdjustments']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllReasonableAdjustments: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReasonableAdjustments']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderPropertyContainers: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PropertyContainer'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllPersonalCareNeeds: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonalCareNeeds']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMilitaryRecords_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MilitaryRecords']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMainOffence_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenceDetail'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMainBookingImageData: {
    parameters: {
      query?: {
        /** @description Return full size image */
        fullSizeImage?: boolean
      }
      header?: never
      path: {
        /** @description The booking id of offender */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'image/jpeg': string
          'application/json': string
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'image/jpeg': string
          'application/json': string
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'image/jpeg': string
          'application/json': string
        }
      }
    }
  }
  getOffenderIdentifiers: {
    parameters: {
      query?: {
        /**
         * @description Filter By Type
         * @example PNC
         */
        type?: string
      }
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderIdentifier'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getFixedTermRecallDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offenders bookingID */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FixedTermRecallDetails']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No Fixed Term Recall exists for this booking */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getEvents_1: {
    parameters: {
      query?: {
        /** @description Returned events must be scheduled on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** @description Returned events must be scheduled on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getEventsToday: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getEventsThisWeek: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getEventsNextWeek: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtHearings: {
    parameters: {
      query?: {
        /** @description Return court hearings on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** @description Return court hearings on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
      header?: never
      path: {
        /** @description The offender booking linked to the court hearings. */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtHearings']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtCases: {
    parameters: {
      query?: {
        /** @description Only return active court cases */
        activeOnly?: boolean
      }
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtCase'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getContacts: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBedAssignmentsHistory_1: {
    parameters: {
      query?: {
        /** @description The page number to return. Index starts at 0 */
        page?: number
        /** @description The number of results per page. Defaults to 20. */
        size?: number
      }
      header?: never
      path: {
        /** @description The offender booking linked to the court hearings. */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageBedAssignment']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCaseNoteCount: {
    parameters: {
      query?: {
        /** @description Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered. */
        fromDate?: string
        /** @description Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered. */
        toDate?: string
      }
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
        /** @description Case note type. */
        type: string
        /** @description Case note sub-type. */
        subType: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseNoteCount']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBalances: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Account']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAssessments_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Assessment'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderAliases: {
    parameters: {
      query?: never
      header?: {
        /** @description Requested offset of first record in returned collection of alias records. */
        'Page-Offset'?: number
        /** @description Requested limit to number of alias records returned. */
        'Page-Limit'?: number
        /** @description Comma separated list of one or more of the following fields - <b>firstName, lastName, age, dob, middleName, nameType, createDate</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path: {
        /** @description The booking id of offender */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Alias'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBookingActivities: {
    parameters: {
      query?: {
        /** @description Returned activities must be scheduled on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** @description Returned activities must be scheduled on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
      header?: {
        /** @description Requested offset of first record in returned collection of activity records. */
        'Page-Offset'?: number
        /** @description Requested limit to number of activity records returned. */
        'Page-Limit'?: number
        /** @description Comma separated list of one or more of the following fields - <b>eventDate, startTime, endTime, eventLocation</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path: {
        /** @description The offender booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerBookingsV2: {
    parameters: {
      query?: {
        /**
         * @description Filter by prison Id
         * @example MDI
         */
        prisonId?: string
        /** @description Filter by a list of booking ids */
        bookingId?: number[]
        /** @description Filter by a list of offender numbers */
        offenderNo?: string[]
        /** @description Return additional legal information (imprisonmentStatus, legalStatus, convictedStatus) */
        legalInfo?: boolean
        /** @description Return facial ID for latest prisoner image */
        image?: boolean
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePrisonerBookingSummary']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderBookingByOffenderNo: {
    parameters: {
      query?: {
        /** @description If set to true then full data is returned */
        fullInfo?: boolean
        /** @description Only used when fullInfo=true, returns identifiers,offences,aliases,sentence dates,convicted status */
        extraInfo?: boolean
        /** @description Only used when fullInfo=true, returns the applicable CSRA classification for this offender */
        csraSummary?: boolean
      }
      header?: never
      path: {
        /** @description The offenderNo of offender */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBookingVisitBalances: {
    parameters: {
      query?: {
        /** @description Allow no content (204) response if no data rather than returning a not found (404) */
        allowNoContent?: boolean
      }
      header?: never
      path: {
        /** @description The offenderNo of offender */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitBalances']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenceHistory: {
    parameters: {
      query?: {
        /** @description include offences with convictions only */
        convictionsOnly?: boolean
      }
      header?: never
      path: {
        /** @description The offender number */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenceHistoryDetail'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getKeyworkerByOffenderNo: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offenderNo of offender */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Keyworker']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMainBookingImageDataByNo: {
    parameters: {
      query?: {
        /** @description Return full size image */
        fullSizeImage?: boolean
      }
      header?: never
      path: {
        /** @description The offender No of offender */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'image/jpeg': string
          'application/json': string
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'image/jpeg': string
          'application/json': string
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'image/jpeg': string
          'application/json': string
        }
      }
    }
  }
  getAppointment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The unique identifier for the appointment */
        appointmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The appointment has been returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEvent']
        }
      }
      /** @description The client is not authorised for this operation */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEvent']
        }
      }
      /** @description The appointment was not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledEvent']
        }
      }
    }
  }
  deleteAppointment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The unique identifier for the appointment */
        appointmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The appointment has been deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The client is not authorised for this operation */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The appointment was not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Record in use for this booking id (possibly in P-Nomis) */
      423: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getServiceAgencies: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The code of the service from the EXTERNAL_SERVICES table */
        serviceCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AgencyDetails'][]
        }
      }
      /** @description A valid auth token was not presented */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The auth token does not have the necessary role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The service code does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAgencyActiveReceptionsWithCapacity: {
    parameters: {
      query?: {
        /** @description Restricts list of receptions returned to those that have a specified attribute. */
        attribute?: string
      }
      header?: never
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderCell'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAgencyPayProfile: {
    parameters: {
      query?: never
      header?: never
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AgencyPrisonerPayProfile']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAgencyLocations: {
    parameters: {
      query?: {
        /** @description Restricts list of locations returned to those that can be used for the specified event type. */
        eventType?: string
      }
      header?: {
        /** @description Comma separated list of one or more of the following fields - <b>description, userDescription</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAvailableLocationGroups: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prison */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LocationGroup'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAgencyEventLocations: {
    parameters: {
      query?: never
      header?: {
        /** @description Comma separated list of one or more of the following fields - <b>description, userDescription</b> */
        'Sort-Fields'?: string
        /** @description Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAgencyEventLocationsBooked: {
    parameters: {
      query: {
        /** @description Filter list to only return locations which prisoners will be attending on this day */
        bookedOnDay: string
        /** @description Only return locations which prisoners will be attending in this time slot (AM, PM or ED, and bookedOnDay must be specified) */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LocationSummary'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAgencyEstablishmentTypes: {
    parameters: {
      query?: never
      header?: never
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AgencyEstablishmentTypes']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAgenciesByType: {
    parameters: {
      query?: {
        /** @description Only return active agencies */
        activeOnly?: boolean
        /**
         * @deprecated
         * @description Only return agencies that match the supplied Jurisdiction Code(s), NOTE: Deprecated, please use courtType param
         * @example MC
         */
        jurisdictionCode?: string[]
        /**
         * @description Only return courts that match the supplied court types(s)
         * @example MC
         */
        courtType?: string[]
        /**
         * @description Only agencies that match the area code
         * @example LONDON
         */
        areaCode?: string
        /**
         * @description Only agencies that match the region code
         * @example LON
         */
        regionCode?: string
        /**
         * @description Only agencies that match the establishment type
         * @example CNOMIS
         */
        establishmentType?: string
        /** @description Returns Address Information */
        withAddresses?: boolean
        /** @description Don't format the location */
        skipFormatLocation?: boolean
        /** @description Returns area and region information */
        withAreas?: boolean
      }
      header?: never
      path: {
        /** @description Agency Type */
        type: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Agency'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisons: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Prison'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonContactDetailList: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonContactDetail'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonContactDetail: {
    parameters: {
      query?: never
      header?: never
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonContactDetail']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAgenciesByCaseload: {
    parameters: {
      query?: never
      header?: never
      path: {
        caseload: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Agency'][]
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBookingAndSentenceAdjustments: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The booking id of the offender */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteSecondaryLanguage: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender number */
        offenderNo: string
        /** @description The code for the secondary language to delete */
        languageCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description A core person secondary language has been deleted. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  cancelCourtHearing: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The offender booking to linked to the scheduled event. */
        bookingId: number
        /** @description The identifier of the scheduled event to be cancelled. */
        hearingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unrecoverable error occurred whilst processing request. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
