/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/users/me/activeCaseLoad': {
    /** Update working caseload for current user. */
    put: operations['updateMyActiveCaseLoad']
  }
  '/api/users/add/default/{caseload}': {
    /** Add the NWEB caseload to specified caseload. */
    put: operations['addApiAccessForCaseload']
  }
  '/api/smoketest/offenders/{offenderNo}/release': {
    put: operations['releasePrisoner']
  }
  '/api/smoketest/offenders/{offenderNo}/recall': {
    put: operations['recallPrisoner']
  }
  '/api/reference-domains/domains/{domain}/codes/{code}': {
    /** Reference code detail for reference domain and code (with sub-codes).<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getReferenceCodeByDomainAndCode']
    put: operations['updateReferenceCode']
    post: operations['createReferenceCode']
  }
  '/api/offenders/{offenderNo}/transfer-out': {
    put: operations['transferOutPrisoner']
  }
  '/api/offenders/{offenderNo}/transfer-in': {
    put: operations['transferInPrisoner']
  }
  '/api/offenders/{offenderNo}/temporary-absence-out': {
    put: operations['transferOutPrisonerToTemporaryAbsence']
  }
  '/api/offenders/{offenderNo}/temporary-absence-arrival': {
    put: operations['temporaryAbsenceArrival']
  }
  '/api/offenders/{offenderNo}/release': {
    put: operations['releasePrisoner_1']
  }
  '/api/offenders/{offenderNo}/recall': {
    put: operations['recallPrisoner_1']
  }
  '/api/offenders/{offenderNo}/discharge-to-hospital': {
    put: operations['dischargePrisonerToHospital']
  }
  '/api/offenders/{offenderNo}/court-transfer-out': {
    put: operations['transferOutPrisonerToCourt']
  }
  '/api/offenders/{offenderNo}/court-transfer-in': {
    put: operations['courtTransferIn']
  }
  '/api/offender-sentences/booking/{bookingId}/home-detention-curfews/latest/checks-passed': {
    put: operations['setCurfewChecks']
    delete: operations['clearCurfewChecks']
  }
  '/api/offender-sentences/booking/{bookingId}/home-detention-curfews/latest/approval-status': {
    put: operations['setApprovalStatus']
    delete: operations['clearApprovalStatus']
  }
  '/api/offender-assessments/category/{bookingId}/nextReviewDate/{nextReviewDate}': {
    /** Update categorisation record with new next review date. */
    put: operations['updateCategorisationNextReviewDate']
  }
  '/api/offender-assessments/category/{bookingId}/inactive': {
    /** This endpoint should only be used with edge case categorisations. */
    put: operations['setCategorisationInactive']
  }
  '/api/offender-assessments/category/reject': {
    /** Update categorisation record with rejection. */
    put: operations['rejectCategorisation']
  }
  '/api/offender-assessments/category/categorise': {
    /** This is intended for use by the categoriser to correct any problems with a pending (in-progress) categorisation. Fields left as null will be left unchanged */
    put: operations['updateCategorisation']
    /** Create new categorisation record. The booking id and new sequence number is returned. */
    post: operations['createCategorisation']
  }
  '/api/offender-assessments/category/approve': {
    /** Update categorisation record with approval. */
    put: operations['approveCategorisation']
  }
  '/api/offences/offence': {
    /** Requires OFFENCE_MAINTAINER role */
    put: operations['updateOffences']
    /** Requires OFFENCE_MAINTAINER role */
    post: operations['createOffences']
  }
  '/api/bookings/{bookingId}/prison-to-prison/{eventId}/cancel': {
    /** Cancels a scheduled prison to prison move for an offender. */
    put: operations['cancelPrisonToPrisonMove']
  }
  '/api/bookings/{bookingId}/move-to-cell-swap': {
    put: operations['moveToCellSwap']
  }
  '/api/bookings/{bookingId}/living-unit/{internalLocationDescription}': {
    put: operations['moveToCell']
  }
  '/api/bookings/{bookingId}/court-hearings/{hearingId}/hearing-date': {
    /** Amends the scheduled court hearing date and/or time for an offender. */
    put: operations['courtHearingDateAmendment']
  }
  '/api/bookings/{bookingId}/alert/{alertSeq}': {
    put: operations['updateAlert']
  }
  '/api/bookings/{bookingId}/activities/{activityId}/attendance': {
    /** Update offender attendance and pay. */
    put: operations['updateAttendance']
  }
  '/api/bookings/offenderNo/{offenderNo}/activities/{activityId}/attendance': {
    put: operations['updateAttendance_1']
  }
  '/api/bookings/activities/attendance': {
    /** Update offender attendance and pay. */
    put: operations['updateAttendanceForMultipleBookingIds']
  }
  '/api/appointments/{appointmentId}/comment': {
    put: operations['updateAppointmentComment']
  }
  '/api/agencies/{agencyId}': {
    /** Agency detail. */
    get: operations['getAgency']
    /** Requires MAINTAIN_REF_DATA */
    put: operations['updateAgency']
  }
  '/api/agencies/{agencyId}/addresses/{addressId}': {
    /** Requires MAINTAIN_REF_DATA */
    put: operations['updateAgencyAddress']
    /** Requires MAINTAIN_REF_DATA */
    delete: operations['deleteAgencyAddress']
  }
  '/api/agencies/{agencyId}/addresses/{addressId}/phones/{phoneId}': {
    /** Requires MAINTAIN_REF_DATA */
    put: operations['updateAgencyAddressPhoneContact']
    /** Requires MAINTAIN_REF_DATA */
    delete: operations['deleteAgencyAddressPhoneContact']
  }
  '/api/v1/prison/{prison_id}/offenders/{noms_id}/transactions': {
    /** The valid prison_id and type combinations are defined in the Nomis transaction_operations table which is maintained by the Maintain Transaction Operations screen (OCMTROPS), from the Financials Maintenance menu. Only those prisons (Caseloads) and Transaction types associated with the NOMISAPI module are valid.<br/>This will be setup by script intially as part of the deployment process as shown below<br/><br/><table><tr><th>Transaction Type</th><th>Description</th><th>Digital Prison</th><th>Non Digital Prison</th></tr><tr><td>CANT</td><td>Canteen Spend</td><td>Yes</td><td>No</td></tr><tr><td>REFND</td><td>Canteen Refund</td><td>Yes</td><td>No</td></tr><tr><td>PHONE</td><td>Phone Credit</td><td>Yes</td><td>No</td></tr><tr><td>MRPR</td><td>Misc Receipt - Private Cash</td><td>Yes</td><td>Yes</td></tr><tr><td>MTDS</td><td>Money through digital service</td><td>Yes</td><td>Yes</td></tr><tr><td>DTDS</td><td>Disbursement through Digital service</td><td>Yes</td><td>Yes</td></tr><tr><td>CASHD</td><td>Cash Disbursement</td><td>Yes</td><td>Yes</td></tr><tr><td>RELA</td><td>Money to Relatives</td><td>Yes</td><td>Yes</td></tr><tr><td>RELS</td><td>Money to Relatives- Spends</td><td>Yes</td><td>Yes</td></tr></table>Notes:<br/><ul><li>The sub_account the amount is debited or credited from will be determined by the transaction_type definition in NOMIS.</li><li>If the field X-Client-Name is present in the request header then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway.</li><li>The client_unique_ref can have a maximum of 64 characters, only alphabetic, numeric, ‘-’ and ‘_’ characters are allowed</li></ul> */
    post: operations['createTransaction']
  }
  '/api/v1/prison/{prison_id}/offenders/{noms_id}/payment': {
    /**
     * Pay events will be stored in a table on receipt by Nomis to be processed by a batch job scheduled to run after the last Nomis payroll batch job but before the advances and scheduled payments batch jobs.
     * <br/>Possible payment types are:<br/><table><tr><td>A_EARN</td><td>Credit, Offender Payroll</td></tr><tr><td>ADJ</td><td>Debit, Adjudication Award</td></tr></table><br/>Example request:<br/>{
     *   "type": "A_EARN",
     *   "description": "May earnings",
     *   "amount": 1,
     *   "client_transaction_id": "PAY-05-19"
     * }<br/>The valid prison_id and type combinations are defined in the Nomis transaction_operations table which is maintained by the Maintain Transaction Operations screen (OCMTROPS), from the Financials Maintenance menu.
     * Only those prisons (Caseloads) and Transaction types associated with the NOMISAPI module are valid.<br/>This will be setup by script intially as part of the deployment process as shown below<br/><br/>
     */
    post: operations['storePayment']
  }
  '/api/v1/prison/{previous_prison_id}/offenders/{noms_id}/transfer_transactions': {
    /** <p>Post a financial transaction to Nomis to a prison that the offender is no longer at.</p><p>The valid prison_id and type combinations are defined in the Nomis transaction_operations table which is maintained by the Maintain Transaction Operations screen (OCMTROPS), from the Financials Maintenance menu. Only those prisons (Caseloads) and Transaction types associated with the NOMISAPI module are valid. Only Transaction types with a usage of R (Receipt) are valid.Transaction Types are maintained via the Maintain Transaction Types screen (OCMTRANS).</p><p>Transaction is posted to the specified prison.  if the account has been closed at this prison then it is re-opened first.</p><p>If the offender has been transferred to another prison then the funds are transferred to this prison.</p><p>If the account was previously closed then it will be closed again.</p><p>If the offender has been released then the funds are transferred to NACRO. Based on the Nomis Clear Inactive accounts screen (OTDCLINA).</p> */
    post: operations['transferTransaction']
  }
  '/api/users/list': {
    /** user details for supplied usernames */
    post: operations['getUserDetailsList']
  }
  '/api/smoketest/offenders/{offenderNo}/imprisonment-status': {
    post: operations['imprisonmentDataSetup']
  }
  '/api/schedules/{agencyId}/visits': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getVisits']
  }
  '/api/schedules/{agencyId}/externalTransfers': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getExternalTransfers']
  }
  '/api/schedules/{agencyId}/events-by-location-ids': {
    /** Get all events for given date for prisoners in listed cells. Note secondary sort is by start time<p>This endpoint uses the REPLICA database.</p> */
    post: operations['getEventsByLocationId']
  }
  '/api/schedules/{agencyId}/courtEvents': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getCourtEvents']
  }
  '/api/schedules/{agencyId}/count-activities': {
    /** Get count of suspended prisoner activities for given date range<p>This endpoint uses the REPLICA database.</p> */
    post: operations['getCountActivitiesByDateRange']
  }
  '/api/schedules/{agencyId}/appointments': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    get: operations['getAppointments']
    /** <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getAppointmentsForOffenders']
  }
  '/api/schedules/{agencyId}/activities': {
    /** Get all Prisoner activities for given date<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getActivitiesAtAllLocations']
    /** <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getActivitiesForBookings']
  }
  '/api/schedules/{agencyId}/activities-by-event-ids': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getActivitiesByEventIds']
  }
  '/api/prisoners': {
    /** List of offenders matching specified criteria.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getPrisoners_1']
    /** List of offenders matching specified criteria.<p>This endpoint uses the REPLICA database.</p> */
    post: operations['getPrisoners']
  }
  '/api/offenders': {
    post: operations['createPrisoner']
  }
  '/api/offenders/{offenderNo}/booking': {
    post: operations['newBooking']
  }
  '/api/offender-sentences': {
    /**
     * <h3>Algorithm</h3>
     * <ul>
     *   <li>If there is a confirmed release date, the offender release date is the confirmed release date.</li>
     *   <li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li>
     *   <li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li>
     * </ul>
     * <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getOffenderSentences']
    /** Retrieves list of offenders (with associated sentence detail) - POST version to allow large offender lists.<p>This endpoint uses the REPLICA database.</p> */
    post: operations['postOffenderSentences']
  }
  '/api/offender-sentences/home-detention-curfews/latest': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getBatchLatestHomeDetentionCurfew']
  }
  '/api/offender-sentences/bookings': {
    /** Retrieves list of offenders (with associated sentence detail) - POST version using booking id lists.<p>This endpoint uses the REPLICA database.</p> */
    post: operations['postOffenderSentencesBookings']
  }
  '/api/offender-dates/{bookingId}': {
    /** Requires RELEASE_DATES_CALCULATOR */
    get: operations['getOffenderKeyDates']
    /** Requires RELEASE_DATES_CALCULATOR */
    post: operations['updateOffenderKeyDates']
  }
  '/api/offender-assessments/{assessmentCode}': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffenderAssessmentsAssessmentCode']
    /** <p>This endpoint uses the REPLICA database.</p> */
    post: operations['postOffenderAssessmentsAssessmentCode']
  }
  '/api/offender-assessments/csra/rating': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    post: operations['postOffenderAssessmentsCsraRatings']
  }
  '/api/offender-assessments/csra/list': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    post: operations['postOffenderAssessmentsCsraList']
  }
  '/api/offender-assessments/category': {
    /** Categorisation details for all supplied Offenders using SYSTEM access<p>This endpoint uses the REPLICA database.</p> */
    post: operations['getOffenderCategorisationsSystem']
  }
  '/api/offender-assessments/category/{agencyId}': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffenderCategorisations_1']
    /** Categorisation details for supplied Offenders where agencyId is their create agency and is in the caseload<p>This endpoint uses the REPLICA database.</p> */
    post: operations['getOffenderCategorisations']
  }
  '/api/offences/unlink-from-schedule': {
    /** Requires UPDATE_OFFENCE_SCHEDULES role */
    post: operations['unlinkOffencesFromSchedules']
  }
  '/api/offences/statute': {
    get: operations['getOffencesByStatute']
    /** Requires OFFENCE_MAINTAINER role */
    post: operations['createStatute']
  }
  '/api/offences/link-to-schedule': {
    /** Requires UPDATE_OFFENCE_SCHEDULES role */
    post: operations['linkOffencesToSchedules']
  }
  '/api/offences/ho-code': {
    get: operations['getOffencesByHoCode']
    /** Requires OFFENCE_MAINTAINER role */
    post: operations['createHomeOfficeCodes']
  }
  '/api/movements': {
    /** Returns a list of recently released or moved offender nos and the associated timestamp. */
    get: operations['getRecentMovementsByDate']
    post: operations['createExternalMovement']
  }
  '/api/movements/offenders': {
    post: operations['getMovementsByOffenders']
  }
  '/api/key-worker/{agencyId}/current-allocations': {
    /** Retrieves Specified key worker's currently assigned offenders - POST version to allow larger staff lists. */
    post: operations['postKeyWorkerAgencyIdCurrentAllocations']
  }
  '/api/key-worker/{agencyId}/current-allocations/offenders': {
    /** Retrieves Specified key worker's currently assigned offenders - POST version to allow larger staff lists. */
    post: operations['postKeyWorkerAgencyIdCurrentAllocationsOffenders']
  }
  '/api/key-worker/staff/allocationHistory': {
    /** Retrieves Specified key worker's currently allocation history - POST version to allow larger staff lists. */
    post: operations['postKeyWorkerStaffAllocationHistory']
  }
  '/api/key-worker/offenders/allocationHistory': {
    /** Retrieves Specified prisoners allocation history - POST version to allow larger allocation lists.<p>This endpoint uses the REPLICA database.</p> */
    post: operations['postKeyWorkerOffendersAllocationHistory']
  }
  '/api/images/offenders/{offenderNo}': {
    get: operations['getImagesByOffender']
    /** Requires ROLE_IMAGE_UPLOAD. */
    post: operations['putImageMultiPart']
  }
  '/api/finance/prison/{prisonId}/offenders/{offenderNo}/transfer-to-savings': {
    /** Notes:<br/><ul><li>If the field X-Client-Name is present in the request header then the value is prepended to the client_unique_ref separated by a dash</li><li>The client_unique_ref can have a maximum of 64 characters, only alphabetic, numeric, ‘-’ and ‘_’ characters are allowed</li></ul> */
    post: operations['transferToSavings']
  }
  '/api/digital-warrant/booking/{bookingId}/sentence': {
    post: operations['createSentence']
  }
  '/api/digital-warrant/booking/{bookingId}/court-case': {
    post: operations['createCourtCase']
  }
  '/api/digital-warrant/booking/{bookingId}/charge': {
    post: operations['createCharge']
  }
  '/api/digital-warrant/booking/{bookingId}/adjustment': {
    post: operations['createAdjustment']
  }
  '/api/case-notes/usage': {
    /** Count of case notes<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getCaseNoteUsageSummary']
    /** Retrieves list of case notes grouped by type and offender<p>This endpoint uses the REPLICA database.</p> */
    post: operations['getCaseNoteUsageSummaryByPost']
  }
  '/api/case-notes/staff-usage': {
    /** Count of case notes<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getCaseNoteStaffUsageSummary']
    /** Retrieves list of case notes grouped by type/sub-type and staff<p>This endpoint uses the REPLICA database.</p> */
    post: operations['getCaseNoteStaffUsageSummaryByPost']
  }
  '/api/bookings/{bookingId}/relationships': {
    /** The contact details and their relationship to the offender */
    get: operations['getRelationships']
    /** Create a relationship with an offender */
    post: operations['createRelationship']
  }
  '/api/bookings/{bookingId}/prison-to-prison': {
    /** Schedules a future prison to prison move for an offender. */
    post: operations['prisonToPrison']
  }
  '/api/bookings/{bookingId}/prison-to-court-hearings': {
    /** Schedules a prison to court hearing for an offender. */
    post: operations['prisonToCourt']
  }
  '/api/bookings/{bookingId}/personal-care-needs': {
    /** Personal Care Need */
    get: operations['getPersonalCareNeeds_1']
    /** Personal Care Need */
    post: operations['addPersonalCareNeed']
  }
  '/api/bookings/{bookingId}/court-cases/{courtCaseId}/prison-to-court-hearings': {
    /** Schedules a prison to court hearing for an offender and given court case. */
    post: operations['prisonToCourt_1']
  }
  '/api/bookings/{bookingId}/appointments': {
    /** All scheduled appointments for offender. */
    get: operations['getBookingsBookingIdAppointments']
    /** Create appointment for offender. */
    post: operations['postBookingsBookingIdAppointments']
  }
  '/api/bookings/{bookingId}/alert': {
    post: operations['postAlert']
  }
  '/api/bookings/proven-adjudications': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getProvenAdjudicationSummaryForBookings']
  }
  '/api/bookings/offenders': {
    /** Offender detail for offenders<p>This endpoint uses the REPLICA database.</p> */
    post: operations['getBasicInmateDetailsForOffenders']
  }
  '/api/bookings/offenders/{agencyId}/list': {
    /** Basic offender details by booking ids<p>This endpoint uses the REPLICA database.</p> */
    post: operations['getBasicInmateDetailsByBookingIds']
  }
  '/api/bookings/offenderNo/{offenderNo}/relationships': {
    /** The contact details and their relationship to the offender */
    get: operations['getRelationshipsByOffenderNo']
    /** Create a relationship with an offender */
    post: operations['createRelationshipByOffenderNo']
  }
  '/api/bookings/offenderNo/{agencyId}/alerts': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getAlertsByOffenderNosAtAgency']
  }
  '/api/bookings/offenderNo/personal-care-needs': {
    /** Personal Care Needs */
    post: operations['getPersonalCareNeeds']
  }
  '/api/bookings/offenderNo/personal-care-needs/count': {
    /** Personal Care Needs */
    post: operations['countPersonalCareNeeds']
  }
  '/api/bookings/offenderNo/alerts': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    post: operations['getAlertsByOffenderNos']
  }
  '/api/bookings/mainOffence': {
    /** Post version to allow specifying a large number of bookingIds.<p>This endpoint uses the REPLICA database.</p> */
    post: operations['getMainOffence']
  }
  '/api/appointments': {
    /** Create multiple appointments */
    post: operations['createAppointments']
  }
  '/api/appointments/delete': {
    /** Delete multiple appointments. */
    post: operations['deleteAppointments']
  }
  '/api/agencies': {
    /** List of active agencies. */
    get: operations['getAgencies']
    /** Requires MAINTAIN_REF_DATA */
    post: operations['createAgency']
  }
  '/api/agencies/{agencyId}/addresses': {
    /** Requires MAINTAIN_REF_DATA */
    post: operations['createAgencyAddress']
  }
  '/api/agencies/{agencyId}/addresses/{addressId}/phones': {
    /** Requires MAINTAIN_REF_DATA */
    post: operations['createAgencyAddressPhoneContact']
  }
  '/api/v1/prison/{prison_id}/slots': {
    /** returns list slots with capacity details<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getVisitSlotsWithCapacity']
  }
  '/api/v1/prison/{prison_id}/offenders/{noms_id}/transactions/{client_unique_ref}': {
    /** All transaction amounts are represented as pence values.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getTransactionByClientUniqueRef']
  }
  '/api/v1/prison/{prison_id}/offenders/{noms_id}/holds': {
    /** Gets every hold on an offender’s account or just the hold identified by the client_unique_ref<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getHolds']
  }
  '/api/v1/prison/{prison_id}/offenders/{noms_id}/accounts': {
    /** Returns balances for the offender’s three sub accounts (spends, savings and cash) at the specified prison.<br/>All balance values are represented as pence values.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getAccountBalance']
  }
  '/api/v1/prison/{prison_id}/offenders/{noms_id}/accounts/{account_code}/transactions': {
    /** Transactions are returned in NOMIS ordee (Descending date followed by id).<br/>All transaction amounts are represented as pence values.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getAccountTransactions']
  }
  '/api/v1/prison/{prison_id}/live_roll': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    get: operations['getLiveRoll']
  }
  '/api/v1/offenders/{offender_id}/visits/unavailability': {
    /** returns list of reason if unavailable date<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getVisitUnavailability']
  }
  '/api/v1/offenders/{offender_id}/visits/contact_list': {
    /** returns list of contacts<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getVisitContactList']
  }
  '/api/v1/offenders/{offender_id}/visits/available_dates': {
    /** returns list of dates<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getVisitAvailableDates']
  }
  '/api/v1/offenders/{noms_id}': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffender']
  }
  '/api/v1/offenders/{noms_id}/pss_detail': {
    /** Returns the PSS detail information for the specified offender including personal data, warnings, sentence details and location information.<br/><ul><li>The 'type' field is always OFFENDER_DETAILS_REQUEST</li><br/><li>The field 'offender_details_request' contains a JSON block of data containing the offender data.</li></ul>The format of 'offender_details_request' is not specified here.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffenderPssDetail']
  }
  '/api/v1/offenders/{noms_id}/location': {
    /** The levels shows the type of each level of the location address as defined on the Agency Details tab in Maintain Agency Locations screen (OUMAGLOC).<br/><br/>Since the offender's location can change often and is fairly sensitive (and therefore should not automatically be exposed to all services), this information is not included in the general offender information call.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getLatestBookingLocation']
  }
  '/api/v1/offenders/{noms_id}/image': {
    /** Returns a 480wx600h JPEG photograph of the offender. The data is base64 encoded within the image key.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffenderImage']
  }
  '/api/v1/offenders/{noms_id}/charges': {
    /** Returns all the bookings, the legal cases for each booking and charges within each legal case.<br/>The ordering is as follows:<ul><li><strong>bookings</strong>: Current or latest booking first, others in descending order of booking date</li><li><strong>legal_cases</strong>: Active cases followed by inactive cases, further ordered by begin_date, latest first</li><li><strong>charges</strong>: Most serious active charge first, then remaining active charges, followed by inactive charges</li></ul><p>This endpoint uses the REPLICA database.</p> */
    get: operations['getBookings']
  }
  '/api/v1/offenders/{noms_id}/alerts': {
    /** Returns all active alerts for the specified offender or those that meet the optional criteria. Active alerts are listed first, followed by inactive alerts, both sorted by ascending order of alert date.<br/><ul><li>if alert_type is specified then only alerts of that type are returned</li><li>if modified_since is specified then only those alerts created or modified on or after the specified date time. The following formats are supported: 2018-01-10, 2018-01-10 03:34, 2018-01-10 03:34:12, 2018-01-10 03:34:12.123</li><li>If include_inactive=true is specified then inactive alerts are also returned.</li></ul><p>This endpoint uses the REPLICA database.</p> */
    get: operations['getAlerts']
  }
  '/api/v1/offenders/events': {
    /** Returns all events that required to update the prisoner self service application. Currently these are:<ul><li>ALERT</li><li>DISCHARGE</li><li>IEP_CHANGED</li><li>INTERNAL_LOCATION_CHANGED</li><li>NOMS_ID_CHANGED</li><li>PERSONAL_DETAILS_CHANGED</li><li>PERSONAL_OFFICER_CHANGED</li><li>RECEPTION</li><li>SENTENCE_INFORMATION_CHANGED</li><li>BALANCE_UPDATE</li></ul><p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffenderEvents']
  }
  '/api/v1/lookup/active_offender': {
    /** offender id will be returned if offender is found<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getActiveOffender']
  }
  '/api/users/{username}': {
    /** User detail.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getUserDetails']
  }
  '/api/users/me': {
    /** Current user detail. */
    get: operations['getMyUserInformation']
  }
  '/api/users/me/roles': {
    /** List of roles for current user. */
    get: operations['getMyRoles']
  }
  '/api/users/me/locations': {
    /** List of locations accessible to current user.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getMyLocations']
  }
  '/api/users/me/caseNoteTypes': {
    /** List of all case note types (with sub-types) accessible to current user (and based on working caseload). */
    get: operations['getMyCaseNoteTypes']
  }
  '/api/users/me/caseLoads': {
    /** List of caseloads accessible to current user.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getMyCaseLoads']
  }
  '/api/staff/{staffId}': {
    /** Staff detail. */
    get: operations['getStaffDetail']
  }
  '/api/staff/{staffId}/{agencyId}/roles': {
    /** List of job roles for specified staff and agency Id */
    get: operations['getAllRolesForAgency']
  }
  '/api/staff/{staffId}/emails': {
    /** List of email addresses for a specified staff user */
    get: operations['getStaffEmailAddresses']
  }
  '/api/staff/{staffId}/caseloads': {
    /** List of caseloads for a specified staff user */
    get: operations['getStaffCaseloads']
  }
  '/api/staff/roles/{agencyId}/role/{role}': {
    /** Get staff members within agency who are currently assigned the specified role.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getStaffByAgencyRole']
  }
  '/api/schedules/{agencyId}/suspended-activities-by-date-range': {
    /** Get all Prisoner activities for given date range<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getSuspendedActivitiesAtAllLocationsByDateRange']
  }
  '/api/schedules/{agencyId}/locations/{locationId}/usage/{usage}': {
    /** Get all Prisoner events for given date at location.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getLocationEvents']
  }
  '/api/schedules/{agencyId}/activities-by-date-range': {
    /** Get all Prisoner activities for given date range<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getActivitiesAtAllLocationsByDateRange']
  }
  '/api/schedules/locations/{locationId}/activities': {
    /** Get all Prisoner activities for given date at location.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getActivitiesAtLocation']
  }
  '/api/restore-info': {
    get: operations['getLastRestoreDate']
  }
  '/api/reference-domains/scheduleReasons': {
    /** Get possible reason codes for created event.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getScheduleReasons']
  }
  '/api/reference-domains/domains': {
    /** A reference domain can be used to retrieve all codes related to that domain. Ordered by domain ascending<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getAllReferenceDomains']
  }
  '/api/reference-domains/domains/{domain}': {
    /** List of reference codes for reference domain paged. Please note this API has the incorrect name so the non-paged /domains/{domain}/codes version is preferred.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getReferenceCodesByDomain']
  }
  '/api/reference-domains/domains/{domain}/reverse-lookup': {
    /** Wild card can be specified<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getReferenceCodeByDomainAndDescription']
  }
  '/api/reference-domains/domains/{domain}/codes': {
    /** List of reference codes for reference domain ordered by code ascending. The list is an un-paged flat list<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getReferenceCodesByDomain_1']
  }
  '/api/reference-domains/caseNoteTypes': {
    /** List of all used case note types (with sub-types).<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getCaseNoteTypes']
  }
  '/api/reference-domains/caseNoteSources': {
    /** List of case note source codes.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getCaseNoteSources']
  }
  '/api/reference-domains/alertTypes': {
    /** List of alert types (with alert codes).<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getAlertTypes']
  }
  '/api/questionnaires/{category}/{code}': {
    get: operations['getQuestionnaire']
  }
  '/api/prisoners/{offenderNo}': {
    /** List of offenders globally matching the offenderNo. */
    get: operations['getPrisonersOffenderNo']
  }
  '/api/prisoners/{offenderNo}/full-status': {
    get: operations['getPrisonerInformationById']
  }
  '/api/prisoners/by-establishment/{establishmentCode}': {
    get: operations['getPrisonerDetailAtLocation']
  }
  '/api/prisoners/at-location/{establishmentCode}': {
    /** Pagination In Headers */
    get: operations['getPrisonerDetailAtLocationOld']
  }
  '/api/persons/{personId}/phones': {
    /** The phone numbers for person */
    get: operations['getPersonPhones']
  }
  '/api/persons/{personId}/identifiers': {
    /** The most recent value of each type of person identifier */
    get: operations['getPersonIdentifiers']
  }
  '/api/persons/{personId}/emails': {
    /** The emails for person */
    get: operations['getPersonEmails']
  }
  '/api/persons/{personId}/addresses': {
    /** The addresses for person */
    get: operations['getPersonAddresses']
  }
  '/api/offenders/{offenderNo}': {
    get: operations['getOffender_1']
  }
  '/api/offenders/{offenderNo}/transaction-history': {
    /** Transactions are returned in order of entryDate descending and sequence ascending).<br/>All transaction amounts are represented as pence values.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getTransactionsHistory']
  }
  '/api/offenders/{offenderNo}/sentences': {
    /** Retrieve an single offender sentence details */
    get: operations['getOffenderSentenceDetail']
  }
  '/api/offenders/{offenderNo}/scheduled-events': {
    /** All future events for offender that are in a scheduled and not cancelled state. */
    get: operations['getScheduledEvents']
  }
  '/api/offenders/{offenderNo}/prison-timeline': {
    get: operations['getOffenderPrisonPeriods']
  }
  '/api/offenders/{offenderNo}/offender-restrictions': {
    /** Get offender visit restrictions by offender No */
    get: operations['getVisitRestrictions']
  }
  '/api/offenders/{offenderNo}/non-association-details': {
    /** Get offender non-association details by offender No */
    get: operations['getNonAssociationDetails']
  }
  '/api/offenders/{offenderNo}/military-records': {
    /** Military Records */
    get: operations['getMilitaryRecords']
  }
  '/api/offenders/{offenderNo}/incidents': {
    /** Can be filtered by participation type and incident type */
    get: operations['getIncidentsByOffenderNo']
  }
  '/api/offenders/{offenderNo}/events': {
    /** All scheduled events for offender. */
    get: operations['getEvents']
  }
  '/api/offenders/{offenderNo}/damage-obligations': {
    get: operations['getOffenderDamageObligations']
  }
  '/api/offenders/{offenderNo}/contacts': {
    /** Active Contacts including restrictions, using latest offender booking  and including inactive contacts by default */
    get: operations['getOffenderContacts']
  }
  '/api/offenders/{offenderNo}/case-notes/{caseNoteId}': {
    /** Retrieve an single offender case note */
    get: operations['getOffenderCaseNote']
  }
  '/api/offenders/{offenderNo}/case-notes/v2': {
    /** Retrieve an offenders case notes for latest booking<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffenderCaseNotes']
  }
  '/api/offenders/{offenderNo}/bookings/latest/alerts': {
    /** System or cat tool access only */
    get: operations['getAlertsForLatestBookingByOffenderNo']
  }
  '/api/offenders/{offenderNo}/booking/latest/sentence-summary': {
    /** Retrieve an single offender sentence details */
    get: operations['getLatestSentenceSummary']
  }
  '/api/offenders/{offenderNo}/alerts/v2': {
    /** System or cat tool access only */
    get: operations['getAlertsForAllBookingByOffenderNo']
  }
  '/api/offenders/{offenderNo}/adjudications': {
    get: operations['getAdjudicationsByOffenderNo']
  }
  '/api/offenders/{offenderNo}/adjudications/{adjudicationNo}': {
    get: operations['getAdjudication']
  }
  '/api/offenders/{offenderNo}/addresses': {
    get: operations['getAddressesByOffenderNo']
  }
  '/api/offenders/next-sequence': {
    get: operations['getNextPrisonerIdentifier']
  }
  '/api/offenders/incidents/candidates': {
    /** This query is slow and can take several minutes */
    get: operations['getIncidentCandidates']
  }
  '/api/offenders/ids': {
    get: operations['getOffenderNumbers']
  }
  '/api/offenders/alerts/candidates': {
    /** This query is slow and can take several minutes<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getAlertCandidates']
  }
  '/api/offender-sentences/home-detention-curfew-candidates': {
    /** Version 1<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffenderSentencesHomeDetentionCurfewCandidates']
  }
  '/api/offender-sentences/booking/{bookingId}/sentences-and-offences': {
    get: operations['getSentenceAndOffenceDetails']
  }
  '/api/offender-sentences/booking/{bookingId}/sentenceTerms': {
    get: operations['getOffenderSentenceTerms']
  }
  '/api/offender-sentences/booking/{bookingId}/home-detention-curfews/latest': {
    get: operations['getLatestHomeDetentionCurfew']
  }
  '/api/offender-relationships/person/{personId}/{relationshipType}': {
    /** List of offenders that are related to this person Id and relationship type */
    get: operations['getBookingsByPersonIdAndType']
  }
  '/api/offender-relationships/externalRef/{externalRef}/{relationshipType}': {
    /** List of offenders */
    get: operations['getBookingsByExternalRefAndType']
  }
  '/api/offender-fine-payment/booking/{bookingId}': {
    get: operations['getOffenderFinePayments']
  }
  '/api/offender-assessments/csra/{offenderNo}': {
    get: operations['getOffenderCsraAssessments']
  }
  '/api/offender-assessments/csra/{bookingId}/assessment/{assessmentSeq}': {
    get: operations['getOffenderCsraAssessment']
  }
  '/api/offender-assessments/assessments': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    get: operations['getAssessments']
  }
  '/api/offender-activities/{offenderNo}/attendance-history': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    get: operations['getHistoricalAttendances']
  }
  '/api/offender-activities/{offenderNo}/activities-history': {
    /** This includes suspended activities<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getRecentStartedActivities']
  }
  '/api/offences': {
    get: operations['getActiveOffences']
  }
  '/api/offences/search': {
    get: operations['getOffencesByDescription']
  }
  '/api/offences/code/{offenceCode}': {
    get: operations['getOffencesThatStartWith']
  }
  '/api/offences/all': {
    get: operations['getOffences']
  }
  '/api/movements/{agencyId}/out/{isoDate}': {
    get: operations['getOffendersOutToday']
  }
  '/api/movements/{agencyId}/in': {
    /** Offenders who entered a prison during a time period.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getMovementsIn']
  }
  '/api/movements/{agencyId}/in/{isoDate}': {
    /** Information on offenders in on given date. */
    get: operations['getMovementsIn_1']
  }
  '/api/movements/{agencyId}/enroute': {
    /** Enroute to reception */
    get: operations['getEnrouteOffenderMovements']
  }
  '/api/movements/upcomingCourtAppearances': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    get: operations['getUpcomingCourtAppearances']
  }
  '/api/movements/transfers': {
    /** Planned movements are recorded as events of type court, release or transfers/appointments. When these events are started they are actualised as external movements.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getTransfers']
  }
  '/api/movements/rollcount/{agencyId}': {
    /** Current establishment rollcount numbers.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getRollcount']
  }
  '/api/movements/rollcount/{agencyId}/movements': {
    /** Rollcount movement numbers.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getRollcountMovements']
  }
  '/api/movements/rollcount/{agencyId}/in-reception': {
    get: operations['getOffendersInReception']
  }
  '/api/movements/rollcount/{agencyId}/enroute': {
    /** Enroute to reception count */
    get: operations['getEnrouteOffenderMovementCount']
  }
  '/api/movements/livingUnit/{livingUnitId}/currently-out': {
    /** Information on offenders currently out.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffendersCurrentlyOut']
  }
  '/api/movements/agency/{agencyId}/temporary-absences': {
    get: operations['getTemporaryAbsences']
  }
  '/api/movements/agency/{agencyId}/currently-out': {
    /** Information on offenders currently out. */
    get: operations['getOffendersCurrentlyOut_1']
  }
  '/api/locations/{locationId}': {
    /** Location detail. */
    get: operations['getLocation']
  }
  '/api/locations/{locationId}/inmates': {
    /** List of offenders at location.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffendersAtLocation']
  }
  '/api/locations/description/{locationPrefix}/inmates': {
    /** List of offenders at location.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffendersAtLocationDescription']
  }
  '/api/locations/code/{code}': {
    get: operations['getLocationByCode']
  }
  '/api/key-worker/{staffId}/agency/{agencyId}/offenders': {
    /** Specified key worker's currently assigned offenders. */
    get: operations['getAllocationsForKeyworker']
  }
  '/api/key-worker/{agencyId}/available': {
    /** Key workers available for allocation at specified agency.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getAvailableKeyworkers']
  }
  '/api/key-worker/{agencyId}/allocationHistory': {
    /** All allocations in specified agency. */
    get: operations['getAllocationHistory']
  }
  '/api/incidents/{incidentId}': {
    /** System access only */
    get: operations['getIncident']
  }
  '/api/images/{imageId}': {
    /** Image detail (with image data). */
    get: operations['getImage']
  }
  '/api/images/{imageId}/data': {
    /** Image data (as bytes). */
    get: operations['getImageData']
  }
  '/api/images/offenders': {
    get: operations['getOffendersWithImagesCapturedInRange']
  }
  '/api/identifiers/{type}/{value}': {
    /** Empty list will be returned for no matches<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffenderIdentifiersByTypeAndValue']
  }
  '/api/events': {
    /**
     * **from** and **to** query params are optional.
     * An awful lot of events occur every day. To guard against unintentionally heavy queries, the following rules are applied:
     * If **both** are absent, scope will be limited to 24 hours starting from midnight yesterday.
     * If **to** is present but **from** is absent, **from** will be defaulted to 24 hours before **to**.
     * If **from** is present but **to** is absent, **to** will be defaulted to 24 hours after **from**.
     */
    get: operations['getEvents_1']
  }
  '/api/employment/prisoner/{offenderNo}': {
    /** A list of offender employments. */
    get: operations['getPrisonerEmployments']
  }
  '/api/education/prisoner/{offenderNo}': {
    /** A list of offender educations. */
    get: operations['getPrisonerEducations']
  }
  '/api/cell/{locationId}/history': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    get: operations['getBedAssignmentsHistory']
  }
  '/api/cell/{locationId}/attributes': {
    get: operations['getCellAttributes']
  }
  '/api/cell/{agencyId}/history/{assignmentDate}': {
    /** <p>This endpoint uses the REPLICA database.</p> */
    get: operations['getBedAssignmentsHistoryByDateForAgency']
  }
  '/api/case-notes/events': {
    /** Returns all case notes - consumed by Delius<br/>These are generated by  whenever a case note is created or amended for an offender.<br/>*Note:* An alternative call [GET /case_notes/for_delius](#case-notes-feed-fetch-case-notes-direct-get) has been created for performance reasons.<br/>Some case notes are automatically generated by the system in response to an action relating to the offender e.g. An alert being raised or a prison transfer.<br/>The note type only filters at the top note type level not the sub type.<br/>note_type can be presented multiples times in the URL to filter by multiple note types. */
    get: operations['getCaseNotesEvents']
  }
  '/api/bookings/{bookingId}': {
    /** Offender detail. */
    get: operations['getOffenderBooking']
  }
  '/api/bookings/{bookingId}/visits': {
    /** All scheduled visits for offender. */
    get: operations['getBookingVisits']
  }
  '/api/bookings/{bookingId}/visits/today': {
    /** Today's scheduled visits for offender. */
    get: operations['getBookingVisitsForToday']
  }
  '/api/bookings/{bookingId}/visits/summary': {
    /** Will return whether there are any visits and also the date of the next scheduled visit<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getBookingVisitsSummary']
  }
  '/api/bookings/{bookingId}/visits/prisons': {
    /** To be used for filtering visits by prison */
    get: operations['getBookingVisitsPrisons']
  }
  '/api/bookings/{bookingId}/visits/next': {
    /** The next visit for the offender. Will return 200 with no body if no next visit is scheduled<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getBookingVisitsNext']
  }
  '/api/bookings/{bookingId}/visits-with-visitors': {
    /** visits with visitor list for offender.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getBookingVisitsWithVisitor']
  }
  '/api/bookings/{bookingId}/sentenceDetail': {
    /**
     * <h3>Algorithm</h3>
     * <ul>
     *   <li>If there is a confirmed release date, the offender release date is the confirmed release date.</li>
     *   <li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li>
     *   <li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li>
     * </ul>
     * <p>This endpoint uses the REPLICA database.</p>
     */
    get: operations['getBookingSentenceDetail']
  }
  '/api/bookings/{bookingId}/sentenceAdjustments': {
    get: operations['getBookingSentenceAdjustments']
  }
  '/api/bookings/{bookingId}/secondary-languages': {
    /** Get secondary languages */
    get: operations['getSecondaryLanguages']
  }
  '/api/bookings/{bookingId}/reasonable-adjustments': {
    /** Reasonable Adjustment Information */
    get: operations['getReasonableAdjustments']
  }
  '/api/bookings/{bookingId}/property': {
    /** List of active property containers */
    get: operations['getOffenderPropertyContainers']
  }
  '/api/bookings/{bookingId}/profileInformation': {
    /** Profile Information */
    get: operations['getProfileInformation']
  }
  '/api/bookings/{bookingId}/physicalMarks': {
    /** Physical Mark Information */
    get: operations['getPhysicalMarks']
  }
  '/api/bookings/{bookingId}/physicalCharacteristics': {
    /** Physical Characteristics */
    get: operations['getPhysicalCharacteristics']
  }
  '/api/bookings/{bookingId}/physicalAttributes': {
    /** Offender Physical Attributes. */
    get: operations['getPhysicalAttributes']
  }
  '/api/bookings/{bookingId}/non-association-details': {
    /** Get offender non-association details */
    get: operations['getNonAssociationDetails_1']
  }
  '/api/bookings/{bookingId}/movement/{sequenceNumber}': {
    /** Must booking in user caseload or have system privilege */
    get: operations['getMovementByBookingIdAndSequence']
  }
  '/api/bookings/{bookingId}/military-records': {
    /** Military Records */
    get: operations['getMilitaryRecords_1']
  }
  '/api/bookings/{bookingId}/mainOffence': {
    /** Offender main offence detail. */
    get: operations['getMainOffence_1']
  }
  '/api/bookings/{bookingId}/incidents': {
    /** Can be filtered by participation type and incident type */
    get: operations['getIncidentsByBookingId']
  }
  '/api/bookings/{bookingId}/image': {
    /** Image detail (without image data).<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getMainImageForBookings']
  }
  '/api/bookings/{bookingId}/image/data': {
    /** Image data (as bytes).<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getMainBookingImageData']
  }
  '/api/bookings/{bookingId}/identifiers': {
    /** Identifiers for this booking */
    get: operations['getOffenderIdentifiers']
  }
  '/api/bookings/{bookingId}/fixed-term-recall': {
    get: operations['getFixedTermRecallDetails']
  }
  '/api/bookings/{bookingId}/events': {
    /** All scheduled events for offender. */
    get: operations['getEvents_2']
  }
  '/api/bookings/{bookingId}/events/today': {
    /** Today's scheduled events for offender. */
    get: operations['getEventsToday']
  }
  '/api/bookings/{bookingId}/events/thisWeek': {
    /** Scheduled events for offender for coming week (from current day). */
    get: operations['getEventsThisWeek']
  }
  '/api/bookings/{bookingId}/events/nextWeek': {
    /** Scheduled events for offender for following week. */
    get: operations['getEventsNextWeek']
  }
  '/api/bookings/{bookingId}/court-hearings': {
    get: operations['getCourtHearings']
  }
  '/api/bookings/{bookingId}/court-cases': {
    /** Court Cases */
    get: operations['getCourtCases']
  }
  '/api/bookings/{bookingId}/contacts': {
    /** Offender contacts (e.g. next of kin). */
    get: operations['getContacts']
  }
  '/api/bookings/{bookingId}/cell-history': {
    /** Default sort order is by assignment date descending<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getBedAssignmentsHistory_1']
  }
  '/api/bookings/{bookingId}/caseNotes': {
    /** Offender case notes.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffenderCaseNotes_1']
  }
  '/api/bookings/{bookingId}/caseNotes/{type}/{subType}/count': {
    /** Count of case notes<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getCaseNoteCount']
  }
  '/api/bookings/{bookingId}/caseNotes/{caseNoteId}': {
    /** Offender case note detail. */
    get: operations['getOffenderCaseNote_1']
  }
  '/api/bookings/{bookingId}/balances': {
    /** Offender account balances. */
    get: operations['getBalances']
  }
  '/api/bookings/{bookingId}/assessments': {
    /** Assessment Information */
    get: operations['getAssessments_1']
  }
  '/api/bookings/{bookingId}/assessment/{assessmentCode}': {
    /** Offender assessment detail. */
    get: operations['getAssessmentByCode']
  }
  '/api/bookings/{bookingId}/appointments/today': {
    /** Today's scheduled appointments for offender. */
    get: operations['getBookingAppointmentsForToday']
  }
  '/api/bookings/{bookingId}/appointments/thisWeek': {
    /** Scheduled appointments for offender for coming week (from current day). */
    get: operations['getBookingAppointmentsForThisWeek']
  }
  '/api/bookings/{bookingId}/appointments/nextWeek': {
    /** Scheduled appointments for offender for following week. */
    get: operations['getBookingAppointmentsForNextWeek']
  }
  '/api/bookings/{bookingId}/aliases': {
    /** Offender aliases. */
    get: operations['getOffenderAliases']
  }
  '/api/bookings/{bookingId}/alerts/{alertId}': {
    /** Offender alert detail. */
    get: operations['getOffenderAlert']
  }
  '/api/bookings/{bookingId}/alerts/v2': {
    /** Offender alerts. */
    get: operations['getOffenderAlertsV2']
  }
  '/api/bookings/{bookingId}/adjudications': {
    /** Offender adjudications (awards and sanctions). */
    get: operations['getAdjudicationSummary']
  }
  '/api/bookings/{bookingId}/activities': {
    /** All scheduled activities for offender.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getBookingActivities']
  }
  '/api/bookings/{bookingId}/activities/today': {
    /** Today's scheduled activities for offender.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getBookingActivitiesForToday']
  }
  '/api/bookings/v2': {
    /** Returns data that is available to the users caseload privileges, at least one attribute of a prisonId, bookingId or offenderNo must be specified */
    get: operations['getPrisonerBookingsV2']
  }
  '/api/bookings/offenderNo/{offenderNo}': {
    /** Offender detail. */
    get: operations['getOffenderBookingByOffenderNo']
  }
  '/api/bookings/offenderNo/{offenderNo}/visit/balances': {
    /** Balances visit orders and privilege visit orders for offender.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getBookingVisitBalances']
  }
  '/api/bookings/offenderNo/{offenderNo}/offenceHistory': {
    /** All Offences recorded for this offender.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getOffenceHistory']
  }
  '/api/bookings/offenderNo/{offenderNo}/key-worker': {
    /** Key worker details. This should not be used - call keywork API instead */
    get: operations['getKeyworkerByOffenderNo']
  }
  '/api/bookings/offenderNo/{offenderNo}/image/data': {
    /** Image data (as bytes). */
    get: operations['getMainBookingImageDataByNo']
  }
  '/api/appointments/{appointmentId}': {
    /** Get appointment byId. */
    get: operations['getAppointment']
    /** Delete appointment. */
    delete: operations['deleteAppointment']
  }
  '/api/agencies/{agencyId}/locations': {
    /** List of active internal locations for agency.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getAgencyLocations']
  }
  '/api/agencies/{agencyId}/locations/type/{type}': {
    /** List of active internal locations for agency by type. */
    get: operations['getAgencyLocationsByType']
  }
  '/api/agencies/{agencyId}/locations/groups': {
    /** List of all available Location Groups at agency. */
    get: operations['getAvailableLocationGroups']
  }
  '/api/agencies/{agencyId}/eventLocations': {
    /** List of locations for agency where events (appointments, visits, activities) could be held. */
    get: operations['getAgencyEventLocations']
  }
  '/api/agencies/{agencyId}/eventLocationsBooked': {
    /** List of locations for agency where events (appointments, visits, activities) are being held.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getAgencyEventLocationsBooked']
  }
  '/api/agencies/{agencyId}/establishment-types': {
    /** An agency can have one to many establishment types. For example a prison could be both a youth and adult establishment. */
    get: operations['getAgencyEstablishmentTypes']
  }
  '/api/agencies/{agencyId}/cellsWithCapacity': {
    /** List of active cells with capacity for agency.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getAgencyActiveCellsWithCapacity']
  }
  '/api/agencies/type/{type}': {
    /** List of active agencies by type */
    get: operations['getAgenciesByType']
  }
  '/api/agencies/prison': {
    /** List of prison contact details.<p>This endpoint uses the REPLICA database.</p> */
    get: operations['getPrisonContactDetailList']
  }
  '/api/agencies/prison/{agencyId}': {
    /** Prison contact detail. */
    get: operations['getPrisonContactDetail']
  }
  '/api/agencies/caseload/{caseload}': {
    /** List of agencies for caseload. */
    get: operations['getAgenciesByCaseload']
  }
  '/api/adjustments/{bookingId}/sentence-and-booking': {
    get: operations['getBookingAndSentenceAdjustments']
  }
  '/api/bookings/{bookingId}/court-hearings/{hearingId}/cancel': {
    /** Cancels the scheduled court hearing for an offender. */
    delete: operations['cancelCourtHearing']
  }
}

export interface components {
  schemas: {
    /** @description Case Load */
    CaseLoad: {
      /**
       * @description Case Load ID
       * @example MDI
       */
      caseLoadId: string
      /**
       * @description Full description of the case load
       * @example Moorland Closed (HMP & YOI)
       */
      description: string
      /**
       * @description Type of case load. Note: Reference Code CSLD_TYPE
       * @example INST
       */
      type: 'COMM' | 'INST' | 'APP'
      /**
       * @description Functional Use of the case load
       * @example GENERAL
       */
      caseloadFunction?: 'GENERAL' | 'ADMIN'
      /** @description Indicates that this caseload in the context of a staff member is the current active */
      currentlyActive: boolean
    }
    /** @description General API Error Response */
    ErrorResponse: {
      /**
       * Format: int32
       * @description Response status code (will typically mirror HTTP status code).
       * @example 404
       */
      status: number
      /**
       * Format: int32
       * @description An (optional) application-specific error code.
       * @example 20002
       */
      errorCode?: number
      /**
       * @description Concise error reason for end-user consumption.
       * @example Entity Not Found
       */
      userMessage: string
      /**
       * @description Detailed description of problem with remediation hints aimed at application developer.
       * @example Serious error in the system
       */
      developerMessage?: string
      /**
       * @description Provision for further information about the problem (e.g. a link to a FAQ or knowledge base article).
       * @example Check out this FAQ for more information
       */
      moreInfo?: string
    }
    /** @description Caseload Update */
    CaseloadUpdate: {
      /**
       * @description Caseload
       * @example MDI
       */
      caseload: string
      /**
       * Format: int32
       * @description Number of users enabled to access API
       * @example 5
       */
      numUsersEnabled: number
    }
    /** @description Reference Information */
    ReferenceCodeInfo: {
      /**
       * @description Reference data item description.
       * @example Some description
       */
      description: string
      /**
       * @description Parent reference data item domain.
       * @example TASK_TYPE
       */
      parentDomain?: string
      /**
       * @description Parent reference data item code.
       * @example MIGRATION
       */
      parentCode?: string
      /**
       * @description Reference data item active indicator flag.
       * @example Y
       */
      activeFlag: 'Y' | 'N'
      /**
       * Format: int32
       * @description List Sequence
       * @example 1
       */
      listSeq?: number
      /**
       * @description System Data Flag
       * @example Y
       */
      systemDataFlag?: 'Y' | 'N'
      /**
       * Format: date
       * @description Expired Date
       * @example 2018-03-09
       */
      expiredDate?: string
    }
    /** @description Reference Code */
    ReferenceCode: {
      /**
       * @description Reference data item domain.
       * @example TASK_TYPE
       */
      domain: string
      /**
       * @description Reference data item code.
       * @example MISC
       */
      code: string
      /**
       * @description Reference data item description.
       * @example Some description
       */
      description: string
      /**
       * @description Parent reference data item domain.
       * @example TASK_TYPE
       */
      parentDomain?: string
      /**
       * @description Parent reference data item code.
       * @example MIGRATION
       */
      parentCode?: string
      /**
       * @description Reference data item active indicator flag.
       * @example Y
       */
      activeFlag: 'Y' | 'N'
      /**
       * Format: int32
       * @description List Sequence
       * @example 1
       */
      listSeq?: number
      /**
       * @description System Data Flag
       * @example Y
       */
      systemDataFlag?: 'Y' | 'N'
      /**
       * Format: date
       * @description Expired Date
       * @example 2018-03-09
       */
      expiredDate?: string
      /** @description List of subordinate reference data items associated with this reference data item. Not returned by default */
      subCodes?: components['schemas']['ReferenceCode'][]
    }
    /** @description Represents the data required for transferring a prisoner to a new location */
    RequestToTransferOut: {
      /**
       * @description The location to be moved to.
       * @example PVI
       */
      toLocation: string
      /**
       * @description The time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2021-07-05T10:35:17
       */
      movementTime: string
      /**
       * @description The escort type of the move.
       * @example PECS
       */
      escortType: string
      /**
       * @description Reason code for the transfer, reference domain is MOVE_RSN
       * @example NOTR
       */
      transferReasonCode: string
      /**
       * @description Additional comments about the release
       * @example Prisoner was transferred to a new prison
       */
      commentText?: string
    }
    /** @description Alert */
    Alert: {
      /**
       * Format: int64
       * @description Alert Id
       * @example 1
       */
      alertId: number
      /**
       * Format: int64
       * @description Offender booking id.
       * @example 14
       */
      bookingId: number
      /**
       * @description Offender Unique Reference
       * @example G3878UK
       */
      offenderNo: string
      /**
       * @description Alert Type
       * @example X
       */
      alertType: string
      /**
       * @description Alert Type Description
       * @example Security
       */
      alertTypeDescription: string
      /**
       * @description Alert Code
       * @example XER
       */
      alertCode: string
      /**
       * @description Alert Code Description
       * @example Escape Risk
       */
      alertCodeDescription: string
      /**
       * @description Alert comments
       * @example Profession lock pick.
       */
      comment: string
      /**
       * Format: date
       * @description Date of the alert, which might differ to the date it was created
       * @example 2019-08-20
       */
      dateCreated: string
      /**
       * Format: date
       * @description Date the alert expires
       * @example 2020-08-20
       */
      dateExpires?: string
      /**
       * @description True / False based on presence of expiry date
       * @example true
       */
      expired: boolean
      /** @description True / False based on alert status */
      active: boolean
      /**
       * @description First name of the user who added the alert
       * @example John
       */
      addedByFirstName?: string
      /**
       * @description Last name of the user who added the alert
       * @example Smith
       */
      addedByLastName?: string
      /**
       * @description First name of the user who last modified the alert
       * @example John
       */
      expiredByFirstName?: string
      /**
       * @description Last name of the user who last modified the alert
       * @example Smith
       */
      expiredByLastName?: string
    }
    /** @description Alias */
    Alias: {
      /**
       * @description First name of offender alias
       * @example Mike
       */
      firstName: string
      /**
       * @description Middle names of offender alias
       * @example John
       */
      middleName?: string
      /**
       * @description Last name of offender alias
       * @example Smith
       */
      lastName: string
      /**
       * Format: int32
       * @description Age of Offender
       * @example 32
       */
      age: number
      /**
       * Format: date
       * @description Date of Birth of Offender
       * @example 1980-02-28
       */
      dob: string
      /**
       * @description Gender
       * @example Male
       */
      gender: string
      /**
       * @description Ethnicity
       * @example Mixed: White and Black African
       */
      ethnicity?: string
      /**
       * @description Type of Alias
       * @example Alias Name
       */
      nameType?: string
      /**
       * Format: date
       * @description Date of creation
       * @example 2019-02-15
       */
      createDate: string
    }
    /** @description Assessment */
    Assessment: {
      /**
       * Format: int64
       * @description Booking number
       * @example 123456
       */
      bookingId: number
      /**
       * @description Offender number (e.g. NOMS Number).
       * @example GV09876N
       */
      offenderNo: string
      /**
       * @description Classification code
       * @example C
       */
      classificationCode: string
      /**
       * @description Classification description
       * @example Cat C
       */
      classification: string
      /**
       * @description Identifies the type of assessment
       * @example CATEGORY
       */
      assessmentCode: string
      /**
       * @description Assessment description
       * @example Categorisation
       */
      assessmentDescription: string
      /** @description Indicates the presence of a cell sharing alert */
      cellSharingAlertFlag: boolean
      /**
       * Format: date
       * @description Date assessment was created
       * @example 2018-02-11
       */
      assessmentDate: string
      /**
       * Format: date
       * @description Date of next review
       * @example 2018-02-11
       */
      nextReviewDate: string
      /**
       * Format: date
       * @description Date of assessment approval
       * @example 2018-02-11
       */
      approvalDate?: string
      /**
       * @description The assessment creation agency id
       * @example MDI
       */
      assessmentAgencyId?: string
      /**
       * @description The status of the assessment
       * @example A
       */
      assessmentStatus?: 'P' | 'A' | 'I'
      /**
       * Format: int32
       * @description Sequence number of assessment within booking
       * @example 1
       */
      assessmentSeq?: number
      /**
       * @description Comment from assessor
       * @example Comment details
       */
      assessmentComment?: string
      /**
       * Format: int64
       * @description Staff member who made the assessment
       * @example 130000
       */
      assessorId?: number
      /**
       * @description Username who made the assessment
       * @example NGK33Y
       */
      assessorUser?: string
    }
    /** @description Assigned Living Unit */
    AssignedLivingUnit: {
      /** @description Agency Id */
      agencyId: string
      /**
       * Format: int64
       * @description location Id
       */
      locationId: number
      /** @description Living Unit Desc */
      description: string
      /** @description Name of the agency where this living unit resides */
      agencyName: string
    }
    /** @description Inmate Detail */
    InmateDetail: {
      /**
       * @description Offender Unique Reference
       * @example A1234AA
       */
      offenderNo: string
      /**
       * Format: int64
       * @description Offender Booking Id
       * @example 432132
       */
      bookingId?: number
      /** @description Booking Number */
      bookingNo?: string
      /**
       * Format: int64
       * @description Internal Offender ID
       */
      offenderId: number
      /**
       * Format: int64
       * @description Internal Root Offender ID
       */
      rootOffenderId: number
      /** @description First Name */
      firstName: string
      /** @description Middle Name(s) */
      middleName?: string
      /** @description Last Name */
      lastName: string
      /**
       * Format: date
       * @description Date of Birth of prisoner
       * @example 1970-03-15
       */
      dateOfBirth: string
      /**
       * Format: int32
       * @description Age of prisoner. Note: Full Details Only
       */
      age?: number
      /** @description Indicates that the person is currently in prison */
      activeFlag: boolean
      /**
       * Format: int64
       * @description Image Id Ref of prisoner
       */
      facialImageId?: number
      /** @description Identifier of agency to which the prisoner is associated. */
      agencyId?: string
      /**
       * Format: int64
       * @description Identifier of living unit (e.g. cell) that prisoner is assigned to.
       */
      assignedLivingUnitId?: number
      /** @description Religion of the prisoner */
      religion?: string
      /** @description Preferred spoken language */
      language?: string
      /** @description Interpreter required */
      interpreterRequired?: boolean
      /** @description Preferred written language */
      writtenLanguage?: string
      /** @description List of Alerts */
      alertsCodes?: string[]
      /**
       * Format: int64
       * @description number of active alerts. Note: Full Details Only
       */
      activeAlertCount?: number
      /**
       * Format: int64
       * @description number of inactive alerts. Note: Full Details Only
       */
      inactiveAlertCount?: number
      /** @description List of alert details */
      alerts?: components['schemas']['Alert'][]
      assignedLivingUnit?: components['schemas']['AssignedLivingUnit']
      physicalAttributes?: components['schemas']['PhysicalAttributes']
      /** @description List of physical characteristics */
      physicalCharacteristics?: components['schemas']['PhysicalCharacteristic'][]
      /** @description List of profile information */
      profileInformation?: components['schemas']['ProfileInformation'][]
      /** @description List of physical marks */
      physicalMarks?: components['schemas']['PhysicalMark'][]
      /** @description List of assessments */
      assessments?: components['schemas']['Assessment'][]
      /** @description CSRA (Latest assessment with cellSharing=true from list of assessments) */
      csra?: string
      /**
       * @description The CSRA classification (calculated from the list of CSRA assessments)
       * @example STANDARD
       */
      csraClassificationCode?: string
      /**
       * Format: date
       * @description The date that the csraClassificationCode was assessed
       */
      csraClassificationDate?: string
      /** @description Category description (from list of assessments) */
      category?: string
      /** @description Category code (from list of assessments) */
      categoryCode?: string
      /**
       * @description Place of birth
       * @example WALES
       */
      birthPlace?: string
      /**
       * @description Country of birth
       * @example GBR
       */
      birthCountryCode?: string
      /**
       * @description In/Out Status
       * @example IN
       */
      inOutStatus: 'IN' | 'OUT' | 'TRN'
      /** @description Identifiers. Note: Only returned when requesting extra details */
      identifiers?: components['schemas']['OffenderIdentifier'][]
      /** @description Personal Care Needs. Note: Only returned when requesting extra details */
      personalCareNeeds?: components['schemas']['PersonalCareNeed'][]
      sentenceDetail?: components['schemas']['SentenceCalcDates']
      /** @description Offence History. Note: Only returned when requesting extra details */
      offenceHistory?: components['schemas']['OffenceHistoryDetail'][]
      /** @description Current Sentence Terms. Note: Only returned when requesting extra details */
      sentenceTerms?: components['schemas']['OffenderSentenceTerms'][]
      /** @description Aliases. Note: Only returned when requesting extra details */
      aliases?: components['schemas']['Alias'][]
      /**
       * @description Status of prisoner
       * @example ACTIVE IN
       */
      status: 'ACTIVE IN' | 'ACTIVE OUT'
      /**
       * @description Last movement status of the prison
       * @example CRT-CA
       */
      statusReason?: string
      /**
       * @description Last Movement Type Code of prisoner. Note: Reference Data from MOVE_TYPE Domain
       * @example TAP
       */
      lastMovementTypeCode?: 'TAP' | 'CRT' | 'TRN' | 'ADM' | 'REL'
      /**
       * @description Last Movement Reason of prisoner. Note: Reference Data from MOVE_RSN Domain
       * @example CA
       */
      lastMovementReasonCode?: string
      /**
       * @description Legal Status. Note: Only returned when requesting extra details
       * @example REMAND
       */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
      /**
       * @description Recall. Note: Only returned when requesting extra details
       * @example true
       */
      recall?: boolean
      /**
       * @description The prisoner's imprisonment status. Note: Only returned when requesting extra details
       * @example LIFE
       */
      imprisonmentStatus?: string
      /**
       * @description The prisoner's imprisonment status description. Note: Only returned when requesting extra details
       * @example Serving Life Imprisonment
       */
      imprisonmentStatusDescription?: string
      privilegeSummary?: components['schemas']['PrivilegeSummary']
      /**
       * Format: date
       * @description Date prisoner was received into the prison.
       * @example 1980-01-01
       */
      receptionDate?: string
      /**
       * @description current prison or outside with last movement information.
       * @example Outside - released from Leeds
       */
      locationDescription?: string
      /**
       * @description the current prison id or the last prison before release
       * @example MDI
       */
      latestLocationId?: string
    }
    /** @description Offence History Item */
    OffenceHistoryDetail: {
      /**
       * Format: int64
       * @description Prisoner booking id
       * @example 1123456
       */
      bookingId: number
      /**
       * Format: date
       * @description Date the offence took place
       * @example 2018-02-10
       */
      offenceDate: string
      /**
       * Format: date
       * @description End date if range the offence was believed to have taken place
       * @example 2018-03-10
       */
      offenceRangeDate?: string
      /**
       * @description Description associated with the offence code
       * @example Commit an act / series of acts with intent to pervert the course of public justice
       */
      offenceDescription: string
      /**
       * @description Reference Code
       * @example RR84070
       */
      offenceCode: string
      /**
       * @description Statute code
       * @example RR84
       */
      statuteCode: string
      /** @description Identifies the main offence per booking */
      mostSerious: boolean
      /** @description Primary result code */
      primaryResultCode?: string
      /** @description Secondary result code */
      secondaryResultCode?: string
      /** @description Description for Primary result */
      primaryResultDescription?: string
      /** @description Description for Secondary result */
      secondaryResultDescription?: string
      /** @description Conviction flag for Primary result */
      primaryResultConviction?: boolean
      /** @description Conviction flag for Secondary result */
      secondaryResultConviction?: boolean
      /**
       * Format: date
       * @description Latest court date associated with the offence
       * @example 2018-02-10
       */
      courtDate?: string
      /**
       * Format: int64
       * @description Court case id
       * @example 100
       */
      caseId?: number
    }
    /** @description Offender Identifier */
    OffenderIdentifier: {
      /**
       * @description Type of offender identifier
       * @example PNC
       */
      type: string
      /**
       * @description The value of the offender identifier
       * @example 1231/XX/121
       */
      value: string
      /**
       * @description The offender number for this identifier
       * @example A1234AB
       */
      offenderNo?: string
      /**
       * Format: int64
       * @description The booking ID for this identifier
       * @example 1231223
       */
      bookingId?: number
      /**
       * @description Issuing Authority Information
       * @example Important Auth
       */
      issuedAuthorityText?: string
      /**
       * Format: date
       * @description Date of issue
       * @example 2018-01-21
       */
      issuedDate?: string
      /**
       * @description Related caseload type
       * @example GENERAL
       */
      caseloadType?: string
    }
    /** @description Offender Sentence terms details for booking id */
    OffenderSentenceTerms: {
      /**
       * Format: int64
       * @description Offender booking id.
       * @example 1132400
       */
      bookingId: number
      /**
       * Format: int32
       * @description Sentence number within booking id.
       * @example 2
       */
      sentenceSequence: number
      /**
       * Format: int32
       * @description Sentence term number within sentence.
       * @example 1
       */
      termSequence: number
      /**
       * Format: int32
       * @description Sentence number which this sentence follows if consecutive, otherwise concurrent.
       * @example 2
       */
      consecutiveTo?: number
      /**
       * @description Sentence type, using reference data from table SENTENCE_CALC_TYPES.
       * @example 2
       */
      sentenceType?: string
      /**
       * @description Sentence type description.
       * @example 2
       */
      sentenceTypeDescription?: string
      /**
       * Format: date
       * @description Start date of sentence term.
       * @example 2018-12-31
       */
      startDate: string
      /**
       * Format: int32
       * @description Sentence length years.
       */
      years?: number
      /**
       * Format: int32
       * @description Sentence length months.
       */
      months?: number
      /**
       * Format: int32
       * @description Sentence length weeks.
       */
      weeks?: number
      /**
       * Format: int32
       * @description Sentence length days.
       */
      days?: number
      /** @description Whether this is a life sentence. */
      lifeSentence: boolean
      /** @description Court case id */
      caseId: string
      /**
       * Format: double
       * @description Fine amount.
       */
      fineAmount: number
      /**
       * @description Sentence term code.
       * @example IMP
       */
      sentenceTermCode: string
      /**
       * Format: int64
       * @description Sentence line number
       * @example 1
       */
      lineSeq: number
      /**
       * Format: date
       * @description Sentence start date
       * @example 2018-12-31
       */
      sentenceStartDate: string
    }
    /** @description Personal Care Need */
    PersonalCareNeed: {
      /**
       * @description Problem Type
       * @example MATSTAT
       */
      problemType?: string
      /**
       * @description Problem Code
       * @example ACCU9
       */
      problemCode?: string
      /**
       * @description Problem Status
       * @example ON
       */
      problemStatus?: string
      /**
       * @description Problem Description
       * @example Preg, acc under 9mths
       */
      problemDescription?: string
      /**
       * @description Comment Text
       * @example a comment
       */
      commentText?: string
      /**
       * Format: date
       * @description Start Date
       * @example 2010-06-21
       */
      startDate?: string
      /**
       * Format: date
       * @description End Date
       * @example 2010-06-21
       */
      endDate?: string
    }
    /** @description Physical Attributes */
    PhysicalAttributes: {
      /**
       * @description Gender Code
       * @example M
       */
      sexCode: string
      /**
       * @description Gender
       * @example Male
       */
      gender: string
      /**
       * @description Ethnicity Code
       * @example W1
       */
      raceCode: string
      /**
       * @description Ethnicity
       * @example White: Eng./Welsh/Scot./N.Irish/British
       */
      ethnicity: string
      /**
       * Format: int32
       * @description Height in Feet
       * @example 5
       */
      heightFeet: number
      /**
       * Format: int32
       * @description Height in Inches
       * @example 60
       */
      heightInches: number
      /**
       * @description Height in Metres (to 2dp)
       * @example 1.76
       */
      heightMetres: number
      /**
       * Format: int32
       * @description Height in Centimetres
       * @example 176
       */
      heightCentimetres: number
      /**
       * Format: int32
       * @description Weight in Pounds
       * @example 50
       */
      weightPounds: number
      /**
       * Format: int32
       * @description Weight in Kilograms
       * @example 67
       */
      weightKilograms: number
    }
    /** @description Physical Characteristic */
    PhysicalCharacteristic: {
      /** @description Type code of physical characteristic */
      type: string
      /** @description Type of physical characteristic */
      characteristic: string
      /** @description Detailed information about the physical characteristic */
      detail: string
      /**
       * Format: int64
       * @description Image Id Ref
       */
      imageId?: number
    }
    /** @description Physical Mark */
    PhysicalMark: {
      /** @description Type of Mark */
      type: string
      /** @description Left or Right Side */
      side: string
      /** @description Where on the body */
      bodyPart: string
      /** @description Image orientation */
      orientation: string
      /** @description More information */
      comment: string
      /**
       * Format: int64
       * @description Image Id Ref
       */
      imageId?: number
    }
    /** @description Incentive & Earned Privilege Details */
    PrivilegeDetail: {
      /**
       * Format: int64
       * @description Offender booking identifier.
       */
      bookingId: number
      /**
       * Format: int64
       * @description Sequence Number of IEP Level
       * @example 1
       */
      sequence: number
      /**
       * Format: date
       * @description Effective date of IEP level.
       */
      iepDate: string
      /**
       * @description Effective date & time of IEP level.
       * @example 2021-07-05T10:35:17
       */
      iepTime?: string
      /** @description Identifier of Agency this privilege entry is associated with. */
      agencyId: string
      /** @description The IEP level (e.g. Basic, Standard or Enhanced). */
      iepLevel: string
      /** @description Further details relating to this privilege entry. */
      comments?: string
      /** @description Identifier of user related to this privilege entry. */
      userId?: string
      /**
       * @description The Screen (e.g. NOMIS screen OIDOIEPS) or system (PRISON_API) that made the change
       * @example PRISON_API
       */
      auditModuleName?: string
    }
    /** @description Incentive & Earned Privilege Summary */
    PrivilegeSummary: {
      /**
       * Format: int64
       * @description Offender booking identifier.
       * @example 112321
       */
      bookingId: number
      /**
       * @description The current IEP level (e.g. Basic, Standard or Enhanced).
       * @example Basic
       */
      iepLevel: 'Basic' | 'Standard' | 'Enhanced'
      /**
       * Format: date
       * @description Effective date of current IEP level.
       * @example 2019-01-24
       */
      iepDate: string
      /**
       * @description Effective date & time of current IEP level.
       * @example 2021-07-05T10:35:17
       */
      iepTime?: string
      /**
       * Format: int64
       * @description The number of days since last review.
       * @example 35
       */
      daysSinceReview: number
      /** @description All IEP detail entries for the offender (most recent first). */
      iepDetails?: components['schemas']['PrivilegeDetail'][]
    }
    /** @description Profile Information */
    ProfileInformation: {
      /** @description Type of profile information */
      type: string
      /** @description Profile Question */
      question: string
      /** @description Profile Result Answer */
      resultValue: string
    }
    /** @description Sentence Calculation Dates */
    SentenceCalcDates: {
      /**
       * Format: date
       * @description MTD - date calculated by nomis.
       * @example 2020-02-03
       */
      mtdCalculatedDate: string
      /**
       * Format: date
       * @description MTD - date overriden in nomis.
       * @example 2020-02-03
       */
      mtdOverrideDate: string
      /**
       * Format: date
       * @description ETD - date calculated by nomis.
       * @example 2020-02-03
       */
      etdCalculatedDate: string
      /**
       * Format: date
       * @description ETD - date overriden in nomis.
       * @example 2020-02-03
       */
      etdOverrideDate: string
      /**
       * Format: date
       * @description LTD - date calculated by nomis.
       * @example 2020-02-03
       */
      ltdOverrideDate: string
      /**
       * Format: date
       * @description LTD - date overriden in nomis.
       * @example 2020-02-03
       */
      ltdCalculatedDate: string
      /**
       * Format: date
       * @description SED - date on which sentence expires.
       * @example 2020-02-03
       */
      sentenceExpiryDate?: string
      /**
       * Format: date
       * @description ARD - calculated automatic (unconditional) release date for offender.
       * @example 2020-02-03
       */
      automaticReleaseDate?: string
      /**
       * Format: date
       * @description CRD - calculated conditional release date for offender.
       * @example 2020-02-03
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description NPD - calculated non-parole date for offender (relating to the 1991 act).
       * @example 2020-02-03
       */
      nonParoleDate?: string
      /**
       * Format: date
       * @description PRRD - calculated post-recall release date for offender.
       * @example 2020-02-03
       */
      postRecallReleaseDate?: string
      /**
       * Format: date
       * @description LED - date on which offender licence expires.
       * @example 2020-02-03
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description HDCED - date on which offender will be eligible for home detention curfew.
       * @example 2020-02-03
       */
      homeDetentionCurfewEligibilityDate?: string
      /**
       * Format: date
       * @description PED - date on which offender is eligible for parole.
       * @example 2020-02-03
       */
      paroleEligibilityDate?: string
      /**
       * Format: date
       * @description HDCAD - the offender's actual home detention curfew date.
       * @example 2020-02-03
       */
      homeDetentionCurfewActualDate?: string
      /**
       * Format: date
       * @description APD - the offender's actual parole date.
       * @example 2020-02-03
       */
      actualParoleDate?: string
      /**
       * Format: date
       * @description ROTL - the date on which offender will be released on temporary licence.
       * @example 2020-02-03
       */
      releaseOnTemporaryLicenceDate?: string
      /**
       * Format: date
       * @description ERSED - the date on which offender will be eligible for early removal (under the Early Removal Scheme for foreign nationals).
       * @example 2020-02-03
       */
      earlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description ETD - early term date for offender.
       * @example 2020-02-03
       */
      earlyTermDate?: string
      /**
       * Format: date
       * @description MTD - mid term date for offender.
       * @example 2020-02-03
       */
      midTermDate?: string
      /**
       * Format: date
       * @description LTD - late term date for offender.
       * @example 2020-02-03
       */
      lateTermDate?: string
      /**
       * Format: date
       * @description TUSED - top-up supervision expiry date for offender.
       * @example 2020-02-03
       */
      topupSupervisionExpiryDate?: string
      /**
       * Format: date
       * @description Date on which minimum term is reached for parole (indeterminate/life sentences).
       * @example 2020-02-03
       */
      tariffDate?: string
      /**
       * Format: date
       * @description DPRRD - Detention training order post recall release date
       * @example 2020-02-03
       */
      dtoPostRecallReleaseDate?: string
      /**
       * Format: date
       * @description TERSED - Tariff early removal scheme eligibility date
       * @example 2020-02-03
       */
      tariffEarlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description Effective sentence end date
       * @example 2020-02-03
       */
      effectiveSentenceEndDate?: string
      /**
       * Format: int64
       * @description Offender booking id.
       * @example 1234123
       */
      bookingId: number
      /**
       * Format: date
       * @description Sentence start date.
       * @example 2010-02-03
       */
      sentenceStartDate: string
      /**
       * Format: int32
       * @description ADA - days added to sentence term due to adjustments.
       * @example 5
       */
      additionalDaysAwarded?: number
      /**
       * Format: date
       * @description ARD (override) - automatic (unconditional) release override date for offender.
       * @example 2020-02-03
       */
      automaticReleaseOverrideDate?: string
      /**
       * Format: date
       * @description CRD (override) - conditional release override date for offender.
       * @example 2020-02-03
       */
      conditionalReleaseOverrideDate?: string
      /**
       * Format: date
       * @description NPD (override) - non-parole override date for offender.
       * @example 2020-02-03
       */
      nonParoleOverrideDate?: string
      /**
       * Format: date
       * @description PRRD (override) - post-recall release override date for offender.
       * @example 2020-04-01
       */
      postRecallReleaseOverrideDate?: string
      /**
       * Format: date
       * @description DPRRD (override) - detention training order post-recall release override date for offender
       * @example 2020-04-01
       */
      dtoPostRecallReleaseDateOverride?: string
      /**
       * Format: date
       * @description Release date for non-DTO sentence (if applicable). This will be based on one of ARD, CRD, NPD or PRRD.
       * @example 2020-04-01
       */
      nonDtoReleaseDate?: string
      /**
       * Format: date
       * @description SED (calculated) - date on which sentence expires. (as calculated by NOMIS)
       * @example 2020-02-03
       */
      sentenceExpiryCalculatedDate?: string
      /**
       * Format: date
       * @description SED (override) - date on which sentence expires.
       * @example 2020-02-03
       */
      sentenceExpiryOverrideDate?: string
      /**
       * Format: date
       * @description LED (calculated) - date on which offender licence expires. (as calculated by NOMIS)
       * @example 2020-02-03
       */
      licenceExpiryCalculatedDate?: string
      /**
       * Format: date
       * @description LED (override) - date on which offender licence expires.
       * @example 2020-02-03
       */
      licenceExpiryOverrideDate?: string
      /**
       * Format: date
       * @description PED (calculated) - date on which offender is eligible for parole.
       * @example 2020-02-03
       */
      paroleEligibilityCalculatedDate?: string
      /**
       * Format: date
       * @description PED (override) - date on which offender is eligible for parole.
       * @example 2020-02-03
       */
      paroleEligibilityOverrideDate?: string
      /**
       * Format: date
       * @description TUSED (calculated) - top-up supervision expiry date for offender.
       * @example 2020-02-03
       */
      topupSupervisionExpiryCalculatedDate?: string
      /**
       * Format: date
       * @description TUSED (override) - top-up supervision expiry date for offender.
       * @example 2020-02-03
       */
      topupSupervisionExpiryOverrideDate?: string
      /**
       * Format: date
       * @description HDCED (calculated) - date on which offender will be eligible for home detention curfew.
       * @example 2020-02-03
       */
      homeDetentionCurfewEligibilityCalculatedDate?: string
      /**
       * Format: date
       * @description HDCED (override) - date on which offender will be eligible for home detention curfew.
       * @example 2020-02-03
       */
      homeDetentionCurfewEligibilityOverrideDate?: string
      /**
       * @description Indicates which type of non-DTO release date is the effective release date. One of 'ARD', 'CRD', 'NPD' or 'PRRD'.
       * @example CRD
       */
      nonDtoReleaseDateType: 'ARD' | 'CRD' | 'NPD' | 'PRRD'
      /**
       * Format: date
       * @description Confirmed release date for offender.
       * @example 2020-04-20
       */
      confirmedReleaseDate?: string
      /**
       * Format: date
       * @description Confirmed, actual, approved, provisional or calculated release date for offender, according to offender release date algorithm.<h3>Algorithm</h3><ul><li>If there is a confirmed release date, the offender release date is the confirmed release date.</li><li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li><li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li></ul>
       * @example 2020-04-01
       */
      releaseDate?: string
      /**
       * Format: date
       * @description Top-up supervision start date for offender - calculated as licence end date + 1 day or releaseDate if licence end date not set.
       * @example 2019-04-01
       */
      topupSupervisionStartDate?: string
      /**
       * Format: date
       * @description Offender's home detention curfew end date - calculated as one day before the releaseDate.
       * @example 2019-04-01
       */
      homeDetentionCurfewEndDate?: string
    }
    /** @description Represents the data required for receiving a prisoner transfer */
    RequestToTransferIn: {
      /**
       * @description The time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2021-07-05T10:35:17
       */
      receiveTime: string
      /**
       * @description Additional comments about the release
       * @example Prisoner was transferred to a new prison
       */
      commentText?: string
      /**
       * @description Cell location
       * @example MDI-RECP
       */
      cellLocation?: string
    }
    /** @description Represents the data required for transferring a prisoner to temporary absence */
    RequestToTransferOutToTemporaryAbsence: {
      /**
       * @description The city to be released to. Not required if scheduleEventId is present
       * @example 18248
       */
      toCity?: string
      /**
       * @description The time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2021-07-05T10:35:17
       */
      movementTime?: string
      /**
       * @description The escort type of the move.
       * @example PECS
       */
      escortType: string
      /**
       * @description Reason code for the transfer, reference domain is MOVE_RSN
       * @example C3
       */
      transferReasonCode: string
      /**
       * @description Additional comments about the release
       * @example Prisoner was transferred to a new prison
       */
      commentText?: string
      /** @description Flag indicate if bed should be released */
      shouldReleaseBed?: boolean
      /**
       * Format: int64
       * @description Optional scheduled schedule event this movement relates to
       */
      scheduleEventId?: number
    }
    /** @description Represents the data required for registering temporary absence arrival */
    RequestForTemporaryAbsenceArrival: {
      /**
       * @description Agency identifier
       * @example MDI
       */
      agencyId: string
      /**
       * @description Movement Reason Code
       * @example CA
       */
      movementReasonCode?: string
      /**
       * @description Additional comments
       * @example Prisoner was transferred from...
       */
      commentText?: string
      /**
       * @description The date and time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2021-07-05T10:35:17
       */
      dateTime: string
    }
    /** @description Request release of prisoner */
    RequestToReleasePrisoner: {
      /**
       * @description Reason code for the release, reference domain is MOVE_RSN
       * @example CR
       */
      movementReasonCode:
        | 'AR'
        | 'AU'
        | 'BD'
        | 'BL'
        | 'CE'
        | 'CR'
        | 'D1'
        | 'D2'
        | 'D3'
        | 'D4'
        | 'D5'
        | 'D6'
        | 'DA'
        | 'DD'
        | 'DE'
        | 'DEC'
        | 'DL'
        | 'DS'
        | 'ER'
        | 'ESCP'
        | 'ETR'
        | 'EX'
        | 'HC'
        | 'HD'
        | 'HE'
        | 'HP'
        | 'HR'
        | 'HU'
        | 'IF'
        | 'MRG'
        | 'NCS'
        | 'NG'
        | 'NP'
        | 'PD'
        | 'PF'
        | 'PX'
        | 'RE'
        | 'RW'
        | 'SC'
        | 'UAL'
      /**
       * @description The time the release occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2021-07-05T10:35:17
       */
      releaseTime: string
      /**
       * @description Additional comments about the release
       * @example Prisoner was released on bail
       */
      commentText?: string
      /**
       * @description Agency Location code where prisoner is released to, default is OUT
       * @example OUT
       */
      toLocationCode?: string
    }
    /** @description Represents the data required for recalling a prisoner */
    RequestToRecall: {
      /**
       * @description Prison ID where recalled to
       * @example MDI
       */
      prisonId: string
      /**
       * @description The time the recall occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2021-07-05T10:35:17
       */
      recallTime: string
      /**
       * @description Where the prisoner has been recalled from (default OUT)
       * @example SHEFCC
       */
      fromLocationId?: string
      /**
       * @description Reason for in movement (e.g. Recall from Intermittent Custody)
       * @example 24
       */
      movementReasonCode: string
      /** @description Is this offender a youth */
      youthOffender?: boolean
      /**
       * @description Cell location where recalled prisoner should be housed, default will be reception
       * @example MDI-RECP
       */
      cellLocation?: string
      /**
       * @description Require imprisonment status
       * @example CUR_ORA
       */
      imprisonmentStatus?: string
    }
    /** @description Request release of prisoner */
    RequestToDischargePrisoner: {
      /**
       * @description Agency Location code for hospital, agency type is HSHOSP
       * @example HAZLWD
       */
      hospitalLocationCode: string
      /**
       * @description The time the release occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2021-07-05T10:35:17
       */
      dischargeTime: string
      /**
       * @description Additional comments about the release
       * @example Prisoner was released on bail
       */
      commentText?: string
      /**
       * @description Supporting Prison for POM, can be null if prisoner is already in a prison, for prisoners already released this field will be ignored
       * @example MDI
       */
      supportingPrisonId?: string
      /**
       * @description Where the prisoner has moved from e.g. court, can be null if prisoner is already in prison, for prisoners already in prison this field will be ignored
       * @example SHEFCC
       */
      fromLocationId?: string
    }
    /** @description Represents the data required for transferring a prisoner to a court */
    RequestToTransferOutToCourt: {
      /**
       * @description The court location to be moved to.
       * @example LEEDYC
       */
      toLocation: string
      /**
       * @description The time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2021-07-05T10:35:17
       */
      movementTime: string
      /**
       * @description The escort type of the move.
       * @example PECS
       */
      escortType: string
      /**
       * @description Reason code for the transfer, reference domain is MOVE_RSN
       * @example CRT
       */
      transferReasonCode: string
      /**
       * @description Additional comments about the release
       * @example Prisoner was transferred to a new prison
       */
      commentText?: string
      /** @description Flag indicate if bed should be released */
      shouldReleaseBed?: boolean
      /**
       * Format: int64
       * @description Optional scheduled court hearing event this movement relates to
       */
      courtEventId?: number
    }
    /** @description Represents the data required for registering court return */
    RequestForCourtTransferIn: {
      /**
       * @description Agency identifier
       * @example MDI
       */
      agencyId: string
      /**
       * @description Movement Reason Code
       * @example CA
       */
      movementReasonCode?: string
      /**
       * @description Additional comments
       * @example Prisoner was transferred to a new prison
       */
      commentText?: string
      /**
       * @description The date and time the movement occurred, if not supplied it will be the current time. Note: Time can be in the past but not before the last movement
       * @example 2021-07-05T10:35:17
       */
      dateTime: string
    }
    /** @description HDC Curfew Check */
    HdcChecks: {
      /**
       * @description HDC Checks passed flag
       * @example true
       */
      passed: boolean
      /**
       * Format: date
       * @description HDC Checks passed date. ISO-8601 format. YYYY-MM-DD
       * @example 2018-12-31
       */
      date: string
    }
    /** @description HDC Approval Status */
    ApprovalStatus: {
      /**
       * @description Approval status. Must be one of the 'HDC_APPROVE' reference codes
       * @example APPROVED
       */
      approvalStatus: string
      /**
       * @description Refused reason. Must be one of the 'HDC_REJ_RSN' reference codes
       * @example UNDER_14DAYS
       */
      refusedReason?: string
      /**
       * Format: date
       * @description Approval status date. ISO-8601 format. YYYY-MM-DD
       * @example 2018-12-31
       */
      date: string
    }
    /** @description Rejection details */
    CategoryRejectionDetail: {
      /**
       * Format: int64
       * @description Booking Id
       */
      bookingId: number
      /**
       * Format: int32
       * @description Sequence number
       */
      assessmentSeq: number
      /**
       * Format: date
       * @description Date of rejection
       */
      evaluationDate: string
      /** @description Department, reference code in domain 'ASSESS_COMM'. Normally 'REVIEW' */
      reviewCommitteeCode: string
      /** @description Overall comment */
      committeeCommentText?: string
    }
    /** @description Categorisation details */
    CategorisationUpdateDetail: {
      /**
       * Format: int64
       * @description Booking Id
       */
      bookingId: number
      /**
       * Format: int32
       * @description Sequence number
       */
      assessmentSeq: number
      /** @description Category code */
      category?: string
      /** @description The assessment committee code (reference code in domain 'ASSESS_COMM') */
      committee?: string
      /**
       * Format: date
       * @description Next review date for recategorisation
       */
      nextReviewDate?: string
      /** @description Initial categorisation comment */
      comment?: string
    }
    /** @description Approval details */
    CategoryApprovalDetail: {
      /**
       * Format: int64
       * @description Booking Id
       */
      bookingId: number
      /**
       * Format: int32
       * @description Sequence number. Only used to check consistency
       */
      assessmentSeq?: number
      /** @description Category code, reference code in domain 'SUP_LVL_TYPE' */
      category: string
      /**
       * Format: date
       * @description Date of approval
       */
      evaluationDate: string
      /**
       * @description Department, reference code in domain 'ASSESS_COMM'. Normally 'REVIEW'
       * @example REVIEW
       */
      reviewCommitteeCode: string
      /** @description Approved result category comment */
      approvedCategoryComment?: string
      /** @description Overall comment */
      committeeCommentText?: string
      /**
       * Format: date
       * @description Next review date (date of re-assessment, remains unchanged if not provided)
       */
      nextReviewDate?: string
      /** @description Approved placement prison */
      approvedPlacementAgencyId?: string
      /** @description Approved placement prison comment */
      approvedPlacementText?: string
    }
    /**
     * @description HO Code
     * @example 825/99
     */
    HOCodeDto: {
      /**
       * @description HO code
       * @example 825/99
       */
      code: string
      /**
       * @description HO code description
       * @example Ho Code 825/99
       */
      description: string
      /**
       * @description Active Y/N
       * @example Y
       */
      activeFlag: string
      /**
       * Format: date
       * @description Expiry Date
       * @example 2021-01-05
       */
      expiryDate?: string
    }
    /** @description Offence */
    OffenceDto: {
      /**
       * @description Reference Code
       * @example RR84070
       */
      code: string
      /** @description Description of offence */
      description: string
      statuteCode: components['schemas']['StatuteDto']
      hoCode?: components['schemas']['HOCodeDto']
      /**
       * @description Severity Ranking
       * @example 5
       */
      severityRanking: string
      /**
       * @description Active Y/N
       * @example Y
       */
      activeFlag: string
      /**
       * Format: int32
       * @description Sequence
       * @example 1
       */
      listSequence?: number
      /**
       * Format: date
       * @description Expiry Date if no longer active
       * @example 2021-04-01
       */
      expiryDate?: string
    }
    /**
     * @description Statute
     * @example RR84
     */
    StatuteDto: {
      /**
       * @description Statute code
       * @example RR84
       */
      code: string
      /**
       * @description Statute code description
       * @example Statute RV98
       */
      description: string
      /**
       * @description Legislating Body Code
       * @example UK
       */
      legislatingBodyCode: string
      /**
       * @description Active Y/N
       * @example Y
       */
      activeFlag: string
    }
    /** @description The cancellation details. */
    PrisonMoveCancellation: {
      /** @description The reason code for cancellation of the move. */
      reasonCode: 'ADMI' | 'OCI' | 'TRANS'
    }
    /** @description Request move offender to cell swap */
    RequestMoveToCellSwap: {
      /**
       * @description The reason code for the move (from reason code domain CHG_HOUS_RSN) (defaults to ADM)
       * @example ADM
       */
      reasonCode?: string
      /**
       * @description The date / time of the move (defaults to current)
       * @example 2021-07-05T10:35:17
       */
      dateTime?: string
    }
    /** @description Offender Booking Summary */
    OffenderBooking: {
      /**
       * Format: int64
       * @description Unique, numeric booking id.
       * @example 1234134
       */
      bookingId: number
      /**
       * @description Booking number.
       * @example A12121
       */
      bookingNo?: string
      /**
       * @description Offender number (e.g. NOMS Number).
       * @example A1234AA
       */
      offenderNo: string
      /**
       * @description Offender first name.
       * @example JOHN
       */
      firstName: string
      /**
       * @description Offender middle name.
       * @example ASHLEY
       */
      middleName?: string
      /**
       * @description Offender last name.
       * @example SMITH
       */
      lastName: string
      /**
       * Format: date
       * @description Offender date of birth.
       * @example 1980-05-02
       */
      dateOfBirth: string
      /**
       * Format: int32
       * @description Offender's current age.
       * @example 32
       */
      age: number
      /**
       * @description Identifier of agency that offender is associated with.
       * @example MDI
       */
      agencyId: string
      /**
       * Format: int64
       * @description Identifier of living unit (e.g. cell) that offender is assigned to.
       * @example 123123
       */
      assignedLivingUnitId?: number
      /**
       * @description Description of living unit (e.g. cell) that offender is assigned to.
       * @example MDI-1-1-3
       */
      assignedLivingUnitDesc?: string
      /**
       * Format: int64
       * @description Identifier of facial image of offender.
       * @example 1241241
       */
      facialImageId?: number
      /**
       * @description Identifier of officer (key worker) to which offender is assigned.
       * @example 354543
       */
      assignedOfficerUserId?: string
      /** @description List of offender's alias names. */
      aliases?: string[]
      /**
       * @description The IEP Level of the offender (UK Only)
       * @example Basic
       */
      iepLevel?: string
      /**
       * @description The Cat A/B/C/D of the offender
       * @example C
       */
      categoryCode?: 'A' | 'B' | 'C' | 'D' | 'I' | 'J'
      /**
       * @description Convicted Status
       * @example Convicted
       */
      convictedStatus?: 'Convicted' | 'Remand'
      /**
       * @description The imprisonment status of the offender
       * @example SENT
       */
      imprisonmentStatus?: string
      /** @description List of offender's current alert types. */
      alertsCodes: string[]
      /** @description List of offender's current alert codes. */
      alertsDetails: string[]
      /**
       * @description Legal Status
       * @example REMAND
       */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
    }
    /** @description Cell move result */
    CellMoveResult: {
      /**
       * Format: int64
       * @description Unique, numeric booking id.
       * @example 1234134
       */
      bookingId: number
      /**
       * @description Identifier of agency that offender is associated with.
       * @example MDI
       */
      agencyId: string
      /**
       * Format: int64
       * @description Identifier of living unit (e.g. cell) that offender is assigned to.
       * @example 123123
       */
      assignedLivingUnitId?: number
      /**
       * @description Description of living unit (e.g. cell) that offender is assigned to.
       * @example MDI-1-1-3
       */
      assignedLivingUnitDesc?: string
      /**
       * Format: int32
       * @description Bed assignment sequence associated with the entry created for this cell move
       * @example 2
       */
      bedAssignmentHistorySequence?: number
    }
    /** @description The amendments for the scheduled court hearing. */
    CourtHearingDateAmendment: {
      /**
       * @description The date and time of the court hearing in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      hearingDateTime: string
    }
    /** @description An Address */
    AddressDto: {
      /**
       * Format: int64
       * @description Address Id
       * @example 543524
       */
      addressId?: number
      /**
       * @description Address Type. Note: Reference domain is ADDR_TYPE
       * @example BUS
       */
      addressType?: string
      /**
       * @description Flat
       * @example 3B
       */
      flat?: string
      /**
       * @description Premise
       * @example Liverpool Prison
       */
      premise?: string
      /**
       * @description Street
       * @example Slinn Street
       */
      street?: string
      /**
       * @description Locality
       * @example Brincliffe
       */
      locality?: string
      /**
       * @description Town/City. Note: Reference domain is CITY
       * @example Liverpool
       */
      town?: string
      /**
       * @description Postal Code
       * @example LI1 5TH
       */
      postalCode?: string
      /**
       * @description County. Note: Reference domain is COUNTY
       * @example HEREFORD
       */
      county?: string
      /**
       * @description Country. Note: Reference domain is COUNTRY
       * @example ENG
       */
      country?: string
      /**
       * @description Comment
       * @example This is a comment text
       */
      comment?: string
      /** @description Primary Address */
      primary: boolean
      /** @description No Fixed Address */
      noFixedAddress: boolean
      /**
       * Format: date
       * @description Date Added
       * @example 2005-05-12
       */
      startDate?: string
      /**
       * Format: date
       * @description Date ended
       * @example 2021-02-12
       */
      endDate?: string
      /** @description The phone number associated with the address */
      phones?: components['schemas']['Telephone'][]
      /** @description The address usages/types */
      addressUsages?: components['schemas']['AddressUsageDto'][]
    }
    /** @description An Offender's address usage */
    AddressUsageDto: {
      /**
       * Format: int64
       * @description Address ID of the associated address
       * @example 23422313
       */
      addressId?: number
      /**
       * @description The address usages
       * @example HDC
       */
      addressUsage?: string
      /**
       * @description The address usages description
       * @example HDC Address
       */
      addressUsageDescription?: string
      /**
       * @description Active Flag
       * @example true
       */
      activeFlag?: boolean
    }
    /** @description Agency Details */
    Agency: {
      /**
       * @description Agency identifier.
       * @example MDI
       */
      agencyId: string
      /**
       * @description Agency description.
       * @example Moorland (HMP & YOI)
       */
      description: string
      /**
       * @description Long description of the agency
       * @example Moorland (HMP & YOI)
       */
      longDescription?: string
      /**
       * @description Agency type.  Reference domain is AGY_LOC_TYPE
       * @example INST
       */
      agencyType:
        | 'CRC'
        | 'POLSTN'
        | 'INST'
        | 'COMM'
        | 'APPR'
        | 'CRT'
        | 'POLICE'
        | 'IMDC'
        | 'TRN'
        | 'OUT'
        | 'YOT'
        | 'SCH'
        | 'STC'
        | 'HOST'
        | 'AIRPORT'
        | 'HSHOSP'
        | 'HOSPITAL'
        | 'PECS'
        | 'PAR'
        | 'PNP'
        | 'PSY'
      /**
       * @description Indicates the Agency is active
       * @example true
       */
      active: boolean
      /**
       * @description Court Type.  Reference domain is JURISDICTION
       * @example CC
       */
      courtType?: 'CACD' | 'CB' | 'CC' | 'CO' | 'DCM' | 'GCM' | 'IMM' | 'MC' | 'OTHER' | 'YC'
      /**
       * Format: date
       * @description Date agency became inactive
       * @example 2012-01-12
       */
      deactivationDate?: string
      /** @description List of addresses associated with agency */
      addresses?: components['schemas']['AddressDto'][]
      /** @description List of phones associated with agency */
      phones?: components['schemas']['Telephone'][]
      /** @description List of emails associated with agency */
      emails?: components['schemas']['Email'][]
    }
    /** @description Represents a court hearing for an offender court case. */
    CourtHearing: {
      /**
       * Format: int64
       * @description The court hearing identifier.
       * @example 123456789
       */
      id?: number
      /**
       * @description The date and start time of the court hearing in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      dateTime?: string
      location?: components['schemas']['Agency']
    }
    /** @description An Email Address */
    Email: {
      /** @description Email */
      email?: string
    }
    /** @description Telephone Details */
    Telephone: {
      /**
       * Format: int64
       * @description Phone Id
       * @example 2234232
       */
      phoneId?: number
      /**
       * @description Telephone number
       * @example 0114 2345678
       */
      number: string
      /**
       * @description Telephone type
       * @example TEL
       */
      type: string
      /**
       * @description Telephone extension number
       * @example 123
       */
      ext?: string
    }
    /** @description Alert details */
    AlertChanges: {
      /**
       * Format: date
       * @description Date the alert became inactive
       * @example 2019-02-13
       */
      expiryDate?: string
      /** @description Alert comment */
      comment?: string
    }
    /** @description Attendance details.  This is used to update the attendance details of an offender */
    UpdateAttendance: {
      /**
       * @description Attendance outcome, possible values are the codes in the 'PS_PA_OC' reference domain.
       * @example ATT
       */
      eventOutcome: 'ABS' | 'ACCAB' | 'ATT' | 'CANC' | 'NREQ' | 'SUS' | 'UNACAB' | 'REST'
      /**
       * @description Possible values are the codes in the 'PERFORMANCE' reference domain, mandatory for eventOutcome 'ATT'.
       * @example ACCEPT
       */
      performance?: 'ACCEPT' | 'GOOD' | 'POOR' | 'STANDARD' | 'UNACCEPT'
      /**
       * @description Free text comment, maximum length 240 characters.
       * @example Turned up very late
       */
      outcomeComment?: string
    }
    /** @description set of booking and activity ids */
    BookingActivity: {
      /** Format: int64 */
      bookingId?: number
      /** Format: int64 */
      activityId?: number
    }
    /** @description Attendance details.  This is used to update the attendance details of multiple bookings */
    UpdateAttendanceBatch: {
      /**
       * @description Attendance outcome, possible values are the codes in the 'PS_PA_OC' reference domain.
       * @example ATT
       */
      eventOutcome: 'ABS' | 'ACCAB' | 'ATT' | 'CANC' | 'NREQ' | 'SUS' | 'UNACAB' | 'REST'
      /**
       * @description Possible values are the codes in the 'PERFORMANCE' reference domain, mandatory for eventOutcome 'ATT'.
       * @example ACCEPT
       */
      performance?: 'ACCEPT' | 'GOOD' | 'POOR' | 'STANDARD' | 'UNACCEPT'
      /**
       * @description Free text comment, maximum length 240 characters.
       * @example Turned up very late
       */
      outcomeComment?: string
      /** @description set of booking and activity ids */
      bookingActivities: components['schemas']['BookingActivity'][]
    }
    /** @description Update Agency Request */
    RequestToUpdateAgency: {
      /**
       * @description Agency description.
       * @example Moorland (HMP & YOI)
       */
      description: string
      /**
       * @description Long description of the agency
       * @example Moorland (HMP & YOI)
       */
      longDescription?: string
      /**
       * @description Agency type.  Reference domain is AGY_LOC_TYPE
       * @example INST
       */
      agencyType:
        | 'CRC'
        | 'POLSTN'
        | 'INST'
        | 'COMM'
        | 'APPR'
        | 'CRT'
        | 'POLICE'
        | 'IMDC'
        | 'TRN'
        | 'OUT'
        | 'YOT'
        | 'SCH'
        | 'STC'
        | 'HOST'
        | 'AIRPORT'
        | 'HSHOSP'
        | 'HOSPITAL'
        | 'PECS'
        | 'PAR'
        | 'PNP'
        | 'PSY'
      /**
       * @description Indicates the Agency is active.  Note: if set false, the current date will be the deactivation date
       * @example true
       */
      active?: boolean
      /**
       * @description Court Type.  Reference domain is JURISDICTION
       * @example CC
       */
      courtType: 'CACD' | 'CB' | 'CC' | 'CO' | 'DCM' | 'GCM' | 'IMM' | 'MC' | 'OTHER' | 'YC'
    }
    /** @description Update Address Request */
    RequestToUpdateAddress: {
      /**
       * @description Address Type. Note: Reference domain is ADDR_TYPE
       * @example BUS
       */
      addressType: string
      /**
       * @description Flat
       * @example 3B
       */
      flat?: string
      /**
       * @description Premise
       * @example Liverpool Prison
       */
      premise: string
      /**
       * @description Street
       * @example Slinn Street
       */
      street?: string
      /**
       * @description Locality
       * @example Brincliffe
       */
      locality?: string
      /**
       * @description Town/City. Note: Reference domain is CITY
       * @example Liverpool
       */
      town?: string
      /**
       * @description Postal Code
       * @example LI1 5TH
       */
      postalCode?: string
      /**
       * @description County. Note: Reference domain is COUNTY
       * @example HEREFORD
       */
      county?: string
      /**
       * @description Country. Note: Reference domain is COUNTRY
       * @example ENG
       */
      country?: string
      /**
       * @description Comment
       * @example This is a comment text
       */
      comment?: string
      /** @description Primary Address */
      primary: boolean
      /** @description No Fixed Address */
      noFixedAddress: boolean
      /**
       * Format: date
       * @description Date Added
       * @example 2005-05-12
       */
      startDate?: string
      /**
       * Format: date
       * @description Date ended
       * @example 2021-02-12
       */
      endDate?: string
    }
    /** @description Update Phone Request */
    RequestToUpdatePhone: {
      /** @description Telephone number */
      number: string
      /** @description Telephone type */
      type: string
      /** @description Telephone extension number */
      ext?: string
    }
    /** @description Transaction Details */
    CreateTransaction: {
      /**
       * @description Valid transaction type for the prison_id
       * @example CANT
       */
      type: 'CANT,REFND,PHONE,MRPR,MTDS,DTDS,CASHD,RELA,RELS'
      /**
       * @description Description of the Transaction
       * @example Canteen Purchase of £16.34
       */
      description?: string
      /**
       * Format: int64
       * @description Amount of transaction in pence, hence 1634 is £16.34
       * @example 1634
       */
      amount: number
      /**
       * @description Client Transaction Id
       * @example CL123212
       */
      client_transaction_id: string
      /**
       * @description A reference unique to the client making the post. Maximum size 64 characters, only alphabetic, numeric, '-' and '_' are allowed
       * @example CLIENT121131-0_11
       */
      client_unique_ref: string
    }
    /** @description Transaction Response */
    Transaction: {
      /**
       * @description ID of created transaction
       * @example 6179604-1
       */
      id: string
    }
    /** @description Transaction Details */
    StorePaymentRequest: {
      /**
       * @description Valid payment type for the prison
       * @example ADJ
       */
      type: 'A_EARN,ADJ'
      /**
       * @description Description of the payment
       * @example Adjustment
       */
      description?: string
      /**
       * Format: int64
       * @description Amount of the payment in pence, hence 1634 is £16.34
       * @example 1634
       */
      amount: number
      /**
       * @description Client transaction identifier
       * @example CL123212
       */
      client_transaction_id: string
    }
    /** @description Payment Response */
    PaymentResponse: {
      /**
       * @description Message returned from a payment
       * @example Payment accepted
       */
      message: string
    }
    /** @description Code Description */
    CodeDescription: {
      /** @description Code */
      code?: string
      /** @description Description */
      desc?: string
    }
    /** @description Transfer Response */
    Transfer: {
      transaction?: components['schemas']['Transaction']
      current_location?: components['schemas']['CodeDescription']
    }
    /** @description User Details */
    UserDetail: {
      /**
       * Format: int64
       * @description Staff Id
       * @example 231232
       */
      staffId: number
      /**
       * @description Username
       * @example DEMO_USER1
       */
      username: string
      /**
       * @description First Name
       * @example John
       */
      firstName: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName: string
      /**
       * Format: int64
       * @description Image Thumbnail Id
       * @example 2342341224
       */
      thumbnailId?: number
      /**
       * @description Current Active Caseload
       * @example MDI
       */
      activeCaseLoadId?: string
      /**
       * @description Status of the User Account
       * @example ACTIVE
       */
      accountStatus: 'ACTIVE' | 'INACT' | 'SUS' | 'CAREER' | 'MAT' | 'SAB' | 'SICK'
      /**
       * @description Date the user account was locked
       * @example 2021-07-05T10:35:17
       */
      lockDate: string
      /**
       * @description Date the user account has expired
       * @example 2021-07-05T10:35:17
       */
      expiryDate?: string
      /** @description The User account is locked */
      lockedFlag?: boolean
      /**
       * @description Indicates the user account has expired
       * @example true
       */
      expiredFlag?: boolean
      /**
       * @description Indicate if the account is active
       * @example true
       */
      active: boolean
    }
    /** @description Prisoner Schedule */
    PrisonerSchedule: {
      /** @description Offender number (e.g. NOMS Number) */
      offenderNo: string
      /**
       * Format: int64
       * @description Activity id if any. Used to attend or pay the event
       */
      eventId?: number
      /**
       * Format: int64
       * @description Booking id for offender
       */
      bookingId?: number
      /**
       * Format: int64
       * @description The number which (uniquely) identifies the internal location associated with the Scheduled Event (Prisoner Schedule)
       */
      locationId: number
      /** @description Offender first name */
      firstName: string
      /** @description Offender last name */
      lastName: string
      /** @description Offender cell */
      cellLocation: string
      /** @description Event code */
      event: string
      /** @description Event type, e.g. VISIT, APP, PRISON_ACT */
      eventType: string
      /** @description Description of event code */
      eventDescription: string
      /** @description Location of the event */
      eventLocation: string
      /**
       * Format: int64
       * @description Id of an internal event location
       */
      eventLocationId?: number
      /** @description The event's status. Includes 'CANC', meaning cancelled for 'VISIT' */
      eventStatus: string
      /** @description Comment */
      comment: string
      /**
       * @description Date and time at which event starts
       * @example 2021-07-05T10:35:17
       */
      startTime: string
      /**
       * @description Date and time at which event ends
       * @example 2021-07-05T10:35:17
       */
      endTime?: string
      /** @description Attendance, possible values are the codes in the 'PS_PA_OC' reference domain */
      eventOutcome?: string
      /** @description Possible values are the codes in the 'PERFORMANCE' reference domain */
      performance?: string
      /** @description No-pay reason */
      outcomeComment?: string
      /** @description Activity paid flag */
      paid?: boolean
      /** @description Amount paid per activity session in pounds */
      payRate?: number
      /** @description Activity excluded flag */
      excluded?: boolean
      /** @description Activity time slot */
      timeSlot?: 'AM' | 'PM' | 'ED'
      /** @description The code for the activity location */
      locationCode?: string
      /** @description Event scheduled has been suspended */
      suspended?: boolean
    }
    PrisonerActivitiesCount: {
      /** Format: int64 */
      total: number
      /** Format: int64 */
      suspended: number
      /** Format: int64 */
      notRecorded: number
    }
    /** @description Prisoner Search Criteria */
    PrisonerDetailSearchCriteria: {
      /** @description List of offender Numbers (NOMS ID) */
      offenderNos?: string[]
      /**
       * @description The first name of the offender.
       * @example John
       */
      firstName?: string
      /**
       * @description Offender's gender code (F - Female, M - Male, NK - Not Known or NS - Not Specified).
       * @example F
       */
      gender?: 'M' | 'F' | 'NK' | 'NS' | 'ALL'
      /**
       * @description The middle name(s) of the offender.
       * @example James
       */
      middleNames?: string
      /**
       * @description The last name of the offender.
       * @example Smith
       */
      lastName?: string
      /**
       * @description Offender's location filter (IN, OUT or ALL) - defaults to ALL.
       * @example ALL
       */
      location?: 'IN' | 'OUT' | 'ALL'
      /**
       * @description The offender's PNC (Police National Computer) number.
       * @example 123/1231
       */
      pncNumber?: string
      /**
       * @description The offender's CRO (Criminal Records Office) number.
       * @example 12312312
       */
      croNumber?: string
      /**
       * Format: date
       * @description The offender's date of birth. Cannot be used in conjunction with <i>dobFrom</i> or <i>dobTo</i>. Must be specified using YYYY-MM-DD format.
       * @example 2001-01-15
       */
      dob?: string
      /**
       * Format: date
       * @description Start date for offender date of birth search. If <i>dobTo</i> is not specified, an implicit <i>dobTo</i> value of <i>dobFrom</i> + 10 years will be applied. If <i>dobTo</i> is specified, it will be adjusted, if necessary, to ensure it is not more than 10 years after <i>dobFrom</i>. Cannot be used in conjunction with <i>dob</i>. Must be specified using YYYY-MM-DD format.
       * @example 1999-05-25
       */
      dobFrom?: string
      /**
       * Format: date
       * @description End date for offender date of birth search. If <i>dobFrom</i> is not specified, an implicit <i>dobFrom</i> value of <i>dobTo</i> - 10 years will be applied. Cannot be used in conjunction with <i>dob</i>. Must be specified using YYYY-MM-DD format.
       * @example 2005-12-31
       */
      dobTo?: string
      /**
       * Format: int32
       * @description Max Date Range, applied to <i>dobFrom</i> or <i>dobTo</i>, default is 10, max allowed is 10
       * @example 10
       */
      maxYearsRange?: number
      /** @description If true the result set should include a row for every matched alias.  If the request includes some combination of firstName, lastName and dateOfBirth then this will be a subset of the OFFENDERS records for one or more offenders. Otherwise it will be every OFFENDERS record for each match on the other search criteria. Default is false. */
      includeAliases?: boolean
      /** @description If <i>true</i>, the search will use partial, start-of-name matching of offender names (where provided). For example, if <i>lastName</i> criteria of 'AD' is specified, this will match an offender whose last name is 'ADAMS' but not an offender whose last name is 'HADAD'. This will typically increase the number of matching offenders found. This parameter can be used with any other search processing parameter (e.g. <i>prioritisedMatch</i> or <i>anyMatch</i>). */
      partialNameMatch?: boolean
      /** @description If <i>true</i>, offenders that match any of the specified criteria will be returned. The default search behaviour is to only return offenders that match <i>all</i> of the specified criteria. If the <i>prioritisedMatch</i> parameter is also set <i>true</i>, this parameter will only impact the behaviour of searching using offender name and date of birth criteria. */
      anyMatch?: boolean
      /** @description If <i>true</i>, search criteria prioritisation is used and searching/matching will stop as soon as one or more matching offenders are found. The criteria priority is:<br/><br/>1. <i>offenderNo</i><br/> 2. <i>pncNumber</i><br/>3. <i>croNumber</i><br/>4. <i>firstName</i>, <i>lastName</i>, <i>dob</i> <br/>5. <i>dobFrom</i>, <i>dobTo</i><br/><br/>As an example of how this works, if this parameter is set <i>true</i> and an <i>offenderNo</i> is specified and an offender having this offender number is found, searching will stop and that offender will be returned immediately. If no offender matching the specified <i>offenderNo</i> is found, the search will be repeated using the next priority criteria (<i>pncNumber</i>) and so on. Note that offender name and date of birth criteria have the same priority and will be used together to search for matching offenders. */
      prioritisedMatch?: boolean
    }
    /** @description Prisoner Details */
    PrisonerDetail: {
      /**
       * @description The prisoner's unique offender number (aka NOMS Number in the UK).
       * @example A0000AA
       */
      offenderNo: string
      /**
       * @description The prisoner's title.
       * @example Earl
       */
      title?: string
      /**
       * @description The prisoner's name suffix.
       * @example Mac
       */
      suffix?: string
      /**
       * @description The prisoner's first name.
       * @example Thorfinn
       */
      firstName: string
      /**
       * @description The prisoner's middle name(s).
       * @example Skull-splitter
       */
      middleNames?: string
      /**
       * @description The prisoner's last name.
       * @example Torf-Einarsson
       */
      lastName: string
      /**
       * Format: date
       * @description The prisoner's date of birth (in YYYY-MM-DD format).
       * @example 1960-02-29
       */
      dateOfBirth: string
      /**
       * @description The prisoner's gender.
       * @example Female
       */
      gender: string
      /**
       * @description The prisoner's gender code.
       * @example F
       */
      sexCode: string
      /**
       * @description The prisoner's nationality.
       * @example Scottish
       */
      nationalities?: string
      /**
       * @description Flag (Y or N) to indicate if prisoner is currently in prison.
       * @example N
       */
      currentlyInPrison: string
      /**
       * Format: int64
       * @description ID of prisoner's latest booking.
       * @example 1
       */
      latestBookingId?: number
      /**
       * @description Latest location ID of a prisoner (if in prison).
       * @example WRI
       */
      latestLocationId?: string
      /**
       * @description Name of the prison where the prisoner resides (if in prison).
       * @example Whitemoor (HMP)
       */
      latestLocation?: string
      /**
       * @description Name of the location where the prisoner resides (if in prison)
       * @example WRI-B-3-018
       */
      internalLocation?: string
      /**
       * @description The prisoner's PNC (Police National Computer) number.
       * @example 01/000000A
       */
      pncNumber?: string
      /**
       * @description The prisoner's CRO (Criminal Records Office) number.
       * @example 01/0001/01A
       */
      croNumber?: string
      /**
       * @description The prisoner's ethnicity.
       * @example White: British
       */
      ethnicity?: string
      /**
       * @description The prisoner's ethnicity code.
       * @example W1
       */
      ethnicityCode?: string
      /**
       * @description The prisoner's country of birth.
       * @example Norway
       */
      birthCountry?: string
      /**
       * @description The prisoner's religion.
       * @example Pagan
       */
      religion?: string
      /**
       * @description The prisoner's religion code.
       * @example PAG
       */
      religionCode?: string
      /**
       * @description Status code of prisoner's latest conviction.
       * @example Convicted
       */
      convictedStatus?: 'Convicted' | 'Remand'
      /**
       * @description Legal Status
       * @example REMAND
       */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
      /**
       * @description The prisoner's imprisonment status.
       * @example LIFE
       */
      imprisonmentStatus?: string
      /**
       * @description The prisoner's imprisonment status description.
       * @example Service Life Imprisonment
       */
      imprisonmentStatusDesc?: string
      /**
       * Format: date
       * @description Date prisoner was received into the prison.
       * @example 1980-01-01
       */
      receptionDate?: string
      /**
       * @description The prisoner's marital status.
       * @example Single
       */
      maritalStatus?: string
      /**
       * @description The prisoner's current working first name.
       * @example Thorfinn
       */
      currentWorkingFirstName: string
      /**
       * @description The prisoner's current working last name.
       * @example Torf-Einarsson
       */
      currentWorkingLastName: string
      /**
       * Format: date
       * @description The prisoner's current working date of birth (in YYYY-MM-DD format).
       * @example 1960-02-29
       */
      currentWorkingBirthDate: string
    }
    /** @description Represents the data required for creating a new prisoner */
    RequestToCreate: {
      /**
       * @description The offender's PNC (Police National Computer) number.
       * @example 03/11999M
       */
      pncNumber?: string
      /**
       * @description The offender's last name.
       * @example Mark
       */
      lastName: string
      /**
       * @description The offender's first name.
       * @example John
       */
      firstName: string
      /**
       * @description The offender's middle name.
       * @example Luke
       */
      middleName1?: string
      /**
       * @description An additional middle name for the offender.
       * @example Matthew
       */
      middleName2?: string
      /**
       * @description A code representing the offender's title (from TITLE reference domain).
       * @example MR
       */
      title?:
        | 'BR'
        | 'DAME'
        | 'DR'
        | 'FR'
        | 'IMAM'
        | 'LADY'
        | 'LORD'
        | 'MISS'
        | 'MR'
        | 'MRS'
        | 'MS'
        | 'RABBI'
        | 'REV'
        | 'SIR'
        | 'SR'
      /**
       * @description A code representing a suffix to apply to offender's name (from SUFFIX reference domain).
       * @example JR
       */
      suffix?: 'I' | 'II' | 'III' | 'IV' | 'IX' | 'V' | 'VI' | 'VII' | 'VIII' | 'JR' | 'SR'
      /**
       * Format: date
       * @description The offender's date of birth. Must be specified in YYYY-MM-DD format. Range allowed is 16-110 years
       * @example 1970-01-01
       */
      dateOfBirth: string
      /**
       * @description A code representing the offender's gender (from the SEX reference domain).
       * @example M
       */
      gender: 'M' | 'F' | 'NK' | 'NS' | 'REF'
      /**
       * @description A code representing the offender's ethnicity (from the ETHNICITY reference domain).
       * @example W1
       */
      ethnicity?:
        | 'A9'
        | 'B1'
        | 'B2'
        | 'B9'
        | 'M1'
        | 'M2'
        | 'M3'
        | 'M9'
        | 'NS'
        | 'O1'
        | 'O2'
        | 'O9'
        | 'W1'
        | 'W2'
        | 'W3'
        | 'W8'
        | 'W9'
      /** @description The offender's CRO (Criminal Records Office) number. */
      croNumber?: string
    }
    /** @description Represents the data required receiving a prisoner under a new booking */
    RequestForNewBooking: {
      /**
       * @description Received Prison ID
       * @example MDI
       */
      prisonId: string
      /**
       * @description The time the booking in occurred, if not supplied it will be the current time
       * @example 2021-07-05T10:35:17
       */
      bookingInTime: string
      /**
       * @description Where the prisoner has moved from (default OUT)
       * @example SHEFCC
       */
      fromLocationId?: string
      /**
       * @description Reason for in movement (e.g. Unconvicted Remand)
       * @example N
       */
      movementReasonCode: string
      /** @description Is this offender a youth */
      youthOffender?: boolean
      /**
       * @description Cell location where recalled prisoner should be housed, default will be reception
       * @example MDI-RECP
       */
      cellLocation?: string
      /**
       * @description Require imprisonment status (e.g Adult Imprisonment Without Option CJA03)
       * @example SENT03
       */
      imprisonmentStatus?: string
    }
    /** @description Offender Sentence Detail */
    OffenderSentenceDetail: {
      /**
       * Format: int64
       * @description Offender booking id.
       * @example 12341321
       */
      bookingId: number
      /**
       * @description Offender Unique Reference
       * @example A1000AA
       */
      offenderNo: string
      /**
       * @description First Name
       * @example John
       */
      firstName: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName: string
      /**
       * @description Agency Id
       * @example LEI
       */
      agencyLocationId: string
      /**
       * @description Is this the most recent active booking
       * @example true
       */
      mostRecentActiveBooking: boolean
      sentenceDetail?: components['schemas']['SentenceCalcDates']
      /**
       * Format: date
       * @description Offender date of birth.
       */
      dateOfBirth: string
      /** @description Agency Description */
      agencyLocationDesc: string
      /** @description Description of the location within the prison */
      internalLocationDesc: string
      /**
       * Format: int64
       * @description Identifier of facial image of offender.
       */
      facialImageId?: number
    }
    /** @description Home Detention Curfew information */
    HomeDetentionCurfew: {
      /**
       * @description HDC Checks passed flag
       * @example true
       */
      passed?: boolean
      /**
       * Format: date
       * @description HDC Checks passed date. ISO-8601 format. YYYY-MM-DD
       * @example 2018-12-31
       */
      checksPassedDate?: string
      /**
       * @description Approval status. Will be one of the 'HDC_APPROVE' reference codes
       * @example APPROVED
       */
      approvalStatus?: string
      /**
       * @description Refused reason. Will be one of the 'HDC_REJ_RSN' reference codes
       * @example UNDER_14DAYS
       */
      refusedReason?: string
      /**
       * Format: date
       * @description Approval status date. ISO-8601 format. YYYY-MM-DD
       * @example 2018-12-31
       */
      approvalStatusDate: string
      /**
       * Format: int64
       * @description Offender booking ID
       * @example 123
       */
      bookingId?: number
    }
    /** @description Offender Key Dates */
    OffenderKeyDates: {
      /**
       * Format: date
       * @description HDCED - date on which offender will be eligible for home detention curfew.
       * @example 2020-02-03
       */
      homeDetentionCurfewEligibilityDate?: string
      /**
       * Format: date
       * @description ETD - early term date for offender.
       * @example 2020-02-03
       */
      earlyTermDate?: string
      /**
       * Format: date
       * @description MTD - mid term date for offender.
       * @example 2020-02-03
       */
      midTermDate?: string
      /**
       * Format: date
       * @description LTD - late term date for offender.
       * @example 2020-02-03
       */
      lateTermDate?: string
      /**
       * Format: date
       * @description DPRRD - Detention training order post recall release date
       * @example 2020-02-03
       */
      dtoPostRecallReleaseDate?: string
      /**
       * Format: date
       * @description ARD - calculated automatic (unconditional) release date for offender.
       * @example 2020-02-03
       */
      automaticReleaseDate?: string
      /**
       * Format: date
       * @description CRD - calculated conditional release date for offender.
       * @example 2020-02-03
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description PED - date on which offender is eligible for parole.
       * @example 2020-02-03
       */
      paroleEligibilityDate?: string
      /**
       * Format: date
       * @description NPD - calculated non-parole date for offender (relating to the 1991 act).
       * @example 2020-02-03
       */
      nonParoleDate?: string
      /**
       * Format: date
       * @description LED - date on which offender licence expires.
       * @example 2020-02-03
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description PRRD - calculated post-recall release date for offender.
       * @example 2020-02-03
       */
      postRecallReleaseDate?: string
      /**
       * Format: date
       * @description SED - date on which sentence expires.
       * @example 2020-02-03
       */
      sentenceExpiryDate?: string
      /**
       * Format: date
       * @description TUSED - top-up supervision expiry date for offender.
       * @example 2020-02-03
       */
      topupSupervisionExpiryDate?: string
      /**
       * Format: date
       * @description Effective sentence end date.
       * @example 2020-02-03
       */
      effectiveSentenceEndDate: string
      /**
       * @description Sentence length in the format 00 years/00 months/00 days.
       * @example 11/00/00
       */
      sentenceLength: string
    }
    /** @description Update Offender Dates Request */
    RequestToUpdateOffenderDates: {
      /**
       * Format: uuid
       * @description UUID of the calculation performed by CRD.
       */
      calculationUuid: string
      /**
       * @description Timestamp when the calculation was performed
       * @example 2021-07-05T10:35:17
       */
      calculationDateTime?: string
      /** @description DPS/NOMIS user who submitted the calculated dates. */
      submissionUser: string
      keyDates: components['schemas']['OffenderKeyDates']
    }
    /** @description AssessmentRating */
    AssessmentClassification: {
      /**
       * @description Offender number (e.g. NOMS Number).
       * @example GV09876N
       */
      offenderNo: string
      /**
       * @description The current classification code. This will not have a value if np assessment has been completed
       * @example STANDARD
       */
      classificationCode?: string
      /**
       * Format: date
       * @description The date that the current classification was made. This will not have a value if np assessment has been completed
       * @example 2018-02-11
       */
      classificationDate?: string
    }
    /** @description Prisoner with categorisation data */
    OffenderCategorise: {
      /** @description Display Prisoner Number */
      offenderNo: string
      /** Format: int64 */
      bookingId: number
      /** @description Prisoner First Name */
      firstName: string
      /** @description Prisoner Last Name */
      lastName: string
      /**
       * Format: date
       * @description Categorisation date if any
       */
      assessmentDate?: string
      /**
       * Format: date
       * @description Date categorisation was approved if any
       */
      approvalDate?: string
      /**
       * Format: int32
       * @description Sequence number within booking
       */
      assessmentSeq?: number
      /**
       * Format: int64
       * @description assessment type
       */
      assessmentTypeId?: null
      /** @description Categorisation status */
      assessStatus?: 'P' | 'A' | 'I'
      /** @description Categoriser First Name */
      categoriserFirstName?: string
      /** @description Categoriser Last Name */
      categoriserLastName?: string
      /** @description Approver First Name if any */
      approverFirstName?: string
      /** @description Approver Last Name if any */
      approverLastName?: string
      /** @description Categorisation */
      category?: string
      /**
       * Format: date
       * @description Next Review Date - for recategorisations
       */
      nextReviewDate?: string
      /** @description Where in the categorisation workflow the prisoner is */
      status: 'UNCATEGORISED' | 'AWAITING_APPROVAL'
    }
    /** @description Categorisation details */
    CategorisationDetail: {
      /**
       * Format: int64
       * @description Booking Id
       */
      bookingId: number
      /** @description Category code */
      category: string
      /** @description The assessment committee code (reference code in domain 'ASSESS_COMM') */
      committee: string
      /**
       * Format: date
       * @description Next review date for recategorisation, defaults to current date + 6 months, if not provided
       */
      nextReviewDate?: string
      /** @description Initial categorisation comment */
      comment?: string
      /** @description The prison to be transferred to */
      placementAgencyId: string
    }
    /** @description Maps an offence to a schedule */
    OffenceToScheduleMappingDto: {
      /**
       * @description Offence code
       * @example COML025
       */
      offenceCode: string
      /**
       * @description Schedule type
       * @example SCHEDULE_15
       */
      schedule:
        | 'SCHEDULE_13'
        | 'SCHEDULE_15'
        | 'SCHEDULE_15_ATTRACTS_LIFE'
        | 'SCHEDULE_17A_PART_1'
        | 'SCHEDULE_17A_PART_2'
        | 'SCHEDULE_19ZA'
    }
    /** @description Create external movement */
    CreateExternalMovement: {
      /**
       * Format: int64
       * @description Booking id
       * @example 1
       */
      bookingId: number
      /**
       * @description Agency location moving from
       * @example MDI
       */
      fromAgencyId: string
      /**
       * @description Agency location moving to
       * @example OUT
       */
      toAgencyId: string
      /**
       * @description Date time of movement
       * @example 2021-07-05T10:35:17
       */
      movementTime: string
      /**
       * @description Type of movement
       * @example TRN
       */
      movementType: string
      /**
       * @description Movement reason
       * @example SEC
       */
      movementReason: string
      /**
       * @description Direction code
       * @example OUT
       */
      directionCode: 'IN' | 'OUT' | 'IN' | 'OUT'
    }
    /** @description Movement time */
    LocalTime: {
      /** Format: int32 */
      hour?: number
      /** Format: int32 */
      minute?: number
      /** Format: int32 */
      second?: number
      /** Format: int32 */
      nano?: number
    }
    /** @description Prisoner Movement */
    OffenderMovement: {
      /** @description Display Prisoner Number (UK is NOMS ID) */
      offenderNo: string
      /** Format: int64 */
      bookingId: number
      /** Format: date */
      dateOfBirth: string
      firstName: string
      middleName?: string
      lastName: string
      /** @description Agency travelling from */
      fromAgency: string
      /** @description Description for Agency travelling from */
      fromAgencyDescription: string
      /** @description Agency travelling to */
      toAgency: string
      /** @description Description for Agency travelling to */
      toAgencyDescription: string
      /**
       * @description ADM (admission), CRT (court), REL (release), TAP (temporary absence) or TRN (transfer)
       * @example ADM
       */
      movementType: 'ADM' | 'CRT' | 'REL' | 'TAP' | 'TRN'
      /** @description Description of the movement type */
      movementTypeDescription: string
      /** @description Reason code for the movement */
      movementReason: string
      /** @description Description of the movement reason */
      movementReasonDescription: string
      /** @description IN or OUT */
      directionCode: string
      movementTime: components['schemas']['LocalTime']
      /**
       * Format: date
       * @description Movement date
       */
      movementDate: string
    }
    /** @description Prisoner Custody Status */
    Movement: {
      /** @description Display Prisoner Number (UK is NOMS ID) */
      offenderNo: string
      /**
       * @description Timestamp when the external movement record was created
       * @example 2021-07-05T10:35:17
       */
      createDateTime: string
      /** @description Agency travelling from */
      fromAgency: string
      /** @description Description of the agency travelling from */
      fromAgencyDescription: string
      /** @description Agency travelling to */
      toAgency: string
      /** @description Description of the agency travelling to */
      toAgencyDescription: string
      /** @description City offender was received from */
      fromCity?: string
      /** @description City offender was sent to */
      toCity?: string
      /**
       * @description ADM (admission), CRT (court), REL (release), TAP (temporary absence) or TRN (transfer)
       * @example ADM
       */
      movementType: 'ADM' | 'CRT' | 'REL' | 'TAP' | 'TRN'
      /** @description Description of the movement type */
      movementTypeDescription: string
      /** @description IN or OUT */
      directionCode: string
      /**
       * Format: date
       * @description Movement date
       */
      movementDate: string
      movementTime: components['schemas']['LocalTime']
      /** @description Description of movement reason */
      movementReason: string
      /** @description Comment */
      commentText?: string
    }
    /** @description Key worker allocation details */
    KeyWorkerAllocationDetail: {
      /**
       * Format: int64
       * @description Offender Booking Id
       */
      bookingId: number
      /** @description Offender Unique Reference */
      offenderNo: string
      /** @description First Name */
      firstName: string
      /** @description Middle Name(s) */
      middleNames?: string
      /** @description Last Name */
      lastName: string
      /**
       * Format: int64
       * @description The key worker's Staff Id
       */
      staffId: number
      /** @description Agency Id */
      agencyId: string
      /**
       * @description Date and time of the allocation
       * @example 2021-07-05T10:35:17
       */
      assigned: string
      /** @description Description of the location within the prison */
      internalLocationDesc: string
    }
    /** @description Offender Key Worker record representation (to facilitate data migration) */
    OffenderKeyWorker: {
      /** @description Offender Unique Reference */
      offenderNo: string
      /**
       * Format: int64
       * @description The key worker's Staff Id
       */
      staffId: number
      /** @description Agency Id */
      agencyId: string
      /**
       * @description Date and time allocation was assigned
       * @example 2021-07-05T10:35:17
       */
      assigned: string
      /**
       * @description Date and time allocation expired
       * @example 2021-07-05T10:35:17
       */
      expired?: string
      /** @description Username of user who processed allocation */
      userId: string
      /** @description Y */
      active: string
      /**
       * @description Date and time allocation record was created
       * @example 2021-07-05T10:35:17
       */
      created: string
      /** @description Username of user who created allocation record */
      createdBy: string
      /**
       * @description Date and time allocation record was last modified
       * @example 2021-07-05T10:35:17
       */
      modified?: string
      /** @description Username of user who last modified allocation record */
      modifiedBy?: string
    }
    /** @description Image Detail */
    ImageDetail: {
      /**
       * Format: int64
       * @description Image ID
       */
      imageId: number
      /**
       * Format: date
       * @description Date of image capture
       */
      captureDate: string
      /** @description Image view information */
      imageView: string
      /** @description Orientation of the image */
      imageOrientation: string
      /** @description Image Type */
      imageType: string
      /**
       * Format: int64
       * @description Object ID
       */
      objectId?: number
    }
    /** @description Transfer to Savings Transaction */
    TransferTransaction: {
      /**
       * Format: int64
       * @description Amount of transaction in pence, hence 1634 is £16.34
       * @example 1634
       */
      amount: number
      /**
       * @description Description of the Transaction
       * @example Canteen Purchase of £16.34
       */
      description: string
      /**
       * @description Client Transaction Id
       * @example CL123212
       */
      client_transaction_id: string
      /**
       * @description A reference unique to the client making the post. Maximum size 64 characters, only alphabetic, numeric, '-' and '_' are allowed
       * @example CLIENT121131-0_11
       */
      client_unique_ref: string
    }
    /** @description A new sentence from a digital warrant */
    Sentence: {
      /** @description The type of sentence */
      sentenceType?: string
      /** @description The category of sentence */
      sentenceCategory?: string
      /**
       * Format: date
       * @description The date of sentencing
       */
      sentenceDate?: string
      /**
       * Format: int32
       * @description Days sentence to
       */
      days?: number
      /**
       * Format: int32
       * @description Weeks sentence to
       */
      weeks?: number
      /**
       * Format: int32
       * @description Months sentence to
       */
      months?: number
      /**
       * Format: int32
       * @description Years sentence to
       */
      years?: number
      /**
       * Format: int64
       * @description The id of the offender charge
       */
      offenderChargeId?: number
      /**
       * Format: int64
       * @description The id of the court case
       */
      courtCaseId?: number
    }
    /** @description A new offender court case details entered from a digital warrant. */
    CourtCase: {
      /**
       * Format: date
       * @description The begin date
       * @example 2019-12-01
       */
      beginDate?: string
      /** @description The location of the court case */
      agencyId?: string
      /**
       * @description The case type
       * @example Adult
       */
      caseType?: string
      /**
       * @description The case information number
       * @example TD20177010
       */
      caseInfoNumber?: string
      /** @description Type of court hearing */
      hearingType?: string
    }
    /** @description A new offence from a digital warrant */
    Charge: {
      /** @description The offence code of the office in the court case */
      offenceCode?: string
      /** @description The offence statute of the office in the court case */
      offenceStatue?: string
      /**
       * Format: date
       * @description The date of the offence
       */
      offenceDate?: string
      /**
       * Format: date
       * @description The offence end date
       */
      offenceEndDate?: string
      /** @description Was the verdict guilty or not guilty */
      guilty?: boolean
      /**
       * Format: int64
       * @description The id of the court case
       */
      courtCaseId?: number
    }
    /** @description An adjustment to a calculation */
    Adjustment: {
      /**
       * Format: int32
       * @description The sequence of sentence
       */
      sequence?: number
      /** @description The type of adjustment */
      type?: string
      /**
       * Format: date
       * @description The from date of the adjustment
       */
      from?: string
      /**
       * Format: date
       * @description The to date of the adjustment
       */
      to?: string
      /**
       * Format: int32
       * @description Days of the adjustment
       */
      days?: number
    }
    /** @description Case Note Type Usage Request */
    CaseNoteUsageRequest: {
      /**
       * Format: date
       * @description Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered.  If not defined then the numMonth before the current date, unless a toDate is defined when it will be numMonths before toDate
       * @example 2018-11-01
       */
      fromDate?: string
      /**
       * Format: date
       * @description Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered. If not defined then the current date will be used, unless a fromDate is defined when it will be numMonths after fromDate
       * @example 2018-12-01
       */
      toDate?: string
      /**
       * Format: int32
       * @description Number of month to look forward (if fromDate only defined), or back (if toDate only defined). Default is 1 month
       * @example 2
       */
      numMonths?: number
      /** @description a list of offender numbers to search. */
      offenderNos: string[]
      /**
       * Format: int32
       * @description staff Id to use in search (optional).
       * @example 223423
       */
      staffId?: number
      /**
       * @description Case note type.
       * @example KA
       */
      type?: string
      /**
       * @description Case note sub-type.
       * @example KS
       */
      subType?: string
      /**
       * @description Optional agency Id to filter by
       * @example MDI
       */
      agencyId?: string
    }
    /** @description Case Note Type Usage */
    CaseNoteUsage: {
      /**
       * @description Offender No
       * @example ZWE12A
       */
      offenderNo: string
      /**
       * @description Case Note Type
       * @example KA
       */
      caseNoteType: string
      /**
       * @description Case Note Sub Type
       * @example KS
       */
      caseNoteSubType: string
      /**
       * Format: int32
       * @description Number of case notes of this type/subtype
       * @example 5
       */
      numCaseNotes: number
      /**
       * @description Last case note of this type
       * @example 2021-07-05T10:35:17
       */
      latestCaseNote: string
    }
    /** @description Case Note Type Staff Usage Request */
    CaseNoteStaffUsageRequest: {
      /** @description a list of staff numbers to search. */
      staffIds: number[]
      /**
       * Format: int32
       * @description Number of month to look forward (if fromDate only defined), or back (if toDate only defined). Default is 1 month
       */
      numMonths?: number
      /**
       * Format: date
       * @description Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered.  If not defined then the numMonth before the current date, unless a toDate is defined when it will be numMonths before toDate
       */
      fromDate?: string
      /**
       * Format: date
       * @description Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered. If not defined then the current date will be used, unless a fromDate is defined when it will be numMonths after fromDate
       */
      toDate?: string
      /** @description Case note type. */
      type?: string
      /** @description Case note sub-type. */
      subType?: string
    }
    /** @description Case Note Type Staff Usage */
    CaseNoteStaffUsage: {
      /**
       * Format: int32
       * @description Staff ID
       * @example 2341232
       */
      staffId: number
      /**
       * @description Case Note Type
       * @example KA
       */
      caseNoteType: string
      /**
       * @description Case Note Sub Type
       * @example KS
       */
      caseNoteSubType: string
      /**
       * Format: int32
       * @description Number of case notes of this type/subtype
       * @example 5
       */
      numCaseNotes: number
      /**
       * @description Last case note of this type
       * @example 2021-07-05T10:35:17
       */
      latestCaseNote: string
    }
    /** @description The person details and their relationship to the offender */
    OffenderRelationship: {
      /**
       * Format: int64
       * @description id of the person contact
       */
      personId?: number
      /** @description unique external Id */
      externalRef?: string
      /** @description Surname */
      lastName: string
      /** @description First Name */
      firstName: string
      /** @description Relationship to inmate (e.g. COM or POM, etc.) */
      relationshipType: string
    }
    /** @description Contact */
    Contact: {
      /**
       * @description Last name of the contact
       * @example SMITH
       */
      lastName: string
      /**
       * @description First Name
       * @example JOHN
       */
      firstName: string
      /**
       * @description Middle Names
       * @example MARK
       */
      middleName?: string
      /**
       * @description Contact type
       * @example O
       */
      contactType: string
      /**
       * @description Contact type text
       * @example Official
       */
      contactTypeDescription?: string
      /**
       * @description Relationship to prisoner
       * @example RO
       */
      relationship: string
      /**
       * @description Relationship text
       * @example Responsible Officer
       */
      relationshipDescription?: string
      /**
       * @description Comments
       * @example Some additional information
       */
      commentText?: string
      /**
       * @description Is an emergency contact
       * @example true
       */
      emergencyContact: boolean
      /** @description Indicates that the contact is Next of Kin Type */
      nextOfKin: boolean
      /**
       * Format: int64
       * @description ID of the relationship (internal)
       * @example 10466277
       */
      relationshipId?: number
      /**
       * Format: int64
       * @description id of the person contact
       * @example 5871791
       */
      personId?: number
      /**
       * @description Active indicator flag.
       * @example true
       */
      activeFlag: true | false
      /**
       * Format: date
       * @description Date made inactive
       * @example 2019-01-31
       */
      expiryDate?: string
      /**
       * @description Approved Visitor
       * @example true
       */
      approvedVisitorFlag: true | false
      /** @description Can be contacted */
      canBeContactedFlag: true | false
      /**
       * @description Aware of charges against prisoner
       * @example true
       */
      awareOfChargesFlag: true | false
      /**
       * Format: int64
       * @description Link to root offender ID
       * @example 5871791
       */
      contactRootOffenderId?: number
      /**
       * Format: int64
       * @description Offender Booking Id for this contact
       * @example 2468081
       */
      bookingId: number
      /**
       * @description Date time the contact was created
       * @example 2021-07-05T10:35:17
       */
      createDateTime: string
    }
    /** @description The prison to prison move to be scheduled for the offender booking. */
    SchedulePrisonToPrisonMove: {
      /**
       * @description The prison (agency code) to be moved from.
       * @example LEI
       */
      fromPrisonLocation: string
      /**
       * @description The prison (agency code) to be moved to.
       * @example PVI
       */
      toPrisonLocation: string
      /**
       * @description The escort type of the move.
       * @example PECS
       */
      escortType: string
      /**
       * @description The date and time of the move in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      scheduledMoveDateTime: string
    }
    /** @description Represents the data for a scheduled prison to prison move. */
    ScheduledPrisonToPrisonMove: {
      /**
       * Format: int64
       * @description The identifier for the scheduled prison to prison move.
       * @example 123456789
       */
      id?: number
      /**
       * @description The date and start time of the move in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      scheduledMoveDateTime?: string
      fromPrisonLocation?: components['schemas']['Agency']
      toPrisonLocation?: components['schemas']['Agency']
    }
    /** @description The prison to court hearing to be scheduled for the offender booking. */
    PrisonToCourtHearing: {
      /**
       * @description The prison (agency code) where the offender will be moved from.
       * @example LEI
       */
      fromPrisonLocation: string
      /**
       * @description The court (agency code) where the offender will moved to.
       * @example LEEDCC
       */
      toCourtLocation: string
      /**
       * @description The future date and time of the court hearing in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      courtHearingDateTime: string
      /**
       * @description Any comments related to the court case.
       * @example Restricted access to parking level.
       */
      comments?: string
    }
    /** @description Personal Care Need */
    CreatePersonalCareNeed: {
      /**
       * @description Problem Code
       * @example ACCU9
       */
      problemCode: string
      /**
       * @description Problem Status
       * @example ON
       */
      problemStatus: string
      /**
       * @description Comment text
       * @example Preg, acc under 9mths
       */
      commentText: string
      /**
       * Format: date
       * @description Start Date
       * @example 2010-06-21
       */
      startDate: string
      /**
       * Format: date
       * @description End Date
       * @example 2010-06-21
       */
      endDate?: string
    }
    /** @description Creation details for a new appointment */
    NewAppointment: {
      /** @description Corresponds to the scheduled event subType */
      appointmentType: string
      /**
       * Format: int64
       * @description Location at which the appointment takes place.
       */
      locationId: number
      /**
       * @description Date and time at which event starts
       * @example 2021-07-05T10:35:17
       */
      startTime: string
      /**
       * @description Date and time at which event ends
       * @example 2021-07-05T10:35:17
       */
      endTime?: string
      /** @description Details of appointment */
      comment?: string
    }
    /** @description Scheduled Event */
    ScheduledEvent: {
      /**
       * Format: int64
       * @description Offender booking id
       */
      bookingId: number
      /** @description Class of event */
      eventClass: string
      /**
       * Format: int64
       * @description Activity id if any. Used to attend or pay an activity.
       */
      eventId?: number
      /** @description Status of event */
      eventStatus: string
      /** @description Type of scheduled event (as a code) */
      eventType: string
      /** @description Description of scheduled event type */
      eventTypeDesc: string
      /** @description Sub type (or reason) of scheduled event (as a code) */
      eventSubType: string
      /** @description Description of scheduled event sub type */
      eventSubTypeDesc: string
      /**
       * Format: date
       * @description Date on which event occurs
       */
      eventDate: string
      /**
       * @description Date and time at which event starts
       * @example 2021-07-05T10:35:17
       */
      startTime?: string
      /**
       * @description Date and time at which event ends
       * @example 2021-07-05T10:35:17
       */
      endTime?: string
      /** @description Location at which event takes place (could be an internal location, agency or external address). */
      eventLocation?: string
      /**
       * Format: int64
       * @description Id of an internal event location
       */
      eventLocationId?: number
      /**
       * @description The agency ID for the booked internal location
       * @example WWI
       */
      agencyId?: string
      /** @description Code identifying underlying source of event data */
      eventSource: string
      /** @description Source-specific code for the type or nature of the event */
      eventSourceCode?: string
      /** @description Source-specific description for type or nature of the event */
      eventSourceDesc?: string
      /** @description Activity attendance, possible values are the codes in the 'PS_PA_OC' reference domain. */
      eventOutcome?: string
      /** @description Activity performance, possible values are the codes in the 'PERFORMANCE' reference domain. */
      performance?: string
      /** @description Activity no-pay reason. */
      outcomeComment?: string
      /** @description Activity paid flag. */
      paid?: boolean
      /** @description Amount paid per activity session in pounds */
      payRate?: number
      /** @description The code for the activity location */
      locationCode?: string
      /** @description Staff member who created the appointment */
      createUserId?: string
    }
    /** @description Alert details */
    CreateAlert: {
      /**
       * @description Code identifying type of alert
       * @example X
       */
      alertType: string
      /**
       * @description Code identifying the sub type of alert
       * @example XEL
       */
      alertCode: string
      /**
       * @description Free Text Comment
       * @example has a large poster on cell wall
       */
      comment: string
      /**
       * Format: date
       * @description Date the alert became effective
       * @example 2019-02-13
       */
      alertDate: string
    }
    AlertCreated: {
      /** Format: int64 */
      alertId?: number
    }
    /** @description Proven Adjudication Summary for offender */
    ProvenAdjudicationSummary: {
      /**
       * Format: int64
       * @description Offender Booking Id
       */
      bookingId: number
      /**
       * Format: int32
       * @description Number of proven adjudications
       */
      provenAdjudicationCount: number
    }
    /** @description Offender basic detail */
    InmateBasicDetails: {
      /**
       * Format: int64
       * @description Offender Booking Id
       * @example 432132
       */
      bookingId: number
      /** @description Booking Number */
      bookingNo: string
      /**
       * @description Offender Unique Reference
       * @example A1234AA
       */
      offenderNo: string
      /** @description First Name */
      firstName: string
      /** @description Middle Name(s) */
      middleName?: string
      /** @description Last Name */
      lastName: string
      /** @description Identifier of agency to which the prisoner is associated. */
      agencyId: string
      /**
       * Format: int64
       * @description Identifier of living unit (e.g. cell) that prisoner is assigned to.
       */
      assignedLivingUnitId?: number
      /**
       * @description Description of living unit (e.g. cell) that offender is assigned to.
       * @example MDI-1-1-3
       */
      assignedLivingUnitDesc?: string
      /**
       * Format: date
       * @description Date of Birth of prisoner
       * @example 1970-03-15
       */
      dateOfBirth: string
    }
    /** @description Personal Care Needs */
    PersonalCareNeeds: {
      /** @description Offender No */
      offenderNo?: string
      /** @description Personal Care Needs */
      personalCareNeeds?: components['schemas']['PersonalCareNeed'][]
    }
    PersonalCareCounterDto: {
      /** @description Offender number */
      offenderNo: string
      /**
       * Format: int32
       * @description Number of health problems records in set time
       */
      size: number
    }
    /** @description Offence Details */
    OffenceDetail: {
      /**
       * Format: int64
       * @description Prisoner booking id
       * @example 1123456
       */
      bookingId: number
      /** @description Description of offence */
      offenceDescription: string
      /**
       * @description Reference Code
       * @example RR84070
       */
      offenceCode: string
      /**
       * @description Statute code
       * @example RR84
       */
      statuteCode: string
    }
    /** @description Default values to be applied when creating each appointment */
    AppointmentDefaults: {
      /**
       * @description The scheduled event subType
       * @example ACTI
       */
      appointmentType: string
      /**
       * Format: int64
       * @description The identifier of the appointments' Location. The location must be situated in the requestor's case load.
       * @example 25
       */
      locationId: number
      /**
       * @description The date and time at which the appointments start. ISO 8601 Date-time format. startTime must be in the future.
       * @example 2021-07-05T10:35:17
       */
      startTime: string
      /**
       * @description The date and time at which the appointments end. ISO 8601 Date-time format. endTime, if present, must be later than startTime.
       * @example 2021-07-05T10:35:17
       */
      endTime?: string
      /**
       * @description A comment that applies to all the appointments in this request.
       * @example Please provide helpful supporting text when it applies to all the appointments specified by this request.
       */
      comment?: string
    }
    /** @description Detail for creating an appointment for a particular bookingId where values should differ from the defaults */
    AppointmentDetails: {
      /**
       * Format: int64
       * @description The Booking id of the offender for whom the appointment is to be created.
       * @example 123456
       */
      bookingId: number
      /**
       * @description A replacement for the default startTime. ISO 8601 date-time format.  This value, when present, must be in the future.
       * @example 2021-07-05T10:35:17
       */
      startTime?: string
      /**
       * @description A replacement for the default endTime. ISO 8601 date-time format.  This value, when present, must be later than the default startTime, or the startTime in this object if it is defined.
       * @example 2021-07-05T10:35:17
       */
      endTime?: string
      /**
       * @description The Appointment's details. When present this value replaces the default comment.
       * @example Please provide helpful supporting text relevant to this particular appointment when the default comment is not suitable.
       */
      comment?: string
    }
    /** @description Details for creating appointments in bulk */
    AppointmentsToCreate: {
      appointmentDefaults: components['schemas']['AppointmentDefaults']
      /** @description The details for creating each appointment.  A Missing value falls back to the default value if present. Mandatory, but an empty list is accepted. */
      appointments: components['schemas']['AppointmentDetails'][]
      repeat?: components['schemas']['Repeat']
    }
    /** @description If present specifies the number of times to repeat the appointments and the period of the repeat */
    Repeat: {
      /**
       * @description The period at which the appointment should repeat.
       * @example WEEKLY
       */
      repeatPeriod:
        | 'DAILY'
        | 'WEEKDAYS'
        | 'WEEKLY'
        | 'FORTNIGHTLY'
        | 'MONTHLY'
        | 'DAILY'
        | 'WEEKDAYS'
        | 'WEEKLY'
        | 'FORTNIGHTLY'
        | 'MONTHLY'
      /**
       * Format: int32
       * @description The total number of appointments. Must be greater than 0
       */
      count: number
    }
    /** @description The details of an appointment that has just been created */
    CreatedAppointmentDetails: {
      /**
       * Format: int64
       * @description The Booking id of the offender for whom the appointment was created.
       * @example 123456
       */
      bookingId: number
      /**
       * @description The start time of the appointment.
       * @example 2021-07-05T10:35:17
       */
      startTime?: string
      /**
       * @description The end time of the appointment.
       * @example 2021-07-05T10:35:17
       */
      endTime?: string
      /** Format: int64 */
      appointmentEventId?: number
      /**
       * @description The scheduled event subType
       * @example ACTI
       */
      appointmentType?: string
      /**
       * Format: int64
       * @description The identifier of the appointments' Location. The location must be situated in the requestor's case load.
       * @example 25
       */
      locationId: number
    }
    /** @description Create Agency Request */
    RequestToCreateAgency: {
      /**
       * @description Agency identifier.
       * @example MDI
       */
      agencyId: string
      /**
       * @description Agency description.
       * @example Moorland (HMP & YOI)
       */
      description: string
      /**
       * @description Long description of the agency
       * @example Moorland (HMP & YOI)
       */
      longDescription?: string
      /**
       * @description Agency type.  Reference domain is AGY_LOC_TYPE
       * @example INST
       */
      agencyType:
        | 'CRC'
        | 'POLSTN'
        | 'INST'
        | 'COMM'
        | 'APPR'
        | 'CRT'
        | 'POLICE'
        | 'IMDC'
        | 'TRN'
        | 'OUT'
        | 'YOT'
        | 'SCH'
        | 'STC'
        | 'HOST'
        | 'AIRPORT'
        | 'HSHOSP'
        | 'HOSPITAL'
        | 'PECS'
        | 'PAR'
        | 'PNP'
        | 'PSY'
      /**
       * @description Court Type.  Reference domain is JURISDICTION
       * @example CC
       */
      courtType: 'CACD' | 'CB' | 'CC' | 'CO' | 'DCM' | 'GCM' | 'IMM' | 'MC' | 'OTHER' | 'YC'
      /**
       * @description Indicates the Agency is active. Note: if set false, the current date will be the deactivation date
       * @example true
       */
      active?: boolean
    }
    /** @description Visit slots Details */
    VisitSlotCapacity: {
      /**
       * @description Time
       * @example 2019-01-01T13:30/16:00
       */
      time?: string
      /**
       * Format: int64
       * @description Capacity
       * @example 402
       */
      capacity?: number
      /**
       * Format: int64
       * @description Max Groups
       * @example 999
       */
      max_groups?: number
      /**
       * Format: int64
       * @description Max Adults
       * @example 999
       */
      max_adults?: number
      /**
       * Format: int64
       * @description Groups Booked
       * @example 5
       */
      groups_booked?: number
      /**
       * Format: int64
       * @description Visitors Booked
       * @example 6
       */
      visitors_booked?: number
      /**
       * Format: int64
       * @description Adults Booked
       * @example 7
       */
      adults_booked?: number
    }
    /** @description Visit slots with capacity */
    VisitSlots: {
      /** @description List of visit slots with capacity */
      slots?: components['schemas']['VisitSlotCapacity'][]
    }
    /** @description Account Transaction */
    AccountTransaction: {
      /**
       * @description Transaction ID
       * @example 204564839-3
       */
      id: string
      type: components['schemas']['CodeDescription']
      /**
       * @description Transaction description
       * @example Transfer In Regular from caseload PVR
       */
      description: string
      /**
       * Format: int64
       * @description Amount in pence
       * @example 12345
       */
      amount: number
      /**
       * Format: date
       * @description Date of the transaction
       * @example 2016-10-21
       */
      date: string
    }
    /** @description Hold Response */
    Hold: {
      /**
       * @description Description
       * @example Hold via API
       */
      description?: string
      /**
       * Format: int64
       * @description Amount in pence
       * @example 150
       */
      amount?: number
      /**
       * Format: int64
       * @description Hold Number
       * @example 6185835
       */
      hold_number?: number
      /**
       * @description Client unique reference
       * @example jerkincrocus
       */
      client_unique_ref?: string
      /**
       * @description Reference number
       * @example TEST0075
       */
      reference_no?: string
      /**
       * Format: date
       * @description Entry date
       * @example 2017-06-23
       */
      entry_date?: string
      /**
       * Format: date
       * @description Hold until date
       * @example 2017-07-07
       */
      hold_until_date?: string
    }
    /** @description Account Balance */
    AccountBalance: {
      /**
       * Format: int64
       * @description Spends balance
       * @example 5678
       */
      spends?: number
      /**
       * Format: int64
       * @description Saving balance
       * @example 12344
       */
      savings?: number
      /**
       * Format: int64
       * @description Cash balance
       * @example 13565
       */
      cash?: number
    }
    /** @description Account Transactions */
    AccountTransactions: {
      /** @description List of account transactions */
      transactions?: components['schemas']['AccountTransaction'][]
    }
    /** @description Live Roll */
    LiveRoll: {
      /** @description Noms Ids */
      noms_ids?: string[]
    }
    /** @description Date Unavailability Reasons */
    UnavailabilityReason: {
      /**
       * @description External Movement
       * @example true
       */
      external_movement?: boolean
      /** @description Existing Visits */
      existing_visits?: components['schemas']['Visit'][]
      /**
       * @description Out of Vo
       * @example true
       */
      out_of_vo?: boolean
      /**
       * @description Banned
       * @example true
       */
      banned?: boolean
    }
    /** @description Visit Details */
    Visit: {
      /**
       * Format: int64
       * @description Id
       * @example 123456
       */
      id?: number
      /**
       * @description Slot
       * @example 2019-01-01T13:30/16:00
       */
      slot?: string
    }
    /** @description Contact List */
    ContactList: {
      /** @description Available Dates */
      contacts?: components['schemas']['ContactPerson'][]
    }
    /** @description Contact Person */
    ContactPerson: {
      /**
       * Format: int64
       * @description ID
       * @example 1234567
       */
      id?: number
      /**
       * @description Given Name
       * @example JENNIFER
       */
      given_name?: string
      /**
       * @description Middle Names
       * @example ESMERALADA JANE
       */
      middle_names?: string
      /**
       * @description Last Name
       * @example HALLIBUT
       */
      surname?: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1970-01-01
       */
      date_of_birth?: string
      gender?: components['schemas']['CodeDescription']
      'relationship type'?: components['schemas']['CodeDescription']
      'contact type'?: components['schemas']['CodeDescription']
      /** @description Approved Visitor */
      'approved visitor'?: boolean
      /** @description Active */
      active?: boolean
      /** @description Restrictions */
      restrictions?: components['schemas']['VisitRestriction'][]
    }
    /** @description Visit Restriction */
    VisitRestriction: {
      type?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Effective Date
       * @example 2019-01-01
       */
      effective_date?: string
      /**
       * Format: date
       * @description Expiry Date
       * @example 2019-01-01
       */
      expiry_date?: string
      /** @description Comment Text */
      comment_text?: string
    }
    /** @description Available Dates */
    AvailableDates: {
      /** @description Available Dates */
      dates?: string[]
    }
    /** @description Language */
    Language: {
      preferred_spoken?: components['schemas']['CodeDescription']
      /**
       * @description whether an interpreter is required
       * @example true
       */
      interpreter_required?: boolean
    }
    /** @description Offender */
    Offender: {
      /**
       * @description Given Name
       * @example JENNIFER
       */
      given_name?: string
      /**
       * @description Middle Names
       * @example ESMERALADA JANE
       */
      middle_names?: string
      /**
       * @description Last Name
       * @example HALLIBUT
       */
      surname?: string
      /**
       * @description Title
       * @example MR
       */
      title?: string
      /** @description Suffix */
      suffix?: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1970-01-01
       */
      date_of_birth?: string
      /** @description List of offender’s aliases */
      aliases?: components['schemas']['OffenderAlias'][]
      gender?: components['schemas']['CodeDescription']
      /** @description Nationalities */
      nationalities?: string
      religion?: components['schemas']['CodeDescription']
      ethnicity?: components['schemas']['CodeDescription']
      language?: components['schemas']['Language']
      csra?: components['schemas']['CodeDescription']
      /**
       * @description indicates whether the offender has been convicted or is on remand
       * @example true
       */
      convicted?: boolean
      /**
       * @description PNC Number
       * @example 96/346527V
       */
      pnc_number?: string
      /**
       * @description CRO Number
       * @example ADF567890
       */
      cro_number?: string
      imprisonment_status?: components['schemas']['CodeDescription']
      iep_level?: components['schemas']['CodeDescription']
      diet?: components['schemas']['CodeDescription']
      security_category?: components['schemas']['CodeDescription']
    }
    /** @description Offender Alias */
    OffenderAlias: {
      /**
       * @description Given Name
       * @example JENNIFER
       */
      given_name?: string
      /**
       * @description Middle Names
       * @example ESMERALADA JANE
       */
      middle_names?: string
      /**
       * @description Surname
       * @example HALLIBUT
       */
      surname?: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1970-01-01
       */
      date_of_birth?: string
    }
    /** @description Offender Event */
    Event: {
      /**
       * @description Type of event
       * @example IEP_CHANGED
       */
      type: string
      /**
       * Format: int64
       * @description Unique indentifier for event
       * @example 21
       */
      id: number
      /**
       * @description Offender Noms Id
       * @example A1417AE
       */
      noms_id: string
      /**
       * @description Prison ID
       * @example BMI
       */
      prison_id: string
      /**
       * @description Date and time the event occurred
       * @example 2021-07-05T10:35:17
       */
      timestamp: string
      eventData?: string
    }
    /** @description Location Details */
    Location: {
      /**
       * Format: int64
       * @description Location identifier.
       */
      locationId: number
      /** @description Location type. */
      locationType: string
      /** @description Location description. */
      description: string
      /** @description What events this room can be used for. */
      locationUsage?: string
      /** @description Identifier of Agency this location is associated with. */
      agencyId: string
      /**
       * Format: int64
       * @description Identifier of this location's parent location.
       */
      parentLocationId?: number
      /**
       * Format: int32
       * @description Current occupancy of location.
       */
      currentOccupancy?: number
      /** @description Location prefix. Defines search prefix that will constrain search to this location and its subordinate locations. */
      locationPrefix?: string
      /**
       * Format: int32
       * @description Operational capacity of the location.
       */
      operationalCapacity?: number
      /** @description User-friendly location description. */
      userDescription?: string
      internalLocationCode?: string
    }
    /** @description Prisoner Photo */
    Image: {
      /**
       * @description Base64 Encoded JPEG data
       * @example <base64_encoded_jpeg_data>
       */
      image?: string
    }
    /** @description Offender Booking */
    Booking: {
      location?: components['schemas']['Location']
      /**
       * @description Bookings
       * @example A12313
       */
      booking_no: string
      /**
       * Format: date
       * @description Start Date of Booking
       * @example 2017-02-04
       */
      booking_started: string
      /**
       * Format: date
       * @description End date of Booking
       * @example 2019-06-04
       */
      booking_ended?: string
      /**
       * @description Booking Active?
       * @example true
       */
      booking_active: boolean
      /**
       * Format: date
       * @description Release Date
       * @example 2019-02-04
       */
      release_date?: string
      /** @description Legal Cases */
      legal_cases?: components['schemas']['LegalCase'][]
    }
    /** @description Bookings */
    Bookings: {
      /** @description Bookings */
      bookings?: components['schemas']['Booking'][]
    }
    /** @description Legal Case */
    LegalCase: {
      /**
       * @description Case Information Number
       * @example 1254232
       */
      case_info_number?: string
      /**
       * @description Case Active
       * @example true
       */
      case_active?: boolean
      /**
       * Format: date
       * @description Case Started Date
       * @example 2019-01-17
       */
      case_started?: string
      court?: components['schemas']['CodeDescription']
      legal_case_type?: components['schemas']['CodeDescription']
      /** @description Charges */
      charges?: components['schemas']['Charge'][]
    }
    /** @description Offender Alert */
    AlertV1: {
      alert_type: components['schemas']['CodeDescription']
      alert_sub_type: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date the alert became effective
       * @example 2019-02-13
       */
      alert_date: string
      /**
       * Format: date
       * @description Alert Type
       * @example 2019-04-15
       */
      expiry_date?: string
      /**
       * @description ACTIVE or INACTIVE (Inactive alerts will have a expiry date of today or earlier
       * @example ACTIVE
       */
      status?: 'ACTIVE,INACTIVE'
      /**
       * @description Free Text Comment
       * @example has a large poster on cell wall
       */
      comment?: string
    }
    /** @description Alerts */
    Alerts: {
      /** @description Alerts */
      alerts?: components['schemas']['AlertV1'][]
    }
    /** @description Events */
    Events: {
      /** @description Events */
      events?: components['schemas']['Event'][]
    }
    /** @description Active Offender */
    ActiveOffender: {
      /**
       * @description found
       * @example true
       */
      found?: boolean
      offender?: components['schemas']['OffenderId']
    }
    /** @description offender ID */
    OffenderId: {
      /**
       * Format: int64
       * @description ID
       * @example 1234567
       */
      id?: number
    }
    /** @description User Role */
    UserRole: {
      /**
       * Format: int64
       * @description Role Id
       */
      roleId: number
      /** @description code for this role */
      roleCode: string
      /** @description Full text description of the role type */
      roleName: string
      /** @description role code of the parent role */
      parentRoleCode?: string
      /** @description caseload that this role belongs to, (NOMIS only) */
      caseloadId?: string
    }
    /** @description Staff Details */
    StaffDetail: {
      /**
       * Format: int64
       * @description Unique identifier for staff member.
       * @example 423142
       */
      staffId: number
      /**
       * @description Staff member's first name.
       * @example JOHN
       */
      firstName: string
      /**
       * @description Staff member's last name.
       * @example SMITH
       */
      lastName: string
      /**
       * @description Status of staff member.
       * @example ACTIVE
       */
      status: 'ACTIVE' | 'INACTIVE'
      /**
       * Format: int64
       * @description Identifier for staff member image.
       * @example 231232
       */
      thumbnailId?: number
      /**
       * @description Gender of Staff Member
       * @example M
       */
      gender?: 'M' | 'F' | 'NK' | 'NS' | 'REF'
      /**
       * Format: date
       * @description Date of Birth of Staff Member
       * @example 1970-01-02
       */
      dateOfBirth?: string
    }
    /** @description Staff Role */
    StaffRole: {
      /** @description A code that defines staff member's role at agency. */
      role: string
      /** @description Description of staff member's role at agency. */
      roleDescription?: string
    }
    /** @description Staff Details with position and role */
    StaffLocationRole: {
      /**
       * Format: int64
       * @description Unique identifier for staff member.
       * @example 242342
       */
      staffId: number
      /**
       * @description Staff member's first name.
       * @example JOHN
       */
      firstName: string
      /**
       * @description Staff member's last name.
       * @example SMITH
       */
      lastName: string
      /**
       * @description Status of staff member.
       * @example ACTIVE
       */
      status: 'ACTIVE' | 'INACTIVE'
      /**
       * Format: int64
       * @description Identifier for staff member image.
       * @example 2342334
       */
      thumbnailId?: number
      /**
       * @description Gender of Staff Member
       * @example M
       */
      gender?: 'M' | 'F' | 'NK' | 'NS' | 'REF'
      /**
       * Format: date
       * @description Date of Birth of Staff Member
       * @example 1970-01-02
       */
      dateOfBirth?: string
      /**
       * @description Agency at which staff member is performing role.
       * @example LEI
       */
      agencyId: string
      /**
       * @description Agency description.
       * @example HMP Leeds
       */
      agencyDescription?: string
      /**
       * Format: date
       * @description Date from which staff member is actively performing role.
       * @example 2019-02-05
       */
      fromDate: string
      /**
       * Format: date
       * @description Date on which staff member stops actively performing role.
       * @example 2019-03-25
       */
      toDate?: string
      /**
       * @description A code that defines staff member's position at agency.
       * @example PRO
       */
      position: string
      /**
       * @description Description of staff member's position at agency.
       * @example Prison Officer
       */
      positionDescription?: string
      /**
       * @description A code that defines staff member's role at agency.
       * @example KW
       */
      role: string
      /**
       * @description Description of staff member's role at agency.
       * @example Key Worker
       */
      roleDescription?: string
      /**
       * @description A code the defines staff member's schedule type.
       * @example FT
       */
      scheduleType?: string
      /**
       * @description Description of staff member's schedule type.
       * @example Full Time
       */
      scheduleTypeDescription?: string
      /**
       * @description Number of hours worked per week by staff member.
       * @example 30
       */
      hoursPerWeek?: number
    }
    /** @description Scheduled appointment */
    ScheduledAppointmentDto: {
      /**
       * Format: int64
       * @description Appointment id
       */
      id?: number
      /** @description Offender number (e.g. NOMS Number) */
      offenderNo?: string
      /** @description Offender first name */
      firstName?: string
      /** @description Offender last name */
      lastName?: string
      /**
       * Format: date
       * @description Date the appointment is scheduled
       */
      date?: string
      /**
       * @description Date and time at which appointment starts
       * @example 2021-07-05T10:35:17
       */
      startTime?: string
      /**
       * @description Date and time at which appointment ends
       * @example 2021-07-05T10:35:17
       */
      endTime?: string
      /** @description Description of appointment type */
      appointmentTypeDescription?: string
      /** @description Appointment code */
      appointmentTypeCode?: string
      /** @description Description of location the appointment is held */
      locationDescription?: string
      /**
       * Format: int64
       * @description Id of location the appointment is held
       */
      locationId?: number
      /** @description Staff member who created the appointment */
      createUserId?: string
      /** @description Agency the appointment belongs to */
      agencyId?: string
    }
    /** @description Reference Domain */
    ReferenceDomain: {
      /** @description Reference domain name */
      domain: string
      /** @description Reference domain description. */
      description: string
      /** @description Reference domain status. */
      domainStatus: string
      /** @description Reference domain owner. */
      ownerCode: string
      /** @description Application that uses reference domain. */
      applnCode: string
      /** @description Parent domain for reference domain. */
      parentDomain?: string
    }
    /** @description Questionnaire */
    Questionnaire: {
      /**
       * @description Code to identify this questionnaire
       * @example ASSAULTS
       */
      code: string
      /**
       * Format: int64
       * @description ID internal of this Questionnaire
       * @example 123412
       */
      questionnaireId: number
      /** @description List of Questions (with Answers) for this Questionnaire */
      questions: components['schemas']['QuestionnaireQuestion'][]
    }
    /** @description Questionnaire Answer */
    QuestionnaireAnswer: {
      /**
       * Format: int64
       * @description ID for this Answer
       */
      questionnaireAnsId: number
      /**
       * Format: int32
       * @example 1
       */
      answerSeq: number
      /** @example YES */
      answerDesc: string
      /**
       * Format: int32
       * @example 1
       */
      answerListSeq: number
      /** @example true */
      answerActiveFlag: boolean
      /** @example 2021-07-05T10:35:17 */
      answerExpiryDate: string
      dateRequiredFlag: boolean
      commentRequiredFlag: boolean
    }
    /** @description Questionnaire Question */
    QuestionnaireQuestion: {
      /** Format: int64 */
      questionnaireQueId: number
      /** Format: int32 */
      questionSeq: number
      questionDesc: string
      /** Format: int32 */
      questionListSeq: number
      questionActiveFlag: boolean
      /** @example 2021-07-05T10:35:17 */
      questionExpiryDate: string
      multipleAnswerFlag: boolean
      /** Format: int64 */
      nextQuestionnaireQueId: number
      answers: components['schemas']['QuestionnaireAnswer'][]
    }
    /** @description Prisoner Information */
    PrisonerInformation: {
      /**
       * @description Offender Identifier
       * @example A1234AA
       */
      nomsId: string
      /**
       * @description Establishment Code for prisoner
       * @example MDI
       */
      establishmentCode: string
      /**
       * Format: int64
       * @description Booking Id (Internal)
       * @example 1231232
       */
      bookingId: number
      /**
       * @description Given Name 1
       * @example John
       */
      givenName1: string
      /**
       * @description Given Name 2
       * @example Luke
       */
      givenName2?: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName: string
      /**
       * @description Requested Name
       * @example Dave
       */
      requestedName?: string
      /**
       * Format: date
       * @description Date of Birth
       * @example 1970-05-01
       */
      dateOfBirth: string
      /**
       * @description Gender
       * @example Male
       */
      gender: string
      /**
       * @description Indicated that is English speaking
       * @example true
       */
      englishSpeaking: boolean
      /**
       * @description Level 1 Location Unit Code
       * @example A
       */
      unitCode1?: string
      /**
       * @description Level 2 Location Unit Code
       * @example 2
       */
      unitCode2?: string
      /**
       * @description Level 3 Location Unit Code
       * @example 003
       */
      unitCode3?: string
      /**
       * Format: date
       * @description Date Prisoner booking was initial made
       * @example 2017-05-01
       */
      bookingBeginDate?: string
      /**
       * Format: date
       * @description Date of admission into this prison
       * @example 2019-06-01
       */
      admissionDate?: string
      /**
       * Format: date
       * @description Confirmed, actual, approved, provisional or calculated release date for offender, according to offender release date algorithm.<h3>Algorithm</h3><ul><li>If there is a confirmed release date, the offender release date is the confirmed release date.</li><li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li><li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li></ul>
       * @example 2021-04-12
       */
      releaseDate?: string
      /**
       * @description Category of this prisoner
       * @example C
       */
      categoryCode?: string
      /**
       * @description Status of prisoner in community
       * @example ACTIVE IN
       */
      communityStatus: 'ACTIVE IN' | 'ACTIVE OUT'
      /**
       * @description Legal Status
       * @example REMAND
       */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
      /**
       * @description Establishment Name for prisoner
       * @example Moorland
       */
      establishmentName: string
    }
    PagePrisonerInformation: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['PrisonerInformation'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      /** Format: int32 */
      pageNumber?: number
      paged?: boolean
      unpaged?: boolean
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description PersonIdentifier */
    PersonIdentifier: {
      /** @description The identifier type */
      identifierType: string
      /** @description The most recent identifier value of that type. */
      identifierValue: string
    }
    /** @description Offender transaction details */
    OffenderTransactionHistoryDto: {
      /**
       * Format: int64
       * @description Offender Id
       * @example 1
       */
      offenderId?: number
      /**
       * Format: int64
       * @description Transaction Id
       * @example 1
       */
      transactionId?: number
      /**
       * Format: int64
       * @description Transaction Sequence
       * @example 1
       */
      transactionEntrySequence?: number
      /**
       * Format: date
       * @description Transaction Date
       * @example 2020-12-11
       */
      entryDate?: string
      /** @description Transaction Type */
      transactionType?: string
      /**
       * @description Transaction Description
       * @example some textual description here
       */
      entryDescription?: string
      /** @description Transaction Reference Number */
      referenceNumber?: string
      /**
       * @description Currency of these amounts.
       * @example GBP
       */
      currency: string
      /**
       * Format: int64
       * @description Transaction Amount
       * @example 60
       */
      penceAmount?: number
      /**
       * @description Offender Sub Account
       * @example savings,spends,cash
       */
      accountType?: string
      /**
       * @description Posting type. Denotes the direction of money moving in or out of the account
       * @example CR,DR
       */
      postingType?: string
      /**
       * @description Offender number
       * @example G6123VU
       */
      offenderNo?: string
      /**
       * @description The place the transaction took place
       * @example MDI
       */
      agencyId?: string
      /** @description List of related transaction details */
      relatedOffenderTransactions?: components['schemas']['RelatedTransactionDetails'][]
      /**
       * Format: int64
       * @description Balance at a point in time
       */
      currentBalance?: number
      /** @description Indicates that the amount has been cleared from holding */
      holdingCleared?: boolean
      /**
       * @description Creation date time
       * @example 2021-07-05T10:35:17
       */
      createDateTime?: string
    }
    /** @description Offender transaction drill down details */
    RelatedTransactionDetails: {
      /**
       * Format: int64
       * @description Transaction details id
       * @example 1
       */
      id?: number
      /**
       * Format: int64
       * @description Transaction Id
       * @example 1
       */
      transactionId?: number
      /**
       * Format: int64
       * @description Transaction Sequence
       * @example 1
       */
      transactionEntrySequence?: number
      /**
       * Format: date
       * @description Calendar date the payment was processed
       * @example 2020-10-12
       */
      calendarDate?: string
      /**
       * @description Pay type code
       * @example UNEMPLOYED,SESSION,LTSICK,STSICK,MATERNAL,RETIRED,HOSPITAL
       */
      payTypeCode?: string
      /**
       * Format: int64
       * @description Event id the payment is associated with
       * @example 1
       */
      eventId?: number
      /**
       * Format: int64
       * @description Payment amount in pence
       * @example 100
       */
      payAmount?: number
      /**
       * Format: int64
       * @description Piece work amount in pence
       * @example 250
       */
      pieceWork?: number
      /**
       * Format: int64
       * @description Bonus payment in pence
       * @example 55
       */
      bonusPay?: number
      /**
       * Format: int64
       * @description Balance at a point in time
       */
      currentBalance?: number
      /**
       * @description Reason for payment
       * @example Cleaner HB1 PM
       */
      paymentDescription?: string
    }
    /** @description A movement IN and OUT range */
    MovementDate: {
      reasonInToPrison?: string
      /** @example 2021-07-05T10:35:17 */
      dateInToPrison?: string
      inwardType?: string
      reasonOutOfPrison?: string
      /** @example 2021-07-05T10:35:17 */
      dateOutOfPrison?: string
      outwardType?: string
    }
    /** @description A period of time in prison */
    PrisonPeriod: {
      bookNumber?: string
      /** Format: int64 */
      bookingId?: number
      /** @example 2021-07-05T10:35:17 */
      entryDate?: string
      /** @example 2021-07-05T10:35:17 */
      releaseDate?: string
      movementDates?: components['schemas']['MovementDate'][]
      prisons?: string[]
    }
    /** @description Prisoners time in prison summary */
    PrisonerInPrisonSummary: {
      /**
       * @description Prisoner Identifier
       * @example A1234AA
       */
      prisonerNumber: string
      /** @description List of date when prisoner was in prison */
      prisonPeriod?: components['schemas']['PrisonPeriod'][]
    }
    /** @description Offender restriction */
    OffenderRestriction: {
      /**
       * Format: int64
       * @description restriction id
       */
      restrictionId: number
      /** @description Restriction comment text */
      comment?: string
      /** @description code of restriction type */
      restrictionType: string
      /** @description description of restriction type */
      restrictionTypeDescription: string
      /**
       * Format: date
       * @description Date from which the restrictions applies
       * @example 1980-01-01
       */
      startDate: string
      /**
       * Format: date
       * @description Date restriction applies to, or indefinitely if null
       * @example 1980-01-01
       */
      expiryDate?: string
      /** @description true if restriction is within the start date and optional expiry date range */
      active: boolean
    }
    /** @description Offender restrictions */
    OffenderRestrictions: {
      /**
       * Format: int64
       * @description Booking id for offender
       */
      bookingId?: number
      /** @description Offender restrictions */
      offenderRestrictions?: components['schemas']['OffenderRestriction'][]
    }
    /** @description Offender non-association */
    OffenderNonAssociation: {
      /**
       * @description The offenders number
       * @example G0135GA
       */
      offenderNo: string
      /**
       * @description The offenders first name
       * @example Joseph
       */
      firstName: string
      /**
       * @description The offenders last name
       * @example Bloggs
       */
      lastName: string
      /**
       * @description The non-association reason code
       * @example PER
       */
      reasonCode: string
      /**
       * @description The non-association reason description
       * @example Perpetrator
       */
      reasonDescription: string
      /**
       * @description Description of the agency (e.g. prison) the offender is assigned to.
       * @example Pentonville (PVI)
       */
      agencyDescription: string
      /**
       * @description Description of living unit (e.g. cell) the offender is assigned to.
       * @example PVI-1-2-4
       */
      assignedLivingUnitDescription: string
      /**
       * Format: int64
       * @description Id of living unit (e.g. cell) the offender is assigned to.
       * @example 123
       */
      assignedLivingUnitId: number
    }
    /** @description Offender non-association detail */
    OffenderNonAssociationDetail: {
      /**
       * @description The non-association reason code
       * @example VIC
       */
      reasonCode: string
      /**
       * @description The non-association reason description
       * @example Victim
       */
      reasonDescription: string
      /**
       * @description The non-association type code
       * @example WING
       */
      typeCode: string
      /**
       * @description The non-association type description
       * @example Do Not Locate on Same Wing
       */
      typeDescription: string
      /**
       * @description Date and time the mom-association is effective from. In Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      effectiveDate: string
      /**
       * @description Date and time the mom-association expires. In Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      expiryDate?: string
      /** @description The person who authorised the non-association (free text). */
      authorisedBy?: string
      /** @description Additional free text comments related to the non-association. */
      comments?: string
      offenderNonAssociation: components['schemas']['OffenderNonAssociation']
    }
    /** @description Offender non-association details */
    OffenderNonAssociationDetails: {
      /**
       * @description The offenders number
       * @example G9109UD
       */
      offenderNo: string
      /**
       * @description The offenders first name
       * @example Fred
       */
      firstName: string
      /**
       * @description The offenders last name
       * @example Bloggs
       */
      lastName: string
      /**
       * @description Description of the agency (e.g. prison) the offender is assigned to.
       * @example Moorland (HMP & YOI)
       */
      agencyDescription: string
      /**
       * @description Description of living unit (e.g. cell) the offender is assigned to.
       * @example MDI-1-1-3
       */
      assignedLivingUnitDescription: string
      /** @description Offender non-association details */
      nonAssociations?: components['schemas']['OffenderNonAssociationDetail'][]
      /**
       * Format: int64
       * @description Id of living unit (e.g. cell) the offender is assigned to.
       * @example 123
       */
      assignedLivingUnitId: number
    }
    /** @description Military Record */
    MilitaryRecord: {
      /**
       * @description War zone code
       * @example AFG
       */
      warZoneCode?: string
      /**
       * @description War zone description
       * @example Afghanistan
       */
      warZoneDescription?: string
      /**
       * Format: date
       * @description Start date
       * @example 2000-01-01
       */
      startDate: string
      /**
       * Format: date
       * @description End date
       * @example 2020-10-17
       */
      endDate?: string
      /**
       * @description Military discharge code
       * @example DIS
       */
      militaryDischargeCode?: string
      /**
       * @description Military discharge description
       * @example Dishonourable
       */
      militaryDischargeDescription?: string
      /**
       * @description Military branch code
       * @example ARM
       */
      militaryBranchCode: string
      /**
       * @description Military branch description
       * @example Army
       */
      militaryBranchDescription: string
      /**
       * @description Description
       * @example Some description
       */
      description?: string
      /**
       * @description The unit number
       * @example 255 TACP Battery
       */
      unitNumber?: string
      /**
       * @description Enlistment location
       * @example Sheffield
       */
      enlistmentLocation?: string
      /**
       * @description Discharge location
       * @example Manchester
       */
      dischargeLocation?: string
      /** @description Selective services flag */
      selectiveServicesFlag: boolean
      /**
       * @description Military rank code
       * @example LCPL_RMA
       */
      militaryRankCode?: string
      /**
       * @description Military rank description
       * @example Lance Corporal  (Royal Marines)
       */
      militaryRankDescription?: string
      /**
       * @description Service number
       * @example 25232301
       */
      serviceNumber?: string
      /**
       * @description Disciplinary action code
       * @example CM
       */
      disciplinaryActionCode?: string
      /**
       * @description Disciplinary action description
       * @example Court Martial
       */
      disciplinaryActionDescription?: string
    }
    /** @description Military Records */
    MilitaryRecords: {
      /** @description Military Records */
      militaryRecords?: components['schemas']['MilitaryRecord'][]
    }
    /** @description Incident Case */
    IncidentCase: {
      /**
       * Format: int64
       * @description Incident Case ID
       * @example 2131231
       */
      incidentCaseId: number
      /**
       * @description Title of the case
       * @example Assault on staff member
       */
      incidentTitle: string
      /**
       * @description Type of incident
       * @example ASSAULT
       */
      incidentType:
        | 'MISC'
        | 'ASSAULT'
        | 'FINDS1'
        | 'DISORDER'
        | 'KEY_LOCK'
        | 'ROOF_CLIMB'
        | 'DEATH_NI'
        | 'REL_ERROR'
        | 'FINDS'
        | 'FIRE'
        | 'DAMAGE'
        | 'FOOD_REF'
        | 'BOMB'
        | 'ATT_ESC_E'
        | 'ESCAPE_ESC'
        | 'DRONE'
        | 'TRF3'
        | 'ATT_ESCAPE'
        | 'BREACH'
        | 'ESCAPE_EST'
        | 'FIND'
        | 'TRF2'
        | 'FIND1'
        | 'BARRICADE'
        | 'HOSTAGE'
        | 'SELF_HARM'
        | 'DRUGS'
        | 'TOOL_LOSS'
        | 'RADIO_COMP'
        | 'FIREARM_ETC'
        | 'CON_INDISC'
        | 'KEY_LOCKNEW'
        | 'CLOSE_DOWN'
        | 'DEATH'
        | 'ABSCOND'
        | 'TRF'
        | 'MOBILES'
      /**
       * @description Details about the case
       * @example There was a big fight
       */
      incidentDetails?: string
      /**
       * Format: date
       * @description Date the incident took place
       * @example 2018-02-10
       */
      incidentDate: string
      /**
       * @description Time when incident occurred
       * @example 2021-07-05T10:35:17
       */
      incidentTime: string
      /**
       * Format: int64
       * @description Staff ID who created report
       * @example 2131231
       */
      reportedStaffId: number
      /**
       * Format: date
       * @description Date when incident reported
       * @example 2018-02-11
       */
      reportDate: string
      /**
       * @description Time incident reported
       * @example 2021-07-05T10:35:17
       */
      reportTime: string
      /**
       * @description Current Status of Incident.  Note:
       * AWAN = Awaiting Analysis
       * INAN = In Analysis
       * INREQ = Information Required
       * INAME =Information Amended
       * CLOSE = Closed
       * PIU = Post Incident Update
       * IUP = Incident Updated
       * DUP = Duplicate (Created In Error)
       * @example CLOSE
       */
      incidentStatus: 'CLOSE' | 'DUP' | 'AWAN' | 'INAN' | 'INREQ' | 'INAME' | 'PIU' | 'IUP'
      /**
       * @description Agency where incident happened
       * @example MDI
       */
      agencyId?: string
      /**
       * @description Is the response completed?
       * @example true
       */
      responseLockedFlag?: boolean
      /** @description Question And Answer Responses */
      responses?: components['schemas']['IncidentResponse'][]
      /** @description Parties Involved in case */
      parties?: components['schemas']['IncidentParty'][]
    }
    /** @description Incident Party */
    IncidentParty: {
      /**
       * Format: int64
       * @description Booking Id of offender involved
       * @example 1241232
       */
      bookingId: number
      /**
       * Format: int64
       * @description Sequence or each party member
       * @example 1
       */
      partySeq: number
      /**
       * Format: int64
       * @description Staff Member ID (optional)
       * @example 1534133
       */
      staffId?: number
      /**
       * Format: int64
       * @description Person (non-staff) ID (optional)
       * @example 544233
       */
      personId?: number
      /**
       * @description Role in the Incident
       * @example ASSIAL
       */
      participationRole: string
      /**
       * @description Outcome Code
       * @example POR
       */
      outcomeCode: string
      /**
       * @description Additional Comments
       * @example Some additional Information
       */
      commentText: string
      /**
       * Format: int64
       * @description Incident Case ID
       * @example 12431243
       */
      incidentCaseId: number
    }
    /** @description Incident Reponses */
    IncidentResponse: {
      /**
       * @description The Question
       * @example Was it a violent assault?
       */
      question: string
      /**
       * @description The Answer to the Question
       * @example YES
       */
      answer: string
      /**
       * Format: int32
       * @description Sequence of presented Questions
       * @example 2131231
       */
      questionSeq: number
      /**
       * Format: int64
       * @description ID for Questionnaire Question
       * @example 983431
       */
      questionnaireQueId: number
      /**
       * Format: int64
       * @description ID for Questionnaire Answer
       * @example 983434
       */
      questionnaireAnsId: number
      /**
       * @description Date response was recorded
       * @example 2021-07-05T10:35:17
       */
      responseDate?: string
      /**
       * @description Additional comments for the response to the question
       * @example The knife was in his pocket
       */
      responseCommentText?: string
      /**
       * Format: int64
       * @description Staff Id recording comment
       * @example 123123
       */
      recordStaffId?: number
    }
    /** @description Damage obligation for an offender */
    OffenderDamageObligationModel: {
      /**
       * Format: int64
       * @description Identifier of damage obligation
       * @example 1
       */
      id?: number
      /**
       * @description Offender number
       * @example G4346UT
       */
      offenderNo?: string
      /**
       * @description Reference number
       * @example 841177/1, A841821/1, 842371
       */
      referenceNumber?: string
      /**
       * @description The start date time when the damage obligation started
       * @example 2021-07-05T10:35:17
       */
      startDateTime?: string
      /**
       * @description The end date time when the damage obligation ended
       * @example 2021-07-05T10:35:17
       */
      endDateTime?: string
      /**
       * @description Prison the damages occurred
       * @example MDI
       */
      prisonId?: string
      /**
       * @description Original amount to pay
       * @example 50
       */
      amountToPay?: number
      /**
       * @description Amount paid
       * @example 10
       */
      amountPaid?: number
      /**
       * @description Status
       * @example ACTIVE
       */
      status?: string
      /**
       * @description Comment
       * @example Damages to canteen furniture
       */
      comment?: string
      /**
       * @description Currency of these amounts.
       * @example GBP
       */
      currency: string
    }
    /** @description Offender damage obligation response */
    OffenderDamageObligationResponse: {
      /** @description List of offender damage obligations */
      damageObligations?: components['schemas']['OffenderDamageObligationModel'][]
    }
    /** @description Offender Contact */
    OffenderContact: {
      /**
       * @description Last name of the contact
       * @example Smith
       */
      lastName: string
      /**
       * @description First Name
       * @example John
       */
      firstName: string
      /**
       * @description Middle Names
       * @example Mark
       */
      middleName?: string
      /**
       * Format: date
       * @description date of birth
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /**
       * @description Contact type
       * @example O
       */
      contactType: string
      /**
       * @description Contact type text
       * @example Official
       */
      contactTypeDescription?: string
      /**
       * @description Relationship to prisoner
       * @example RO
       */
      relationshipCode: string
      /**
       * @description Relationship text
       * @example Responsible Officer
       */
      relationshipDescription?: string
      /**
       * @description Comments
       * @example Some additional information
       */
      commentText?: string
      /**
       * @description Is an emergency contact
       * @example true
       */
      emergencyContact: boolean
      /** @description Indicates that the contact is Next of Kin Type */
      nextOfKin: boolean
      /**
       * Format: int64
       * @description id of the person
       * @example 5871791
       */
      personId?: number
      /**
       * @description Approved Visitor
       * @example true
       */
      approvedVisitor: boolean
      /**
       * Format: int64
       * @description Offender Booking Id for this contact
       * @example 2468081
       */
      bookingId: number
      /** @description List of emails associated with the contact */
      emails?: components['schemas']['Email'][]
      /** @description List of restrictions associated with the contact */
      restrictions?: components['schemas']['VisitorRestriction'][]
      /**
       * @description active contact
       * @example true
       */
      active: boolean
    }
    /** @description Offender contacts */
    OffenderContacts: {
      /** @description Offender contacts */
      offenderContacts?: components['schemas']['OffenderContact'][]
    }
    /** @description Visitor restriction */
    VisitorRestriction: {
      /**
       * Format: int64
       * @description restriction id
       */
      restrictionId: number
      /** @description Restriction comment text */
      comment?: string
      /** @description code of restriction type */
      restrictionType: string
      /** @description description of restriction type */
      restrictionTypeDescription: string
      /**
       * Format: date
       * @description Date from which the restrictions applies
       * @example 1980-01-01
       */
      startDate: string
      /**
       * Format: date
       * @description Date restriction applies to, or indefinitely if null
       * @example 1980-01-01
       */
      expiryDate?: string
      /** @description true if applied globally to the contact or false if applied in the context of a visit */
      globalRestriction: boolean
    }
    /** @description Case Note */
    CaseNote: {
      /**
       * Format: int64
       * @description Case Note Id (unique)
       * @example 12311312
       */
      caseNoteId: number
      /**
       * Format: int64
       * @description Booking Id of offender
       * @example 512321
       */
      bookingId: number
      /**
       * @description Case Note Type
       * @example KA
       */
      type: string
      /**
       * @description Case Note Type Description
       * @example Key Worker Activity
       */
      typeDescription?: string
      /**
       * @description Case Note Sub Type
       * @example KS
       */
      subType: string
      /**
       * @description Case Note Sub Type Description
       * @example Key Worker Session
       */
      subTypeDescription?: string
      /**
       * @description Source Type
       * @example INST
       */
      source: string
      /**
       * @description Date and Time of Case Note creation
       * @example 2021-07-05T10:35:17
       */
      creationDateTime: string
      /**
       * @description Date and Time of when case note contact with offender was made
       * @example 2021-07-05T10:35:17
       */
      occurrenceDateTime: string
      /**
       * Format: int64
       * @description Id of staff member who created case note
       * @example 321241
       */
      staffId: number
      /**
       * @description Name of staff member who created case note (lastname, firstname)
       * @example Smith, John
       */
      authorName: string
      /**
       * @description Case Note Text
       * @example This is some text
       */
      text: string
      /**
       * @description The initial case note information that was entered
       * @example This is some text
       */
      originalNoteText: string
      /**
       * @description Agency Code where Case Note was made.
       * @example MDI
       */
      agencyId?: string
      /** @description Ordered list of amendments to the case note (oldest first) */
      amendments: components['schemas']['CaseNoteAmendment'][]
    }
    /** @description Case Note Amendment */
    CaseNoteAmendment: {
      /**
       * @description Date and Time of Case Note creation
       * @example 2021-07-05T10:35:17
       */
      creationDateTime: string
      /**
       * @description Name of the user amending the case note (lastname, firstname)
       * @example Smith, John
       */
      authorName: string
      /**
       * @description Additional Case Note Information
       * @example Some Additional Text
       */
      additionalNoteText: string
    }
    /** @description Court case details */
    CourtSentences: {
      /**
       * @description The case information number
       * @example TD20177010
       */
      caseInfoNumber?: string
      /**
       * Format: int64
       * @description The case identifier (internal)
       * @example 1
       */
      id?: number
      /**
       * Format: int64
       * @description The case sequence number for the offender
       * @example 1
       */
      caseSeq?: number
      /**
       * Format: date
       * @description The begin date of the court hearings
       * @example 2019-12-01
       */
      beginDate?: string
      court?: components['schemas']['Agency']
      /**
       * @description The case type
       * @example Adult
       */
      caseType?: string
      /** @description The prefix of the case number */
      caseInfoPrefix?: string
      /**
       * @description The case status
       * @example ACTIVE
       */
      caseStatus?: 'ACTIVE' | 'CLOSED' | 'INACTIVE'
      /** @description Court sentences associated with the court case */
      sentences?: components['schemas']['SentencesOffencesTerms'][]
      issuingCourt?: components['schemas']['Agency']
      /**
       * Format: date
       * @description Issuing Court Date
       */
      issuingCourtDate?: string
    }
    /** @description Key Dates */
    KeyDates: {
      /**
       * Format: date
       * @description Sentence start date.
       * @example 2010-02-03
       */
      sentenceStartDate: string
      /**
       * Format: date
       * @description Effective sentence end date
       * @example 2020-02-03
       */
      effectiveSentenceEndDate?: string
      /**
       * Format: int32
       * @description ADA - days added to sentence term due to adjustments.
       * @example 5
       */
      additionalDaysAwarded?: number
      /**
       * Format: date
       * @description Release date for non-DTO sentence (if applicable). This will be based on one of ARD, CRD, NPD or PRRD.
       * @example 2020-04-01
       */
      nonDtoReleaseDate?: string
      /**
       * @description Indicates which type of non-DTO release date is the effective release date. One of 'ARD', 'CRD', 'NPD' or 'PRRD'.
       * @example CRD
       */
      nonDtoReleaseDateType: 'ARD' | 'CRD' | 'NPD' | 'PRRD'
      /**
       * Format: date
       * @description Confirmed release date for offender.
       * @example 2020-04-20
       */
      confirmedReleaseDate?: string
      /**
       * Format: date
       * @description Confirmed, actual, approved, provisional or calculated release date for offender, according to offender release date algorithm.<h3>Algorithm</h3><ul><li>If there is a confirmed release date, the offender release date is the confirmed release date.</li><li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li><li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li></ul>
       * @example 2020-04-01
       */
      releaseDate?: string
      /**
       * Format: date
       * @description SED - date on which sentence expires.
       * @example 2020-02-03
       */
      sentenceExpiryDate?: string
      /**
       * Format: date
       * @description ARD - calculated automatic (unconditional) release date for offender.
       * @example 2020-02-03
       */
      automaticReleaseDate?: string
      /**
       * Format: date
       * @description CRD - calculated conditional release date for offender.
       * @example 2020-02-03
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description NPD - calculated non-parole date for offender (relating to the 1991 act).
       * @example 2020-02-03
       */
      nonParoleDate?: string
      /**
       * Format: date
       * @description PRRD - calculated post-recall release date for offender.
       * @example 2020-02-03
       */
      postRecallReleaseDate?: string
      /**
       * Format: date
       * @description LED - date on which offender licence expires.
       * @example 2020-02-03
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description HDCED - date on which offender will be eligible for home detention curfew.
       * @example 2020-02-03
       */
      homeDetentionCurfewEligibilityDate?: string
      /**
       * Format: date
       * @description PED - date on which offender is eligible for parole.
       * @example 2020-02-03
       */
      paroleEligibilityDate?: string
      /**
       * Format: date
       * @description HDCAD - the offender's actual home detention curfew date.
       * @example 2020-02-03
       */
      homeDetentionCurfewActualDate?: string
      /**
       * Format: date
       * @description APD - the offender's actual parole date.
       * @example 2020-02-03
       */
      actualParoleDate?: string
      /**
       * Format: date
       * @description ROTL - the date on which offender will be released on temporary licence.
       * @example 2020-02-03
       */
      releaseOnTemporaryLicenceDate?: string
      /**
       * Format: date
       * @description ERSED - the date on which offender will be eligible for early removal (under the Early Removal Scheme for foreign nationals).
       * @example 2020-02-03
       */
      earlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description ETD - early term date for offender.
       * @example 2020-02-03
       */
      earlyTermDate?: string
      /**
       * Format: date
       * @description MTD - mid term date for offender.
       * @example 2020-02-03
       */
      midTermDate?: string
      /**
       * Format: date
       * @description LTD - late term date for offender.
       * @example 2020-02-03
       */
      lateTermDate?: string
      /**
       * Format: date
       * @description TUSED - top-up supervision expiry date for offender.
       * @example 2020-02-03
       */
      topupSupervisionExpiryDate?: string
      /**
       * Format: date
       * @description Date on which minimum term is reached for parole (indeterminate/life sentences).
       * @example 2020-02-03
       */
      tariffDate?: string
      /**
       * Format: date
       * @description DPRRD - Detention training order post recall release date
       * @example 2020-02-03
       */
      dtoPostRecallReleaseDate?: string
      /**
       * Format: date
       * @description TERSED - Tariff early removal scheme eligibility date
       * @example 2020-02-03
       */
      tariffEarlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description Top-up supervision start date for offender - calculated as licence end date + 1 day or releaseDate if licence end date not set.
       * @example 2019-04-01
       */
      topupSupervisionStartDate?: string
      /**
       * Format: date
       * @description Offender's home detention curfew end date - calculated as one day before the releaseDate.
       * @example 2019-04-01
       */
      homeDetentionCurfewEndDate?: string
    }
    /** @description Offence details related to an offender */
    OffenderOffence: {
      /**
       * Format: int64
       * @description Internal ID for charge relating to offender
       */
      offenderChargeId?: number
      /**
       * Format: date
       * @description Offence Start Date
       */
      offenceStartDate?: string
      /**
       * Format: date
       * @description Offence End Date
       */
      offenceEndDate?: string
      /** @description Offence Code */
      offenceCode?: string
      /** @description Offence Description */
      offenceDescription?: string
      /** @description Offence Indicators */
      indicators?: string[]
    }
    /** @description Prison Term */
    PrisonTerm: {
      /**
       * @description Book Number (Prison) / Prison Number (Probation)
       * @example B45232
       */
      bookNumber: string
      /**
       * Format: int64
       * @description Booking Identifier (internal)
       * @example 12312312
       */
      bookingId: number
      courtSentences?: components['schemas']['CourtSentences'][]
      /** @description Licence sentences */
      licenceSentences?: components['schemas']['SentencesOffencesTerms'][]
      keyDates?: components['schemas']['KeyDates']
      sentenceAdjustments?: components['schemas']['SentenceAdjustmentDetail']
    }
    /** @description Sentence adjustments */
    SentenceAdjustmentDetail: {
      /**
       * Format: int32
       * @description Number of additional days awarded
       * @example 12
       */
      additionalDaysAwarded?: number
      /**
       * Format: int32
       * @description Number unlawfully at large days
       * @example 12
       */
      unlawfullyAtLarge?: number
      /**
       * Format: int32
       * @description Number of lawfully at large days
       * @example 12
       */
      lawfullyAtLarge?: number
      /**
       * Format: int32
       * @description Number of restored additional days awarded
       * @example 12
       */
      restoredAdditionalDaysAwarded?: number
      /**
       * Format: int32
       * @description Number of special remission days
       * @example 12
       */
      specialRemission?: number
      /**
       * Format: int32
       * @description Number of recall sentence remand days
       * @example 12
       */
      recallSentenceRemand?: number
      /**
       * Format: int32
       * @description Number of recall sentence tagged bail days
       * @example 12
       */
      recallSentenceTaggedBail?: number
      /**
       * Format: int32
       * @description Number of remand days
       * @example 12
       */
      remand?: number
      /**
       * Format: int32
       * @description Number of tagged bail days
       * @example 12
       */
      taggedBail?: number
      /**
       * Format: int32
       * @description Number of unused remand days
       * @example 12
       */
      unusedRemand?: number
    }
    /** @description Sentence Summary */
    SentenceSummary: {
      /**
       * @description Prisoner Identifier
       * @example A1234AA
       */
      prisonerNumber: string
      latestPrisonTerm?: components['schemas']['PrisonTerm']
      /** @description Other prison terms */
      previousPrisonTerms?: components['schemas']['PrisonTerm'][]
    }
    /** @description Offender sentence and offence details */
    SentencesOffencesTerms: {
      /**
       * Format: int32
       * @description Sentence sequence - a number representing the order
       */
      sentenceSequence?: number
      /**
       * Format: int32
       * @description This sentence is consecutive to this sequence (if populated)
       */
      consecutiveToSequence?: number
      /** @description This sentence status: A = Active I = Inactive */
      sentenceStatus?: string
      /** @description The sentence category e.g. 2003 or Licence */
      sentenceCategory?: string
      /** @description The sentence calculation type e.g. R or ADIMP_ORA */
      sentenceCalculationType?: string
      /** @description The sentence type description e.g. Standard Determinate Sentence */
      sentenceTypeDescription?: string
      /**
       * Format: date
       * @description The sentence start date for this sentence (aka court date)
       */
      sentenceStartDate?: string
      /**
       * Format: date
       * @description The sentence end date for this sentence
       */
      sentenceEndDate?: string
      /**
       * Format: double
       * @description Fine amount.
       */
      fineAmount: number
      /**
       * Format: int64
       * @description Sentence line number
       * @example 1
       */
      lineSeq: number
      /** @description The offences related to this sentence (will usually only have one offence per sentence) */
      offences?: components['schemas']['OffenderOffence'][]
      /** @description The terms related to this sentence (will usually only have one term per sentence) */
      terms?: components['schemas']['Terms'][]
    }
    /** @description Offender Sentence terms details for booking id */
    Terms: {
      /**
       * Format: int32
       * @description Sentence term number within sentence.
       * @example 1
       */
      termSequence: number
      /**
       * Format: int32
       * @description Sentence number which this sentence follows if consecutive, otherwise concurrent.
       * @example 2
       */
      consecutiveTo?: number
      /**
       * @description Sentence type, using reference data from table SENTENCE_CALC_TYPES.
       * @example 2
       */
      sentenceType?: string
      /**
       * @description Sentence term code.
       * @example IMP
       */
      sentenceTermCode: string
      /**
       * @description Sentence type description.
       * @example 2
       */
      sentenceTypeDescription?: string
      /**
       * Format: date
       * @description Start date of sentence term.
       * @example 2018-12-31
       */
      startDate: string
      /**
       * Format: int32
       * @description Sentence length years.
       */
      years?: number
      /**
       * Format: int32
       * @description Sentence length months.
       */
      months?: number
      /**
       * Format: int32
       * @description Sentence length weeks.
       */
      weeks?: number
      /**
       * Format: int32
       * @description Sentence length days.
       */
      days?: number
      /** @description Whether this is a life sentence. */
      lifeSentence: boolean
    }
    /** @description An overview of an adjudication */
    Adjudication: {
      /**
       * Format: int64
       * @description Adjudication Number
       * @example 1234567
       */
      adjudicationNumber?: number
      /**
       * @description Report Time
       * @example 2021-07-05T10:35:17
       */
      reportTime?: string
      /**
       * Format: int64
       * @description Agency Incident Id
       * @example 1484302
       */
      agencyIncidentId?: number
      /**
       * @description Agency Id
       * @example MDI
       */
      agencyId?: string
      /**
       * Format: int64
       * @description Party Sequence
       * @example 1
       */
      partySeq?: number
      /** @description Charges made as part of the adjudication */
      adjudicationCharges?: components['schemas']['AdjudicationCharge'][]
    }
    /** @description A charge which was made as part of an adjudication */
    AdjudicationCharge: {
      /**
       * @description Charge Id
       * @example 1506763/1
       */
      oicChargeId?: string
      /**
       * @description Offence Code
       * @example 51:22
       */
      offenceCode?: string
      /**
       * @description Offence Description
       * @example Disobeys any lawful order
       */
      offenceDescription?: string
      /**
       * @description Offence Finding Code
       * @example PROVED
       */
      findingCode?: string
    }
    /** @description A type of offence that can be made as part of an adjudication */
    AdjudicationOffence: {
      /**
       * @description Offence Id
       * @example 8
       */
      id?: string
      /**
       * @description Offence Code
       * @example 51:7
       */
      code?: string
      /**
       * @description Offence Description
       * @example Escapes or absconds from prison or from legal custody
       */
      description?: string
    }
    AdjudicationSearchResponse: {
      /** @description Search results */
      results?: components['schemas']['Adjudication'][]
      /** @description A complete list of the type of offences that this offender has had adjudications for */
      offences?: components['schemas']['AdjudicationOffence'][]
      /** @description Complete list of agencies where this offender has had adjudications */
      agencies?: components['schemas']['Agency'][]
    }
    /** @description Detail about an individual Adjudication */
    AdjudicationDetail: {
      /**
       * Format: int64
       * @description Adjudication Number
       * @example 1234567
       */
      adjudicationNumber?: number
      /**
       * @description Incident Time
       * @example 2021-07-05T10:35:17
       */
      incidentTime?: string
      /**
       * @description Establishment
       * @example Moorland (HMP & YOI)
       */
      establishment?: string
      /**
       * @description Interior Location
       * @example Wing A
       */
      interiorLocation?: string
      /**
       * @description Incident Details
       * @example Whilst conducting an intelligence cell search...
       */
      incidentDetails?: string
      /**
       * Format: int64
       * @description Report Number
       * @example 1234567
       */
      reportNumber?: number
      /**
       * @description Report Type
       * @example Governor's Report
       */
      reportType?: string
      /**
       * @description Reporter First Name
       * @example John
       */
      reporterFirstName?: string
      /**
       * @description Reporter Last Name
       * @example Smith
       */
      reporterLastName?: string
      /**
       * @description Report Time
       * @example 2021-07-05T10:35:17
       */
      reportTime?: string
      /** @description Hearings */
      hearings?: components['schemas']['Hearing'][]
    }
    /** @description An Adjudication Hearing */
    Hearing: {
      /**
       * Format: int64
       * @description OIC Hearing ID
       * @example 1985937
       */
      oicHearingId?: number
      /**
       * @description Hearing Type
       * @example Governor's Hearing Adult
       */
      hearingType?: string
      /**
       * @description Hearing Time
       * @example 2021-07-05T10:35:17
       */
      hearingTime?: string
      /**
       * @description Establishment
       * @example Moorland (HMP & YOI)
       */
      establishment?: string
      /**
       * @description Hearing Location
       * @example Adjudication Room
       */
      location?: string
      /**
       * @description Adjudicator First name
       * @example Bob
       */
      heardByFirstName?: string
      /**
       * @description Adjudicator Last name
       * @example Smith
       */
      heardByLastName?: string
      /**
       * @description Other Representatives
       * @example Councillor Adams
       */
      otherRepresentatives?: string
      /**
       * @description Comment
       * @example The defendant conducted themselves in a manner...
       */
      comment?: string
      /** @description Hearing Results */
      results?: components['schemas']['HearingResult'][]
    }
    /** @description A result from a hearing */
    HearingResult: {
      /**
       * @description OIC Offence Code
       * @example 51:22
       */
      oicOffenceCode?: string
      /**
       * @description Offence Type
       * @example Prison Rule 51
       */
      offenceType?: string
      /**
       * @description Offence Description
       * @example Disobeys any lawful order
       */
      offenceDescription?: string
      /**
       * @description Plea
       * @example Guilty
       */
      plea?: string
      /**
       * @description Finding
       * @example Charge Proved
       */
      finding?: string
      sanctions?: components['schemas']['Sanction'][]
    }
    /** @description An Adjudication Sanction */
    Sanction: {
      /**
       * @description Sanction Type
       * @example Stoppage of Earnings (amount)
       */
      sanctionType?: string
      /**
       * Format: int64
       * @description Sanction Days
       * @example 14
       */
      sanctionDays?: number
      /**
       * Format: int64
       * @description Sanction Months
       * @example 1
       */
      sanctionMonths?: number
      /**
       * Format: int64
       * @description Compensation Amount
       * @example 50
       */
      compensationAmount?: number
      /**
       * @description Effective
       * @example 2021-07-05T10:35:17
       */
      effectiveDate?: string
      /**
       * @description Sanction status
       * @example Immediate
       */
      status?: string
      /**
       * @description Status Date
       * @example 2021-07-05T10:35:17
       */
      statusDate?: string
      /**
       * @description Comment
       * @example 14x LOTV, 14x LOGYM, 14x LOC, 14x LOA, 14x LOE 50%, 14x CC
       */
      comment?: string
      /**
       * Format: int64
       * @description Sanction Seq
       * @example 1
       */
      sanctionSeq?: number
      /**
       * Format: int64
       * @description Consecutive Sanction Seq
       * @example 1
       */
      consecutiveSanctionSeq?: number
    }
    /** @description The NOMS Offender Number */
    OffenderNumber: {
      /** @description offenderNumber */
      offenderNumber?: string
    }
    /** @description Base Sentence Calc Dates */
    BaseSentenceCalcDates: {
      /**
       * Format: date
       * @description SED - date on which sentence expires.
       * @example 2020-02-03
       */
      sentenceExpiryDate?: string
      /**
       * Format: date
       * @description ARD - calculated automatic (unconditional) release date for offender.
       * @example 2020-02-03
       */
      automaticReleaseDate?: string
      /**
       * Format: date
       * @description CRD - calculated conditional release date for offender.
       * @example 2020-02-03
       */
      conditionalReleaseDate?: string
      /**
       * Format: date
       * @description NPD - calculated non-parole date for offender (relating to the 1991 act).
       * @example 2020-02-03
       */
      nonParoleDate?: string
      /**
       * Format: date
       * @description PRRD - calculated post-recall release date for offender.
       * @example 2020-02-03
       */
      postRecallReleaseDate?: string
      /**
       * Format: date
       * @description LED - date on which offender licence expires.
       * @example 2020-02-03
       */
      licenceExpiryDate?: string
      /**
       * Format: date
       * @description HDCED - date on which offender will be eligible for home detention curfew.
       * @example 2020-02-03
       */
      homeDetentionCurfewEligibilityDate?: string
      /**
       * Format: date
       * @description PED - date on which offender is eligible for parole.
       * @example 2020-02-03
       */
      paroleEligibilityDate?: string
      /**
       * Format: date
       * @description HDCAD - the offender's actual home detention curfew date.
       * @example 2020-02-03
       */
      homeDetentionCurfewActualDate?: string
      /**
       * Format: date
       * @description APD - the offender's actual parole date.
       * @example 2020-02-03
       */
      actualParoleDate?: string
      /**
       * Format: date
       * @description ROTL - the date on which offender will be released on temporary licence.
       * @example 2020-02-03
       */
      releaseOnTemporaryLicenceDate?: string
      /**
       * Format: date
       * @description ERSED - the date on which offender will be eligible for early removal (under the Early Removal Scheme for foreign nationals).
       * @example 2020-02-03
       */
      earlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description ETD - early term date for offender.
       * @example 2020-02-03
       */
      earlyTermDate?: string
      /**
       * Format: date
       * @description MTD - mid term date for offender.
       * @example 2020-02-03
       */
      midTermDate?: string
      /**
       * Format: date
       * @description LTD - late term date for offender.
       * @example 2020-02-03
       */
      lateTermDate?: string
      /**
       * Format: date
       * @description TUSED - top-up supervision expiry date for offender.
       * @example 2020-02-03
       */
      topupSupervisionExpiryDate?: string
      /**
       * Format: date
       * @description Date on which minimum term is reached for parole (indeterminate/life sentences).
       * @example 2020-02-03
       */
      tariffDate?: string
      /**
       * Format: date
       * @description DPRRD - Detention training order post recall release date
       * @example 2020-02-03
       */
      dtoPostRecallReleaseDate?: string
      /**
       * Format: date
       * @description TERSED - Tariff early removal scheme eligibility date
       * @example 2020-02-03
       */
      tariffEarlyRemovalSchemeEligibilityDate?: string
      /**
       * Format: date
       * @description Effective sentence end date
       * @example 2020-02-03
       */
      effectiveSentenceEndDate?: string
    }
    /** @description Offender Sentence Calculation */
    OffenderSentenceCalcBaseSentenceCalcDates: {
      /**
       * Format: int64
       * @description Offender booking id.
       * @example 12341321
       */
      bookingId: number
      /**
       * @description Offender Unique Reference
       * @example A1000AA
       */
      offenderNo: string
      /**
       * @description First Name
       * @example John
       */
      firstName: string
      /**
       * @description Last Name
       * @example Smith
       */
      lastName: string
      /**
       * @description Agency Id
       * @example LEI
       */
      agencyLocationId: string
      /**
       * @description Is this the most recent active booking
       * @example true
       */
      mostRecentActiveBooking: boolean
      sentenceDetail?: components['schemas']['BaseSentenceCalcDates']
    }
    /** @description Offender sentence and offence details */
    OffenderSentenceAndOffences: {
      /**
       * Format: int64
       * @description The bookingId this sentence and offence(s) relates to
       */
      bookingId?: number
      /**
       * Format: int32
       * @description Sentence sequence - a unique identifier a sentence on a booking
       */
      sentenceSequence?: number
      /**
       * Format: int32
       * @description This sentence is consecutive to this sequence (if populated)
       */
      consecutiveToSequence?: number
      /**
       * Format: int64
       * @description Sentence line sequence - a number representing the order
       */
      lineSequence?: number
      /**
       * Format: int64
       * @description Case sequence - a number representing the order of the case this sentence belongs to
       */
      caseSequence?: number
      /** @description Case reference - a string identifying the case this sentence belongs to */
      caseReference?: string
      /** @description Court description - a string describing the the court that the case was heard at */
      courtDescription?: string
      /** @description This sentence status: A = Active I = Inactive */
      sentenceStatus?: string
      /** @description The sentence category e.g. 2003 or Licence */
      sentenceCategory?: string
      /** @description The sentence calculation type e.g. R or ADIMP_ORA */
      sentenceCalculationType?: string
      /** @description The sentence type description e.g. Standard Determinate Sentence */
      sentenceTypeDescription?: string
      /**
       * Format: date
       * @description The sentenced date for this sentence (aka court date)
       */
      sentenceDate?: string
      /** @description The sentence terms of the sentence */
      terms?: components['schemas']['OffenderSentenceTerm'][]
      /** @description The offences related to this sentence (will usually only have one offence per sentence) */
      offences?: components['schemas']['OffenderOffence'][]
      /**
       * Format: double
       * @description The amount of fine related to the sentence and offence
       */
      fineAmount?: number
    }
    /** @description Offender sentence term */
    OffenderSentenceTerm: {
      /**
       * Format: int32
       * @description The term duration - years
       */
      years?: number
      /**
       * Format: int32
       * @description The term duration - months
       */
      months?: number
      /**
       * Format: int32
       * @description The term duration - weeks
       */
      weeks?: number
      /**
       * Format: int32
       * @description The term duration - days
       */
      days?: number
      /** @description The sentence term code, indicating if this is the term of imprisonment or license */
      code?: string
    }
    /** @description Offender Summary */
    OffenderSummary: {
      /**
       * Format: int64
       * @description A unique booking id.
       */
      bookingId: number
      /** @description The offender's unique offender number (aka NOMS Number in the UK). */
      offenderNo: string
      /** @description A code representing the offender's title (from TITLE reference domain). */
      title?: string
      /** @description A code representing a suffix that is applied to offender's name (from SUFFIX reference domain). */
      suffix?: string
      /** @description The offender's first name. */
      firstName: string
      /** @description The offender's middle name(s). */
      middleNames?: string
      /** @description The offender's last name. */
      lastName: string
      /** @description Set to Y or N to indicate if the person is currently in prison. If not set, status is not known. */
      currentlyInPrison?: string
      /** @description Agency Id (if known) */
      agencyLocationId?: string
      /** @description Agency description (if known) */
      agencyLocationDesc?: string
      /** @description Internal location id (if known) */
      internalLocationId?: string
      /** @description Internal location description (if known) */
      internalLocationDesc?: string
    }
    /** @description Offender fine payments */
    OffenderFinePaymentDto: {
      /**
       * Format: int64
       * @description The bookingId this payment relates to
       */
      bookingId?: number
      /**
       * Format: int32
       * @description Payment sequence - a unique identifier a payment on a booking
       */
      sequence?: number
      /**
       * Format: date
       * @description The date of the payment
       */
      paymentDate?: string
      /** @description The amount of the payment */
      paymentAmount?: number
    }
    /** @description AssessmentSummary */
    AssessmentSummary: {
      /**
       * Format: int64
       * @description Booking number
       * @example 123456
       */
      bookingId: number
      /**
       * Format: int32
       * @description Sequence number of assessment within booking
       * @example 1
       */
      assessmentSeq: number
      /**
       * @description Offender number (e.g. NOMS Number).
       * @example GV09876N
       */
      offenderNo: string
      /**
       * @description Classification code. This will not have a value if the assessment is incomplete or pending
       * @example STANDARD
       */
      classificationCode?: string
      /**
       * @description Identifies the type of assessment
       * @example CSR
       */
      assessmentCode: string
      /** @description Indicates whether this is a CSRA assessment */
      cellSharingAlertFlag: boolean
      /**
       * Format: date
       * @description Date assessment was created
       * @example 2018-02-11
       */
      assessmentDate: string
      /**
       * @description The assessment creation agency id
       * @example MDI
       */
      assessmentAgencyId?: string
      /**
       * @description Comment from assessor
       * @example Comment details
       */
      assessmentComment?: string
      /**
       * @description Username who made the assessment
       * @example NGK33Y
       */
      assessorUser?: string
      /**
       * Format: date
       * @description Date of next review
       * @example 2018-02-11
       */
      nextReviewDate?: string
    }
    /** @description AssessmentDetail */
    AssessmentDetail: {
      /**
       * Format: int64
       * @description Booking number
       * @example 123456
       */
      bookingId: number
      /**
       * Format: int32
       * @description Sequence number of assessment within booking
       * @example 1
       */
      assessmentSeq: number
      /**
       * @description Offender number (e.g. NOMS Number).
       * @example GV09876N
       */
      offenderNo: string
      /**
       * @description Classification code. This will not have a value if the assessment is incomplete or pending
       * @example STANDARD
       */
      classificationCode?: string
      /**
       * @description Identifies the type of assessment
       * @example CSR
       */
      assessmentCode: string
      /** @description Indicates whether this is a CSRA assessment */
      cellSharingAlertFlag: boolean
      /**
       * Format: date
       * @description Date assessment was created
       * @example 2018-02-11
       */
      assessmentDate: string
      /**
       * @description The assessment creation agency id
       * @example MDI
       */
      assessmentAgencyId?: string
      /**
       * @description Comment from assessor
       * @example Comment details
       */
      assessmentComment?: string
      /**
       * @description Username who made the assessment
       * @example NGK33Y
       */
      assessorUser?: string
      /**
       * Format: date
       * @description Date of next review
       * @example 2018-02-11
       */
      nextReviewDate?: string
      /**
       * @description The code of the committee that conducted the assessment
       * @example REVIEW
       */
      assessmentCommitteeCode?: string
      /**
       * @description The name of the committee that conducted the assessment
       * @example REVIEW
       */
      assessmentCommitteeName?: string
      /**
       * Format: date
       * @description Date of assessment approval
       * @example 2018-02-11
       */
      approvalDate?: string
      /**
       * @description The code of the committee that conducted the approval
       * @example REVIEW
       */
      approvalCommitteeCode?: string
      /**
       * @description The name of the committee that conducted the approval
       * @example REVIEW
       */
      approvalCommitteeName?: string
      /**
       * @description Classification code before it was reviewed
       * @example HI
       */
      originalClassificationCode?: string
      /**
       * @description The reason for the review of the classification
       * @example HI
       */
      classificationReviewReason?: string
      /** @description Assessment questions and answers, in the order they were asked */
      questions: components['schemas']['AssessmentQuestion'][]
    }
    /** @description AssessmentQuestion */
    AssessmentQuestion: {
      /** @description Question */
      question: string
      /** @description The answer given. More than one answer might have been given, in which case the other answers will be in the additionalAnswers property */
      answer?: string
      /** @description If a question has more than one answer, all but the first answer will be in this property */
      additionalAnswers?: string[]
    }
    PageOffenceDto: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['OffenceDto'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    /** @description Offender out today details */
    OffenderOutTodayDto: {
      /** @description Offender Unique Reference */
      offenderNo: string
      /** Format: date */
      dateOfBirth: string
      /** @description Reason for out movement */
      reasonDescription?: string
      timeOut: components['schemas']['LocalTime']
      firstName: string
      lastName: string
    }
    /** @description Summary of an offender counted as Establishment Roll - In */
    OffenderIn: {
      /** @description Display Prisoner Number */
      offenderNo: string
      /** Format: int64 */
      bookingId: number
      /** Format: date */
      dateOfBirth: string
      firstName: string
      middleName?: string
      lastName: string
      /** @description Id for Agency travelling from */
      fromAgencyId: string
      /** @description Description for Agency travelling from */
      fromAgencyDescription: string
      /** @description Id for Agency travelling to */
      toAgencyId: string
      /** @description Description for Agency travelling to */
      toAgencyDescription: string
      /** @description City offender was received from */
      fromCity: string
      /** @description City offender was sent to */
      toCity: string
      movementTime: components['schemas']['LocalTime']
      /**
       * @description Movement date time
       * @example 2021-07-05T10:35:17
       */
      movementDateTime: string
      /** @description Description of the offender's (internal) location */
      location: string
    }
    /** @description Basic Summary data for a scheduled court event */
    CourtEventBasic: {
      /**
       * @description Offender number (NOMS ID)
       * @example G3878UK
       */
      offenderNo: string
      /**
       * @description The agency code of the court
       * @example LEEDCC
       */
      court: string
      /**
       * @description The court description
       * @example Leeds Crown Court
       */
      courtDescription?: string
      /**
       * @description The planned date and time of the start of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      startTime: string
      /**
       * @description The court event subtype (from MOVE_RSN reference data)
       * @example CRT
       */
      eventSubType: string
      /**
       * @description The event description
       * @example Court Appearance
       */
      eventDescription?: string
      /** @description Whether hold ordered by the court at this hearing */
      hold?: boolean
    }
    /** @description Summary data for a scheduled court event */
    CourtEvent: {
      /**
       * @description Offender number (NOMS ID)
       * @example G3878UK
       */
      offenderNo: string
      /**
       * @description Date and time the record was created in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      createDateTime: string
      /**
       * Format: int64
       * @description The internal event ID
       * @example 12343434
       */
      eventId: number
      /**
       * @description The agency code
       * @example LEI
       */
      fromAgency: string
      /**
       * @description The from agency description
       * @example HMP LEEDS
       */
      fromAgencyDescription: string
      /**
       * @description The agency code to which the transfer will be made (if an agency)
       * @example LEEDCC
       */
      toAgency: string
      /**
       * @description The to agency description
       * @example Leeds Crown Court
       */
      toAgencyDescription: string
      /**
       * Format: date
       * @description The date on which the event is scheduled to occur
       * @example 2019-12-01
       */
      eventDate: string
      /**
       * @description The planned date and time of the start of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      startTime: string
      /**
       * @description The planned date and time of the end of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      endTime: string
      /**
       * @description The event class (from COURT_EVENTS)
       * @example EXT_MOV
       */
      eventClass: string
      /**
       * @description The event type
       * @example CRT
       */
      eventType: string
      /**
       * @description The event sub-type
       * @example DP
       */
      eventSubType: string
      /**
       * @description The event status - either SCH (scheduled) or COMP (completed)
       * @example SCH
       */
      eventStatus: string
      /**
       * @description Judge name, where available
       * @example Harris
       */
      judgeName: string
      /**
       * @description The direction code (IN or OUT)
       * @example IN
       */
      directionCode: string
      /**
       * @description The comment text stored against this event
       * @example Restricted access to parking level
       */
      commentText: string
      /**
       * @description The booking active flag
       * @example true
       */
      bookingActiveFlag: boolean
      /**
       * @description The booking in or out status - either IN or OUT
       * @example OUT
       */
      bookingInOutStatus: string
    }
    /** @description Summary data for a completed movement */
    MovementSummary: {
      /**
       * @description Offender number (NOMS ID)
       * @example G3878UK
       */
      offenderNo: string
      /**
       * @description Timestamp when the external movement record was created in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      createDateTime: string
      /**
       * Format: int64
       * @description The internal event ID
       * @example 1223232
       */
      eventId: number
      /**
       * @description Agency travelling from
       * @example LEI
       */
      fromAgency: string
      /**
       * @description Description of the agency travelling from
       * @example HMP LEEDS
       */
      fromAgencyDescription: string
      /**
       * @description Agency travelling to
       * @example MDI
       */
      toAgency: string
      /**
       * @description Description of the agency travelling to
       * @example HMP MOORLANDS
       */
      toAgencyDescription: string
      /**
       * @description City offender was received from
       * @example LEEDS
       */
      fromCity?: string
      /**
       * @description City offender was sent to
       * @example DONCASTER
       */
      toCity?: string
      /**
       * @description The arresting agency location ID
       * @example SYPOL
       */
      arrestAgencyLocId?: string
      /** @description Internal schedule type */
      internalScheduleType?: string
      /** @description Internal schedule reason code */
      internalScheduleReasonCode?: string
      /** @description To prov stat code - from offender_external_movements */
      toProvStatCode?: string
      /**
       * @description The escort code
       * @example PECS123
       */
      escortCode?: string
      /**
       * @description The escort text
       * @example Secure van
       */
      escortText?: string
      /**
       * @description ADM (admission), CRT (court), REL (release), TAP (temporary absence) or TRN (transfer)
       * @example ADM
       */
      movementType: 'ADM' | 'CRT' | 'REL' | 'TAP' | 'TRN'
      /**
       * @description Description of the movement type
       * @example Admission
       */
      movementTypeDescription: string
      /**
       * @description IN or OUT
       * @example IN
       */
      directionCode: string
      /**
       * @description Movement date and time in Europe/London local time format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      movementTime: string
      /**
       * @description Description of movement reason
       * @example Convicted at court
       */
      movementReason: string
      /**
       * @description Comment
       * @example This is a free text comment
       */
      commentText?: string
    }
    /** @description Summary data for a scheduled offender release */
    ReleaseEvent: {
      /**
       * @description Offender number (NOMS ID)
       * @example G3878UK
       */
      offenderNo: string
      /**
       * @description Date and time the record was created in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      createDateTime: string
      /**
       * Format: int64
       * @description The internal event ID
       * @example 1234556
       */
      eventId: number
      /**
       * @description The agency code from which the release will be made
       * @example LEI
       */
      fromAgency: string
      /**
       * @description The agency description
       * @example HMP LEEDS
       */
      fromAgencyDescription: string
      /**
       * Format: date
       * @description The planned release date
       * @example 2019-12-01
       */
      releaseDate: string
      /**
       * Format: date
       * @description The approved release date
       * @example 2019-12-01
       */
      approvedReleaseDate: string
      /**
       * @description The event class - usually EXT_MOV
       * @example EXT_MOV
       */
      eventClass: string
      /**
       * @description The event status - either SCH (scheduled) or COMP (completed)
       * @example SCH
       */
      eventStatus: string
      /**
       * @description The movement type code - from OFFENDER_IND_SCHEDULE
       * @example REL
       */
      movementTypeCode: string
      /**
       * @description The movement type description from reference data
       * @example Release at end of sentence
       */
      movementTypeDescription: string
      /**
       * @description The movement reason code - from OFFENDER_IND_SCHEDULE
       * @example DD
       */
      movementReasonCode: string
      /**
       * @description The movement reason description from reference data
       * @example Release
       */
      movementReasonDescription: string
      /**
       * @description Any comment text entered against this event
       * @example Notes relating to this release
       */
      commentText: string
      /**
       * @description The booking active flag
       * @example true
       */
      bookingActiveFlag: boolean
      /**
       * @description The booking in or out status - either IN or OUT
       * @example OUT
       */
      bookingInOutStatus: string
    }
    /** @description A scheduled offender movement event */
    TransferEvent: {
      /**
       * @description Offender number(NOMS ID)
       * @example G3878UK
       */
      offenderNo: string
      /**
       * @description Date and time the record was created in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      createDateTime: string
      /**
       * Format: int64
       * @description The internal event ID
       * @example 1232323
       */
      eventId: number
      /**
       * @description The agency code from which the event will start
       * @example LEI
       */
      fromAgency: string
      /**
       * @description The from agency description
       * @example HMP LEEDS
       */
      fromAgencyDescription: string
      /**
       * @description The agency code to which the transfer will be made (if an agency)
       * @example MDI
       */
      toAgency: string
      /**
       * @description The to agency description
       * @example HMP MOORLANDS
       */
      toAgencyDescription: string
      /**
       * @description The destination city when available
       * @example DONCASTER
       */
      toCity: string
      /**
       * @description The event status - either SCH or COMP
       * @example SCH
       */
      eventStatus: string
      /**
       * @description The event class - from OFFENDER_IND_SCHEDULES
       * @example EXT_MOV
       */
      eventClass: string
      /**
       * @description The event type - from OFFENDER_IND_SCHEDULES
       * @example TRN
       */
      eventType: string
      /**
       * @description The event sub-type - from OFFENDER_IND_SCHEDULES
       * @example PP
       */
      eventSubType: string
      /**
       * Format: date
       * @description The date on which the event is scheduled to occur
       * @example 2019-01-01
       */
      eventDate: string
      /**
       * @description The planned date and time of the start of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      startTime: string
      /**
       * @description The planned date and time of the end of the event in Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      endTime: string
      /**
       * @description The outcome reason code - from offender_ind_schedules
       * @example CO
       */
      outcomeReasonCode: string
      /** @description The name of the judge where known */
      judgeName: string
      /**
       * @description Engagement code
       * @example ENG
       */
      engagementCode: string
      /**
       * @description The escort code
       * @example DEF2
       */
      escortCode: string
      /**
       * @description The performance code
       * @example PERF1
       */
      performanceCode: string
      /**
       * @description The direction code (IN or OUT)
       * @example IN
       */
      directionCode: string
      /**
       * @description The booking active flag
       * @example true
       */
      bookingActiveFlag: boolean
      /**
       * @description The booking in or out status - either IN or OUT from offender bookings
       * @example OUT
       */
      bookingInOutStatus: string
    }
    /** @description The container object for transfer and movement events */
    TransferSummary: {
      /** @description List of scheduled or completed court events */
      courtEvents?: components['schemas']['CourtEvent'][]
      /** @description List of scheduled or completed offender events */
      transferEvents?: components['schemas']['TransferEvent'][]
      /** @description List of scheduled or completed release events */
      releaseEvents?: components['schemas']['ReleaseEvent'][]
      /** @description List of confirmed movements */
      movements?: components['schemas']['MovementSummary'][]
    }
    /** @description Establishment roll count numbers for a housing block, wing, or reception etc. */
    RollCount: {
      /**
       * Format: int64
       * @description Id of location
       */
      livingUnitId: number
      /** @description Wing, houseblock etc. name */
      livingUnitDesc: string
      /**
       * Format: int32
       * @description No of residential prisoners
       */
      bedsInUse: number
      /**
       * Format: int32
       * @description No of residential prisoners actually in
       */
      currentlyInCell: number
      /**
       * Format: int32
       * @description No of residential prisoners out
       */
      currentlyOut: number
      /**
       * Format: int32
       * @description Total capacity not including unavailable cells
       */
      operationalCapacity: number
      /**
       * Format: int32
       * @description Available empty beds
       */
      netVacancies: number
      /**
       * Format: int32
       * @description Total capacity including unavailable cells
       */
      maximumCapacity: number
      /**
       * Format: int32
       * @description All empty beds
       */
      availablePhysical: number
      /**
       * Format: int32
       * @description No of unavailable cells
       */
      outOfOrder: number
    }
    /** @description Establishment roll count in and out numbers */
    MovementCount: {
      /**
       * Format: int32
       * @description Number of prisoners arrived so far on given date
       */
      in: number
      /**
       * Format: int32
       * @description Number of prisoners that have left so far on given date
       */
      out: number
    }
    /** @description Summary of an offender counted as Establishment Roll - Reception */
    OffenderInReception: {
      /** @description Display Prisoner Number */
      offenderNo: string
      /**
       * Format: int64
       * @description Booking Id
       */
      bookingId: number
      /** Format: date */
      dateOfBirth: string
      firstName: string
      lastName: string
    }
    /** @description Summary of an offender 'currently out' according to Establishment Roll */
    OffenderOut: {
      /** @description Display Prisoner Number */
      offenderNo: string
      /** Format: int64 */
      bookingId: number
      /** Format: date */
      dateOfBirth: string
      firstName: string
      lastName: string
      /** @description The prisoner's internal location (Cell) */
      location: string
    }
    /** @description Summary data for a completed movement */
    OutOnTemporaryAbsenceSummary: {
      /**
       * @description Offender number (NOMS ID)
       * @example G3878UK
       */
      offenderNo: string
      /**
       * @description Prisoner first name.
       * @example JOHN
       */
      firstName: string
      /**
       * @description Prisoner's last name.
       * @example SMITH
       */
      lastName: string
      /**
       * Format: date
       * @description Prisoner's date of birth.
       * @example 1980-05-02
       */
      dateOfBirth: string
      /**
       * @description Movement date and time in Europe/London local time format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       * @example 2021-07-05T10:35:17
       */
      movementTime: string
      /**
       * @description Agency travelling to
       * @example MDI
       */
      toAgency?: string
      /**
       * @description Description of the agency travelling to
       * @example HMP MOORLANDS
       */
      toAgencyDescription?: string
      /**
       * @description City offender was sent to
       * @example DONCASTER
       */
      toCity?: string
      /**
       * @description The movement reason code
       * @example C1
       */
      movementReasonCode: string
      /**
       * @description Description of movement reason
       * @example Convicted at court
       */
      movementReason: string
      /**
       * @description Comment
       * @example This is a free text comment
       */
      commentText?: string
    }
    /** @description Keyworker Details */
    Keyworker: {
      /**
       * Format: int64
       * @description Unique identifier for staff member.
       */
      staffId: number
      /** @description Staff member's first name. */
      firstName: string
      /** @description Staff member's last name. */
      lastName: string
      /** @description Status of staff member. */
      status: string
      /**
       * Format: int64
       * @description Identifier for staff member image.
       */
      thumbnailId?: number
      /**
       * Format: int32
       * @description Current number allocated
       */
      numberAllocated: number
    }
    PageOffenderNumber: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['OffenderNumber'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Offender Event */
    OffenderEvent: {
      eventId?: string
      eventType?: string
      /** @example 2021-07-05T10:35:17 */
      eventDatetime?: string
      /** Format: int64 */
      scheduleEventId?: number
      /** @example 2021-07-05T10:35:17 */
      scheduledStartTime?: string
      /** @example 2021-07-05T10:35:17 */
      scheduledEndTime?: string
      scheduleEventClass?: string
      scheduleEventType?: string
      scheduleEventSubType?: string
      scheduleEventStatus?: string
      recordDeleted?: boolean
      /** Format: int64 */
      rootOffenderId?: number
      /** Format: int64 */
      offenderId?: number
      /** Format: int64 */
      aliasOffenderId?: number
      /** Format: int64 */
      previousOffenderId?: number
      offenderIdDisplay?: string
      /** Format: int64 */
      bookingId?: number
      bookingNumber?: string
      previousBookingNumber?: string
      /** Format: int64 */
      sanctionSeq?: number
      /** Format: int64 */
      movementSeq?: number
      /** Format: int64 */
      imprisonmentStatusSeq?: number
      /** Format: int64 */
      assessmentSeq?: number
      /** Format: int64 */
      alertSeq?: number
      /** @example 2021-07-05T10:35:17 */
      alertDateTime?: string
      alertType?: string
      alertCode?: string
      /** @example 2021-07-05T10:35:17 */
      expiryDateTime?: string
      /** Format: int64 */
      caseNoteId?: number
      agencyLocationId?: string
      /** Format: int64 */
      riskPredictorId?: number
      /** Format: int64 */
      addressId?: number
      /** Format: int64 */
      personId?: number
      /** Format: int64 */
      sentenceCalculationId?: number
      /** Format: int64 */
      oicHearingId?: number
      /** Format: int64 */
      oicOffenceId?: number
      pleaFindingCode?: string
      findingCode?: string
      /** Format: int64 */
      resultSeq?: number
      /** Format: int64 */
      agencyIncidentId?: number
      /** Format: int64 */
      chargeSeq?: number
      identifierType?: string
      identifierValue?: string
      /** Format: int64 */
      ownerId?: number
      ownerClass?: string
      /** Format: int64 */
      sentenceSeq?: number
      conditionCode?: string
      /** Format: int64 */
      offenderSentenceConditionId?: number
      /** Format: date */
      addressEndDate?: string
      primaryAddressFlag?: string
      mailAddressFlag?: string
      addressUsage?: string
      /** Format: int64 */
      incidentCaseId?: number
      /** Format: int64 */
      incidentPartySeq?: number
      /** Format: int64 */
      incidentRequirementSeq?: number
      /** Format: int64 */
      incidentQuestionSeq?: number
      /** Format: int64 */
      incidentResponseSeq?: number
      /** Format: int32 */
      bedAssignmentSeq?: number
      /** Format: int64 */
      livingUnitId?: number
      /** @example 2021-07-05T10:35:17 */
      movementDateTime?: string
      movementType?: string
      movementReasonCode?: string
      directionCode?: string
      escortCode?: string
      fromAgencyLocationId?: string
      toAgencyLocationId?: string
      /** Format: int64 */
      iepSeq?: number
      iepLevel?: string
      /** Format: int64 */
      visitId?: number
      nomisEventType?: string
      auditModuleName?: string
    }
    /** @description Offender Employment */
    Employment: {
      /**
       * Format: int64
       * @description Offender booking id.
       * @example 14
       */
      bookingId: number
      /**
       * Format: date
       * @description Start date of employment
       * @example 2018-02-11
       */
      startDate: string
      /**
       * Format: date
       * @description End date of employment
       * @example 2018-05-11
       */
      endDate?: string
      /**
       * @description The employment post type condition
       * @example Full Time
       */
      postType?: string
      /**
       * @description The name of the employer
       * @example Greggs
       */
      employerName?: string
      /**
       * @description The name of the supervisor in the employment
       * @example John Smith
       */
      supervisorName?: string
      /**
       * @description Position held on job
       * @example Supervisor
       */
      position?: string
      /**
       * @description The reason for leaving job
       * @example End of contract
       */
      terminationReason?: string
      /**
       * @description Amount the offender was earning
       * @example 10
       */
      wage?: number
      /**
       * @description The frequency of wage payments
       * @example Hourly
       */
      wagePeriod?: string
      /**
       * @description The occupation name of the offender
       * @example builder
       */
      occupation?: string
      /**
       * @description A comment about the employment
       * @example The employment is going well
       */
      comment?: string
      /**
       * @description The employment schedule
       * @example Fortnightly
       */
      schedule?: string
      /**
       * Format: int32
       * @description The hours worked per week
       * @example 32
       */
      hoursWeek?: number
      /**
       * @description Whether the employer is aware of the offender's charges
       * @example true
       */
      isEmployerAware: boolean
      /** @description Whether the employer can be contacted or not */
      isEmployerContactable: boolean
      /** @description A list of addresses associated with the employment */
      addresses: components['schemas']['AddressDto'][]
    }
    PageEmployment: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Employment'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Offender Education */
    Education: {
      /**
       * Format: int64
       * @description Offender booking id.
       * @example 14
       */
      bookingId: number
      /**
       * Format: date
       * @description Start date of education
       * @example 2018-02-11
       */
      startDate: string
      /**
       * Format: date
       * @description End date of education
       * @example 2020-02-11
       */
      endDate?: string
      /**
       * @description The area of study for the offender while in school.
       * @example General Studies
       */
      studyArea?: string
      /**
       * @description The highest level attained for the educational period.
       * @example Degree Level or Higher
       */
      educationLevel?: string
      /**
       * Format: int32
       * @description The number of educational years completed.
       * @example 2
       */
      numberOfYears?: number
      /**
       * @description Year of graduation.
       * @example 2021
       */
      graduationYear?: string
      /**
       * @description Comment relating to education.
       * @example The education is going well
       */
      comment?: string
      /**
       * @description Name of school attended.
       * @example School of economics
       */
      school?: string
      /** @description Whether this is special education */
      isSpecialEducation: boolean
      /**
       * @description The education schedule
       * @example Full Time
       */
      schedule: string
      /** @description A list of addresses associated with the education */
      addresses: components['schemas']['AddressDto'][]
    }
    PageEducation: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Education'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Bed assignment history entry */
    BedAssignment: {
      /**
       * Format: int64
       * @description Unique, numeric booking id. Used as a primary key when combined with the bed assignment sequence
       * @example 1234134
       */
      bookingId?: number
      /**
       * Format: int64
       * @description Identifier of living unit (e.g. cell) that offender is assigned to.
       * @example 123123
       */
      livingUnitId?: number
      /**
       * Format: date
       * @description Date the offender was assigned to a living unit.
       * @example 2020-10-12
       */
      assignmentDate?: string
      /**
       * @description Date and time the offender was moved to a living unit.
       * @example 2021-07-05T10:35:17
       */
      assignmentDateTime?: string
      /**
       * @description Assignment reason code
       * @example ADM
       */
      assignmentReason?: string
      /**
       * Format: date
       * @description Date an offender was moved out of the living unit
       * @example 2020-11-12
       */
      assignmentEndDate?: string
      /**
       * @description Date and time an offender was moved out of the living unit
       * @example 2021-07-05T10:35:17
       */
      assignmentEndDateTime?: string
      /**
       * @description Agency of living unit
       * @example MDI
       */
      agencyId?: string
      /**
       * @description Description of living unit (e.g. cell)
       * @example MDI-1-1-2
       */
      description?: string
      /**
       * Format: int32
       * @description Bed assignment sequence. Used as a primary key when combined with the booking id
       * @example 2
       */
      bedAssignmentHistorySequence?: number
      /**
       * @description the staff member responsible for the movement of a prisoner
       * @example KQJ74F
       */
      movementMadeBy?: string
      /**
       * @description Offender number
       * @example A1234AA
       */
      offenderNo?: string
    }
    /** @description Offender cell details */
    OffenderCell: {
      /**
       * Format: int64
       * @description The case identifier
       * @example 1
       */
      id?: number
      /**
       * @description Description
       * @example LEI-1-1
       */
      description?: string
      /**
       * @description Description
       * @example LEI-1-1
       */
      userDescription?: string
      /**
       * Format: int32
       * @description Capacity
       * @example 2
       */
      capacity?: number
      /**
       * Format: int32
       * @description Number of occupants
       * @example 2
       */
      noOfOccupants?: number
      /** @description List of attributes */
      attributes?: components['schemas']['OffenderCellAttribute'][]
    }
    /** @description Offender cell details */
    OffenderCellAttribute: {
      /**
       * @description Attribute code
       * @example LC
       */
      code?: string
      /**
       * @description Attribute description
       * @example Listener Cell
       */
      description?: string
    }
    /** @description Case Note Event */
    CaseNoteEvent: {
      /**
       * @description Offender Noms Id
       * @example A1417AE
       */
      noms_id: string
      /**
       * Format: int64
       * @description Case Note Id (unique)
       * @example 12311312
       */
      id: number
      /**
       * @description Case Note Text
       * @example This is some text
       */
      content: string
      /**
       * @description Date and Time of when case note contact with offender was made
       * @example 2021-07-05T10:35:17
       */
      contactTimestamp: string
      /**
       * @description Date and Time of notification of event
       * @example 2021-07-05T10:35:17
       */
      notificationTimestamp: string
      /**
       * @description Agency Code where Case Note was made.
       * @example MDI
       */
      establishmentCode?: string
      /**
       * @description Case Note Type and Sub Type
       * @example POS IEP_ENC
       */
      noteType: string
      /**
       * @description Name of staff member who created case note (lastname, firstname)
       * @example Smith, John
       */
      staffName: string
    }
    /** @description Visit summary */
    VisitSummary: {
      /**
       * @description Date and time at which next scheduled (i.e. not cancelled) event starts (if any)
       * @example 2021-07-05T10:35:17
       */
      startDateTime?: string
      /** @description Whether the prisoner has any visits (previous or next) */
      hasVisits: boolean
    }
    PageVisitWithVisitors: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['VisitWithVisitors'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Visit details */
    VisitDetails: {
      /** @description Relationship of lead visitor to offender */
      relationship?: string
      /** @description Location at which event takes place (could be an internal location, agency or external address). */
      location?: string
      /** @description Prison at which event takes place */
      prison?: string
      /** @description Whether the visit was attended. Translation of eventOutcome into boolean. Defaults in NOMIS to true when the visit is created */
      attended: boolean
      /** @description Status of event (EVENT_STS reference code) */
      eventStatus: 'EXP' | 'SCH' | 'COMP' | 'CANC'
      /** @description Description of eventStatus code */
      eventStatusDescription?: string
      /** @description Completion status of visit (VIS_COMPLETE reference code) */
      completionStatus: 'NORM' | 'SCH' | 'VDE' | 'OFFEND' | 'VISITOR' | 'CANC' | 'HMPOP'
      /** @description Description of completionStatus code */
      completionStatusDescription?: string
      /** @description Code for social (SCON) or official (OFFI) type of visit (VISIT_TYPE reference code) */
      visitType: 'OFFI' | 'SCON'
      /** @description Description of social or official visit */
      visitTypeDescription?: 'Official Visit' | 'Social Contact'
      /** @description Name of lead visitor (blank if there was no visiting order for this visit) */
      leadVisitor?: string
      /** @description Description of relationship code */
      relationshipDescription?: string
      /**
       * @description Date and time at which event starts
       * @example 2021-07-05T10:35:17
       */
      startTime: string
      /**
       * @description Date and time at which event ends
       * @example 2021-07-05T10:35:17
       */
      endTime?: string
      /** @description Whether attended (ATT) or not (ABS) (OUTCOMES reference code) */
      eventOutcome: 'ATT' | 'ABS'
      /** @description Description of eventOutcome code */
      eventOutcomeDescription?: string
      /** @description Reason for cancellation if not attended (MOVE_CANC_RS reference code) */
      cancellationReason?: string
      /** @description Description of cancellationReason code */
      cancelReasonDescription?: string
      /** @description List of visitors on visit */
      visitors?: components['schemas']['Visitor'][]
      /**
       * @description Type of search performed - mandatory if visit completed (SEARCH_LEVEL reference code)
       * @example FULL
       */
      searchType?: string
      /** @description Description of searchType code */
      searchTypeDescription?: string
    }
    /** @description List of visitors for a visit */
    VisitWithVisitors: {
      /** @description List of visitors on visit */
      visitors: components['schemas']['Visitor'][]
      visitDetails: components['schemas']['VisitDetails']
    }
    /** @description Visitor */
    Visitor: {
      /** @description Relationship of visitor to offender */
      relationship: string
      /** @description Whether the visitor attended.  Defaults in NOMIS to true when the visit is created so of limited value. */
      attended: boolean
      /**
       * Format: int64
       * @description Person id of visitor
       */
      personId: number
      /** @description Last name of visitor */
      lastName: string
      /** @description First name of visitor */
      firstName: string
      /**
       * Format: date
       * @description Date of birth of visitor
       */
      dateOfBirth: string
      /**
       * @description Flag marking the visitor as lead visitor or not (only set for visit orders)
       * @example true
       */
      leadVisitor: boolean
    }
    /** @description Secondary language */
    SecondaryLanguage: {
      /**
       * Format: int64
       * @description Booking id
       * @example 10000
       */
      bookingId?: number
      /**
       * @description Language code
       * @example ENG
       */
      code?: string
      /**
       * @description Language description
       * @example English
       */
      description?: string
      /** @description Reading proficiency */
      canRead?: boolean
      /** @description Writing proficiency */
      canWrite?: boolean
      /** @description Speaking proficiency */
      canSpeak?: boolean
    }
    /** @description Reasonable Adjustment */
    ReasonableAdjustment: {
      /**
       * @description Treatment Code
       * @example WHEELCHR_ACC
       */
      treatmentCode?: string
      /**
       * @description Comment Text
       * @example abcd
       */
      commentText?: string
      /**
       * Format: date
       * @description Start Date
       * @example 2010-06-21
       */
      startDate?: string
      /**
       * Format: date
       * @description End Date
       * @example 2010-06-21
       */
      endDate?: string
      /**
       * @description The agency id where the adjustment was created
       * @example LEI
       */
      agencyId?: string
      /**
       * @description Treatment Description
       * @example Wheelchair accessibility
       */
      treatmentDescription?: string
    }
    /** @description Reasonable Adjustments */
    ReasonableAdjustments: {
      /** @description Reasonable Adjustments */
      reasonableAdjustments?: components['schemas']['ReasonableAdjustment'][]
    }
    /** @description Offender property container details */
    PropertyContainer: {
      location?: components['schemas']['Location']
      /**
       * @description The case sequence number for the offender
       * @example MDI10
       */
      sealMark?: string
      /**
       * @description The type of container
       * @example Valuables
       */
      containerType?: string
    }
    /** @description Details relating to the fixed term recall on a booking */
    FixedTermRecallDetails: {
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId?: number
      /**
       * Format: date
       * @description The date the offender returned to custody
       */
      returnToCustodyDate?: string
      /**
       * Format: int32
       * @description The length of the fixed term recall
       */
      recallLength?: number
    }
    /** @description Represents court hearings for an offender booking. */
    CourtHearings: {
      hearings?: components['schemas']['CourtHearing'][]
    }
    /** @description Contacts Details for offender */
    ContactDetail: {
      /** Format: int64 */
      bookingId: number
      nextOfKin: components['schemas']['Contact'][]
      otherContacts: components['schemas']['Contact'][]
    }
    PageBedAssignment: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['BedAssignment'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageCaseNote: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['CaseNote'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Case Note Count Detail */
    CaseNoteCount: {
      /**
       * Format: int64
       * @description Offender booking id
       */
      bookingId: number
      /** @description Case note type. */
      type: string
      /** @description Case note sub-type. */
      subType: string
      /**
       * Format: int64
       * @description Number of case notes of defined type and subType for offender.
       */
      count: number
      /**
       * Format: date
       * @description Count includes case notes occurring on or after this date (in YYYY-MM-DD format).
       */
      fromDate?: string
      /**
       * Format: date
       * @description Count includes case notes occurring on or before this date (in YYYY-MM-DD format).
       */
      toDate?: string
    }
    /** @description Prisoner Account Balance */
    Account: {
      /** @description Spends sub account balance. */
      spends: number
      /** @description Cash sub account balance. */
      cash: number
      /** @description Saves sub account balance. */
      savings: number
      /** @description Damage obligation balance. */
      damageObligations: number
      /** @description Currency of these balances. */
      currency: string
    }
    PageAlert: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['Alert'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Adjudication Summary for offender */
    AdjudicationSummary: {
      /**
       * Format: int64
       * @description Offender Booking Id
       */
      bookingId: number
      /**
       * Format: int32
       * @description Number of proven adjudications
       */
      adjudicationCount: number
      /** @description List of awards / sanctions */
      awards: components['schemas']['Award'][]
    }
    /** @description Adjudication award / sanction */
    Award: {
      /**
       * Format: int64
       * @description Id of booking
       */
      bookingId: number
      /** @description Type of award */
      sanctionCode: string
      /** @description Award type description */
      sanctionCodeDescription?: string
      /**
       * Format: int32
       * @description Number of months duration
       */
      months?: number
      /**
       * Format: int32
       * @description Number of days duration
       */
      days?: number
      /** @description Compensation amount */
      limit?: number
      /** @description Optional details */
      comment?: string
      /**
       * Format: date
       * @description Start of sanction
       */
      effectiveDate: string
      /** @description Award status (ref domain OIC_SANCT_ST) */
      status?: string
      /** @description Award status description */
      statusDescription?: string
      /**
       * Format: int64
       * @description Id of hearing
       */
      hearingId: number
      /**
       * Format: int32
       * @description hearing record sequence number
       */
      hearingSequence: number
    }
    PagePrisonerBookingSummary: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['PrisonerBookingSummary'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      last?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Prisoner Booking Summary */
    PrisonerBookingSummary: {
      /**
       * Format: int64
       * @description Unique, numeric booking id.
       * @example 1234134
       */
      bookingId: number
      /**
       * @description Book number.
       * @example A12121
       */
      bookingNo?: string
      /**
       * @description Prisoner number (e.g. NOMS Number).
       * @example A1234AA
       */
      offenderNo: string
      /**
       * @description Prisoner first name.
       * @example JOHN
       */
      firstName: string
      /**
       * @description Prisoner's middle name.
       * @example ASHLEY
       */
      middleName?: string
      /**
       * @description Prisoner's last name.
       * @example SMITH
       */
      lastName: string
      /**
       * Format: date
       * @description Prisoner's date of birth.
       * @example 1980-05-02
       */
      dateOfBirth: string
      /**
       * Format: int32
       * @description Prisoner's current age.
       * @example 32
       */
      age: number
      /**
       * @description Identifier of agency that prisoner is associated with.
       * @example MDI
       */
      agencyId: string
      /**
       * Format: int64
       * @description Identifier of living unit (e.g. cell) that prisoner is assigned to.
       * @example 123123
       */
      assignedLivingUnitId?: number
      /**
       * Format: int64
       * @description Identifier of facial image of prisoner.
       * @example 1241241
       */
      facialImageId?: number
      /**
       * @description The imprisonment status of the prisoner
       * @example SENT
       */
      imprisonmentStatus?: string
      /**
       * @description Legal Status
       * @example REMAND
       */
      legalStatus?:
        | 'RECALL'
        | 'DEAD'
        | 'INDETERMINATE_SENTENCE'
        | 'SENTENCED'
        | 'CONVICTED_UNSENTENCED'
        | 'CIVIL_PRISONER'
        | 'IMMIGRATION_DETAINEE'
        | 'REMAND'
        | 'UNKNOWN'
        | 'OTHER'
      /**
       * @description Convicted Status
       * @example Convicted
       */
      convictedStatus?: 'Convicted' | 'Remand'
      /**
       * @description IEP level of the prisoner
       * @example Basic
       */
      iepLevel?: string
      /**
       * @description Description of living unit (e.g. cell) that prisoner is assigned to.
       * @example MDI-1-1-3
       */
      assignedLivingUnitDesc?: string
    }
    /** @description Balances of visit orders and privilege visit orders */
    VisitBalances: {
      /**
       * Format: int32
       * @description Balance of visit orders remaining
       */
      remainingVo: number
      /**
       * Format: int32
       * @description Balance of privilege visit orders remaining
       */
      remainingPvo: number
      /**
       * Format: date
       * @description Date of last IEP adjustment for Visit orders
       */
      latestIepAdjustDate?: string
      /**
       * Format: date
       * @description Date of last IEP adjustment for Privilege Visit orders
       */
      latestPrivIepAdjustDate?: string
    }
    /** @description Cell Locations are grouped for unlock lists as a 2 level tree. The two levels are referred to as Location and Sub-Location in the digital prison services UI. Each (location/sub-location) group has a name that is understood by prison officers and also serves as a key to retrieve the corresponding Cell Locations and information about their occupants. */
    LocationGroup: {
      /** @description The name of the group */
      name: string
      /** @description A key for the group */
      key: string
      /** @description The child groups of this group */
      children: components['schemas']['LocationGroup'][]
    }
    /** @description Agency Establishment Type */
    AgencyEstablishmentType: {
      /**
       * @description Code.
       * @example IM
       */
      code: string
      /**
       * @description Description.
       * @example Closed Young Offender Institute (Male)
       */
      description: string
    }
    /** @description Agency Establishment Types */
    AgencyEstablishmentTypes: {
      /**
       * @description Agency id
       * @example MDI
       */
      agencyId: string
      /** @description The establishment types for the agency. */
      establishmentTypes?: components['schemas']['AgencyEstablishmentType'][]
    }
    /** @description Contacts details for agency */
    PrisonContactDetail: {
      /**
       * @description Identifier of agency/prison.
       * @example MDI
       */
      agencyId: string
      /**
       * @description Agency description.
       * @example MOORLAND (HMP & YOI)
       */
      description: string
      /**
       * @description Formatted agency description.
       * @example Moorland (HMP & YOI)
       */
      formattedDescription: string
      /**
       * @description Type of agency.
       * @example INST
       */
      agencyType: string
      /** @description Type of address. */
      addressType: string
      /** @description The Prison name. */
      premise: string
      /** @description Describes the geographic location. */
      locality: string
      /** @description Address city. */
      city: string
      /** @description Address country. */
      country: string
      /** @description Address postcode. */
      postCode: string
      /** @description List of Telephone details */
      phones: components['schemas']['Telephone'][]
      /** @description List of Address details */
      addresses: components['schemas']['AddressDto'][]
    }
    /** @description Sentence Adjustment values */
    BookingAdjustment: {
      /** @description Adjustment type */
      type?:
        | 'SPECIAL_REMISSION'
        | 'ADDITIONAL_DAYS_AWARDED'
        | 'RESTORED_ADDITIONAL_DAYS_AWARDED'
        | 'UNLAWFULLY_AT_LARGE'
        | 'LAWFULLY_AT_LARGE'
        | 'SPECIAL_REMISSION, ADDITIONAL_DAYS_AWARDED, RESTORED_ADDITIONAL_DAYS_AWARDED, UNLAWFULLY_AT_LARGE, LAWFULLY_AT_LARGE'
      /**
       * Format: int32
       * @description Number of days to adjust
       * @example 12
       */
      numberOfDays?: number
      /**
       * Format: date
       * @description The 'from date' of the adjustment
       * @example 2022-01-01
       */
      fromDate?: string
      /**
       * Format: date
       * @description The 'to date' of the adjustment
       * @example 2022-01-31
       */
      toDate?: string
      /**
       * @description Boolean flag showing if the adjustment is active
       * @example true
       */
      active?: boolean
      analysisResult?: 'NEW' | 'SAME'
    }
    /** @description Adjustments associated at a booking level and a sentence level */
    BookingAndSentenceAdjustments: {
      /** @description Adjustments associated at a sentence level (of type RECALL_SENTENCE_REMAND, TAGGED_BAIL, RECALL_SENTENCE_TAGGED_BAIL, REMAND or UNUSED_REMAND) */
      sentenceAdjustments?: components['schemas']['SentenceAdjustmentValues'][]
      /** @description Adjustments associated at a booking level (of type SPECIAL_REMISSION, ADDITIONAL_DAYS_AWARDED, RESTORED_ADDITIONAL_DAYS_AWARDED, UNLAWFULLY_AT_LARGE, LAWFULLY_AT_LARGE) */
      bookingAdjustments?: components['schemas']['BookingAdjustment'][]
    }
    /** @description Sentence Adjustment values */
    SentenceAdjustmentValues: {
      /**
       * Format: int32
       * @description Sentence sequence
       * @example 1
       */
      sentenceSequence?: number
      /** @description Adjustment type */
      type?: 'RECALL_SENTENCE_REMAND' | 'TAGGED_BAIL' | 'RECALL_SENTENCE_TAGGED_BAIL' | 'REMAND' | 'UNUSED_REMAND'
      /**
       * Format: int32
       * @description Number of days to adjust
       * @example 12
       */
      numberOfDays?: number
      /**
       * Format: date
       * @description The 'from date' of the adjustment
       * @example 2022-01-01
       */
      fromDate?: string
      /**
       * Format: date
       * @description The 'to date' of the adjustment
       * @example 2022-01-31
       */
      toDate?: string
      /**
       * @description Boolean flag showing if the adjustment is active
       * @example true
       */
      active?: boolean
      analysisResult?: 'NEW' | 'SAME'
    }
  }
}

export interface operations {
  /** Update working caseload for current user. */
  updateMyActiveCaseLoad: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': { [key: string]: unknown }
        }
      }
      /** Invalid username or password */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** the user does not have permission to view the caseload. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CaseLoad']
      }
    }
  }
  /** Add the NWEB caseload to specified caseload. */
  addApiAccessForCaseload: {
    parameters: {
      path: {
        /** The caseload (equates to prison) id to add all active users to default API caseload (NWEB) */
        caseload: string
      }
    }
    responses: {
      /** No New Users */
      200: {
        content: {
          'application/json': components['schemas']['CaseloadUpdate']
        }
      }
      /** New Users Enabled */
      201: {
        content: {
          'application/json': components['schemas']['CaseloadUpdate']
        }
      }
    }
  }
  releasePrisoner: {
    parameters: {
      path: {
        /** offenderNo */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Requires role ROLE_SMOKE_TEST */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  recallPrisoner: {
    parameters: {
      path: {
        /** offenderNo */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Requires role ROLE_SMOKE_TEST */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Reference code detail for reference domain and code (with sub-codes).<p>This endpoint uses the REPLICA database.</p> */
  getReferenceCodeByDomainAndCode: {
    parameters: {
      path: {
        /** The domain identifier/name. */
        domain: string
        /** The reference code. */
        code: string
      }
      query: {
        /** Specify whether or not to return the reference code with its associated sub-codes. */
        withSubCodes?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateReferenceCode: {
    parameters: {
      path: {
        /** The domain identifier/name. */
        domain: string
        /** The reference code. */
        code: string
      }
    }
    responses: {
      /** Updated */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReferenceCodeInfo']
      }
    }
  }
  createReferenceCode: {
    parameters: {
      path: {
        /** The domain identifier/name. */
        domain: string
        /** The reference code. */
        code: string
      }
    }
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReferenceCodeInfo']
      }
    }
  }
  transferOutPrisoner: {
    parameters: {
      path: {
        /** The offenderNo of prisoner */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToTransferOut']
      }
    }
  }
  transferInPrisoner: {
    parameters: {
      path: {
        /** The offenderNo of prisoner */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to transfer a prisoner */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToTransferIn']
      }
    }
  }
  transferOutPrisonerToTemporaryAbsence: {
    parameters: {
      path: {
        /** The offenderNo of prisoner */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToTransferOutToTemporaryAbsence']
      }
    }
  }
  temporaryAbsenceArrival: {
    parameters: {
      path: {
        /** The offenderNo of prisoner */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to transfer a prisoner */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestForTemporaryAbsenceArrival']
      }
    }
  }
  releasePrisoner_1: {
    parameters: {
      path: {
        /** The offenderNo of prisoner */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to release a prisoner. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToReleasePrisoner']
      }
    }
  }
  recallPrisoner_1: {
    parameters: {
      path: {
        /** The offenderNo of prisoner */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to recall a prisoner. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToRecall']
      }
    }
  }
  dischargePrisonerToHospital: {
    parameters: {
      path: {
        /** The offenderNo of prisoner */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to release a prisoner. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToDischargePrisoner']
      }
    }
  }
  transferOutPrisonerToCourt: {
    parameters: {
      path: {
        /** The offenderNo of prisoner */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToTransferOutToCourt']
      }
    }
  }
  courtTransferIn: {
    parameters: {
      path: {
        /** The offenderNo of prisoner */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to transfer a prisoner */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestForCourtTransferIn']
      }
    }
  }
  setCurfewChecks: {
    parameters: {
      path: {
        bookingId: number
      }
    }
    responses: {
      /** The checks passed flag was set */
      204: never
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HdcChecks']
      }
    }
  }
  clearCurfewChecks: {
    parameters: {
      path: {
        bookingId: number
      }
    }
    responses: {
      /** The checks passed flag was cleared */
      204: never
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  setApprovalStatus: {
    parameters: {
      path: {
        bookingId: number
      }
    }
    responses: {
      /** The new approval status was set */
      204: never
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ApprovalStatus']
      }
    }
  }
  clearApprovalStatus: {
    parameters: {
      path: {
        bookingId: number
      }
    }
    responses: {
      /** The new approval status was cleared */
      204: never
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Update categorisation record with new next review date. */
  updateCategorisationNextReviewDate: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
        /** The new next review date (in YYYY-MM-DD format) */
        nextReviewDate: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Forbidden - user not authorised to update the categorisation. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Active categorisation not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** This endpoint should only be used with edge case categorisations. */
  setCategorisationInactive: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
      }
      query: {
        /** Indicates which categorisation statuses to set.<li>ACTIVE (default): set all active (i.e. approved) categorisations inactive,</li><li>PENDING: set all pending (i.e. awaiting approval) categorisations inactive,</li> */
        status?: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Invalid request - e.g. invalid status. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to update categorisations. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Update categorisation record with rejection. */
  rejectCategorisation: {
    responses: {
      /** Created */
      201: unknown
      /** Validation error - e.g. comment too long or committee code does not exist. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CategoryRejectionDetail']
      }
    }
  }
  /** This is intended for use by the categoriser to correct any problems with a pending (in-progress) categorisation. Fields left as null will be left unchanged */
  updateCategorisation: {
    responses: {
      /** OK */
      200: unknown
      /** Invalid request - e.g. category does not exist. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CategorisationUpdateDetail']
      }
    }
  }
  /** Create new categorisation record. The booking id and new sequence number is returned. */
  createCategorisation: {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': { [key: string]: number }
        }
      }
      /** Invalid request - e.g. category does not exist. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CategorisationDetail']
      }
    }
  }
  /** Update categorisation record with approval. */
  approveCategorisation: {
    responses: {
      /** Created */
      201: unknown
      /** Validation error - e.g. category does not exist. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CategoryApprovalDetail']
      }
    }
  }
  /** Requires OFFENCE_MAINTAINER role */
  updateOffences: {
    responses: {
      /** Offence updated successfully */
      204: never
      /** A dependent resource is missing (either the offence or the home office code doesnt exist) */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenceDto'][]
      }
    }
  }
  /** Requires OFFENCE_MAINTAINER role */
  createOffences: {
    responses: {
      /** Offences created successfully */
      201: unknown
      /** A dependent resource is missing (either the statute or the home office code doesnt exist) */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** A record already exists for a passed in offence */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenceDto'][]
      }
    }
  }
  /** Cancels a scheduled prison to prison move for an offender. */
  cancelPrisonToPrisonMove: {
    parameters: {
      path: {
        /** The offender booking linked to the scheduled event. */
        bookingId: number
        /** The identifier of the scheduled event to be cancelled. */
        eventId: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonMoveCancellation']
      }
    }
  }
  moveToCellSwap: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderBooking']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestMoveToCellSwap']
      }
    }
  }
  moveToCell: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
        /** The cell location the offender has been moved to */
        internalLocationDescription: string
      }
      query: {
        /** The reason code for the move (from reason code domain CHG_HOUS_RSN) */
        reasonCode: string
        /** The date / time of the move (defaults to current) */
        dateTime?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CellMoveResult']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Amends the scheduled court hearing date and/or time for an offender. */
  courtHearingDateAmendment: {
    parameters: {
      path: {
        /** The offender booking to associate the update with. */
        bookingId: number
        /** The  court hearing to be updated. */
        hearingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CourtHearing']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourtHearingDateAmendment']
      }
    }
  }
  updateAlert: {
    parameters: {
      path: {
        /** bookingId */
        bookingId: number
        /** alertSeq */
        alertSeq: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Alert']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AlertChanges']
      }
    }
  }
  /** Update offender attendance and pay. */
  updateAttendance: {
    parameters: {
      path: {
        /** The booking Id of the prisoner */
        bookingId: number
        /** The activity id */
        activityId: number
      }
    }
    responses: {
      /** Attendance data has been updated */
      201: unknown
      /** Invalid request - e.g. validation error. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to attend activity. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Resource not found - booking or event does not exist or is not accessible to user. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Internal server error. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAttendance']
      }
    }
  }
  updateAttendance_1: {
    parameters: {
      path: {
        /** The offenderNo of the prisoner */
        offenderNo: string
        /** The activity id */
        activityId: number
      }
    }
    responses: {
      /** Attendance data has been updated */
      201: unknown
      /** Invalid request - e.g. validation error. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to attend activity. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Resource not found - booking or event does not exist or is not accessible to user. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Internal server error. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAttendance']
      }
    }
  }
  /** Update offender attendance and pay. */
  updateAttendanceForMultipleBookingIds: {
    responses: {
      /** Attendance data has been updated */
      201: unknown
      /** Invalid request - e.g. validation error. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to attend activity. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Resource not found - booking or event does not exist or is not accessible to user. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Internal server error. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAttendanceBatch']
      }
    }
  }
  updateAppointmentComment: {
    parameters: {
      path: {
        /** The appointment's unique identifier. */
        appointmentId: number
      }
    }
    responses: {
      /** The appointment's comment has been set. */
      204: never
      /** The client is not authorised for this operation */
      403: unknown
      /** The appointment was not found. */
      404: unknown
    }
    requestBody: {
      content: {
        'text/plain': string
      }
    }
  }
  /** Agency detail. */
  getAgency: {
    parameters: {
      path: {
        /** The ID of the agency */
        agencyId: string
      }
      query: {
        /** Only return active agencies */
        activeOnly?: boolean
        /** Agency Type */
        agencyType?: string
        /** Returns Address Information */
        withAddresses?: boolean
        /** Don't format the location */
        skipFormatLocation?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Agency']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires MAINTAIN_REF_DATA */
  updateAgency: {
    parameters: {
      path: {
        /** The ID of the agency */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Agency']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to update a agency location */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToUpdateAgency']
      }
    }
  }
  /** Requires MAINTAIN_REF_DATA */
  updateAgencyAddress: {
    parameters: {
      path: {
        /** The ID of the agency */
        agencyId: string
        /** The ID of the address */
        addressId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AddressDto']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to update a agency address */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToUpdateAddress']
      }
    }
  }
  /** Requires MAINTAIN_REF_DATA */
  deleteAgencyAddress: {
    parameters: {
      path: {
        /** The ID of the agency */
        agencyId: string
        /** The ID of the address */
        addressId: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Forbidden - user not authorised to delete a agency address */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires MAINTAIN_REF_DATA */
  updateAgencyAddressPhoneContact: {
    parameters: {
      path: {
        /** The ID of the agency */
        agencyId: string
        /** The ID of the address */
        addressId: number
        /** The ID of the contact */
        phoneId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Telephone']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to update a agency address */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToUpdatePhone']
      }
    }
  }
  /** Requires MAINTAIN_REF_DATA */
  deleteAgencyAddressPhoneContact: {
    parameters: {
      path: {
        /** The ID of the agency */
        agencyId: string
        /** The ID of the address */
        addressId: number
        /** The ID of the contact */
        phoneId: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Forbidden - user not authorised to delete a agency address */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** The valid prison_id and type combinations are defined in the Nomis transaction_operations table which is maintained by the Maintain Transaction Operations screen (OCMTROPS), from the Financials Maintenance menu. Only those prisons (Caseloads) and Transaction types associated with the NOMISAPI module are valid.<br/>This will be setup by script intially as part of the deployment process as shown below<br/><br/><table><tr><th>Transaction Type</th><th>Description</th><th>Digital Prison</th><th>Non Digital Prison</th></tr><tr><td>CANT</td><td>Canteen Spend</td><td>Yes</td><td>No</td></tr><tr><td>REFND</td><td>Canteen Refund</td><td>Yes</td><td>No</td></tr><tr><td>PHONE</td><td>Phone Credit</td><td>Yes</td><td>No</td></tr><tr><td>MRPR</td><td>Misc Receipt - Private Cash</td><td>Yes</td><td>Yes</td></tr><tr><td>MTDS</td><td>Money through digital service</td><td>Yes</td><td>Yes</td></tr><tr><td>DTDS</td><td>Disbursement through Digital service</td><td>Yes</td><td>Yes</td></tr><tr><td>CASHD</td><td>Cash Disbursement</td><td>Yes</td><td>Yes</td></tr><tr><td>RELA</td><td>Money to Relatives</td><td>Yes</td><td>Yes</td></tr><tr><td>RELS</td><td>Money to Relatives- Spends</td><td>Yes</td><td>Yes</td></tr></table>Notes:<br/><ul><li>The sub_account the amount is debited or credited from will be determined by the transaction_type definition in NOMIS.</li><li>If the field X-Client-Name is present in the request header then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway.</li><li>The client_unique_ref can have a maximum of 64 characters, only alphabetic, numeric, ‘-’ and ‘_’ characters are allowed</li></ul> */
  createTransaction: {
    parameters: {
      header: {
        /** If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway. */
        'X-Client-Name'?: string
      }
      path: {
        /** Prison ID */
        prison_id: string
        /** Offender Noms Id */
        noms_id: string
      }
    }
    responses: {
      /** Transaction Created */
      201: {
        content: {
          'application/json': components['schemas']['Transaction']
        }
      }
      /** One of: <ul><li>Insufficient Funds - The prisoner has insufficient funds in the required account to cover the cost of the debit transaction</li><li>Offender not in specified prison - prisoner identified by {noms_id} is not in prison {prison_id}</li><li>Invalid transaction type - The transaction type has not been set up for the API for {prison_id}</li><li>Finance Exception - An unexpected error has occurred. Details will have been logged in the nomis_api_logs table on the Nomis database.</li></ul> */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Duplicate post - The unique_client_ref has been used before */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTransaction']
      }
    }
  }
  /**
   * Pay events will be stored in a table on receipt by Nomis to be processed by a batch job scheduled to run after the last Nomis payroll batch job but before the advances and scheduled payments batch jobs.
   * <br/>Possible payment types are:<br/><table><tr><td>A_EARN</td><td>Credit, Offender Payroll</td></tr><tr><td>ADJ</td><td>Debit, Adjudication Award</td></tr></table><br/>Example request:<br/>{
   *   "type": "A_EARN",
   *   "description": "May earnings",
   *   "amount": 1,
   *   "client_transaction_id": "PAY-05-19"
   * }<br/>The valid prison_id and type combinations are defined in the Nomis transaction_operations table which is maintained by the Maintain Transaction Operations screen (OCMTROPS), from the Financials Maintenance menu.
   * Only those prisons (Caseloads) and Transaction types associated with the NOMISAPI module are valid.<br/>This will be setup by script intially as part of the deployment process as shown below<br/><br/>
   */
  storePayment: {
    parameters: {
      path: {
        /** Prison ID */
        prison_id: string
        /** Offender Noms Id */
        noms_id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PaymentResponse']
        }
      }
      /** One of: <ul><li>Offender not in specified prison - prisoner identified by {noms_id} is not in prison {prison_id}</li><li>Invalid payment type</li><li>Client reference more than 12 characters</li><li>Missing data in request</li><li>Exception - An unexpected error has occurred. Details will have been logged in the nomis_api_logs table on the Nomis database.</li></ul> */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested prison or offender could not be found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Duplicate post - after an error with a post this response will be given for subsequent duplicate attempts */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['StorePaymentRequest']
      }
    }
  }
  /** <p>Post a financial transaction to Nomis to a prison that the offender is no longer at.</p><p>The valid prison_id and type combinations are defined in the Nomis transaction_operations table which is maintained by the Maintain Transaction Operations screen (OCMTROPS), from the Financials Maintenance menu. Only those prisons (Caseloads) and Transaction types associated with the NOMISAPI module are valid. Only Transaction types with a usage of R (Receipt) are valid.Transaction Types are maintained via the Maintain Transaction Types screen (OCMTRANS).</p><p>Transaction is posted to the specified prison.  if the account has been closed at this prison then it is re-opened first.</p><p>If the offender has been transferred to another prison then the funds are transferred to this prison.</p><p>If the account was previously closed then it will be closed again.</p><p>If the offender has been released then the funds are transferred to NACRO. Based on the Nomis Clear Inactive accounts screen (OTDCLINA).</p> */
  transferTransaction: {
    parameters: {
      header: {
        /** If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway. */
        'X-Client-Name'?: string
      }
      path: {
        /** Prison ID */
        previous_prison_id: string
        /** Offender Noms Id */
        noms_id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Transfer']
        }
      }
      /** One of: <ul><li>Invalid transaction type - The transaction type has not been set up for the API for {prison_id}</li><li>Finance Exception - This indicates an unexpected financial problem, check the nomis_api_log table for details.</li><li>Only receipt transaction types allowed - Only transaction types with a transaction usage of Receipt are allowed.</li><li>Sum of sub account balances not equal to current balance - The sum of all the sub account balances does equal the current balance held for the trust account</li><li>Offender being transferred - The offender is currently in transit</li><li>Offender still in specified prison - The offender is still at the specified prison. Use Record Transaction instead.</li></ul> */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** One of: <ul><li>Offender Not Found - No offender matching the specified offender_id has been found on nomis.</li><li>Offender never at prison - The offender has never been at the specified prison</li></ul> */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Duplicate Post - A transaction already exists with the client_unique_ref provided. */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTransaction']
      }
    }
  }
  /** user details for supplied usernames */
  getUserDetailsList: {
    responses: {
      /** The list of user details */
      200: {
        content: {
          'application/json': components['schemas']['UserDetail'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  imprisonmentDataSetup: {
    parameters: {
      path: {
        /** offenderNo */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Requires role ROLE_SMOKE_TEST */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getVisits: {
    parameters: {
      path: {
        agencyId: string
      }
      query: {
        /** Date of whereabouts list, default today */
        date?: string
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getExternalTransfers: {
    parameters: {
      path: {
        agencyId: string
      }
      query: {
        /** Date of scheduled transfer */
        date: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** Get all events for given date for prisoners in listed cells. Note secondary sort is by start time<p>This endpoint uses the REPLICA database.</p> */
  getEventsByLocationId: {
    parameters: {
      path: {
        /** The prison. */
        agencyId: string
      }
      query: {
        /** Date of whereabouts list, default today */
        date?: string
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header: {
        /** Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getCourtEvents: {
    parameters: {
      path: {
        agencyId: string
      }
      query: {
        /** Date of whereabouts list, default today */
        date?: string
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** Get count of suspended prisoner activities for given date range<p>This endpoint uses the REPLICA database.</p> */
  getCountActivitiesByDateRange: {
    parameters: {
      path: {
        /** The prison. */
        agencyId: string
      }
      query: {
        /** From date of whereabouts list */
        fromDate: string
        /** To Date of whereabouts list */
        toDate: string
        /** Set of one or more of AM, PM or ED */
        timeSlots: ('AM' | 'PM' | 'ED')[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerActivitiesCount']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': { [key: string]: number }
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getAppointments: {
    parameters: {
      path: {
        agencyId: string
      }
      query: {
        /** Date the appointments are scheduled */
        date: string
        /** Location id */
        locationId?: number
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledAppointmentDto'][]
        }
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getAppointmentsForOffenders: {
    parameters: {
      path: {
        agencyId: string
      }
      query: {
        /** Date of whereabouts list, default today */
        date?: string
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** Get all Prisoner activities for given date<p>This endpoint uses the REPLICA database.</p> */
  getActivitiesAtAllLocations: {
    parameters: {
      path: {
        /** The prison. */
        agencyId: string
      }
      query: {
        /** Date of whereabouts list, default today */
        date?: string
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
        /** Include suspended scheduled activity - defaults to false */
        includeSuspended?: boolean
      }
      header: {
        /** Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getActivitiesForBookings: {
    parameters: {
      path: {
        agencyId: string
      }
      query: {
        /** Date of whereabouts list, default today */
        date?: string
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
        /** Whether to include 'excluded' activities in the results */
        includeExcluded?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getActivitiesByEventIds: {
    parameters: {
      path: {
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** List of offenders matching specified criteria.<p>This endpoint uses the REPLICA database.</p> */
  getPrisoners_1: {
    parameters: {
      query: {
        /** If true the result set should include a row for every matched alias.  If the request includes some combination of firstName, lastName and dateOfBirth then this will be a subset of the OFFENDERS records for one or more offenders. Otherwise it will be every OFFENDERS record for each match on the other search criteria. Default is false. */
        includeAliases?: boolean
        /** List of offender NOMS numbers. NOMS numbers have the format:<b>ANNNNAA</b> */
        offenderNo?: string[]
        /** The offender's PNC (Police National Computer) number. */
        pncNumber?: string
        /** The offender's CRO (Criminal Records Office) number. */
        croNumber?: string
        /** The first name of the offender. */
        firstName?: string
        /** The middle name(s) of the offender. */
        middleNames?: string
        /** The last name of the offender. */
        lastName?: string
        /** The offender's date of birth. Cannot be used in conjunction with <i>dobFrom</i> or <i>dobTo</i>. Must be specified using YYYY-MM-DD format. */
        dob?: string
        /** Start date for offender date of birth search. If <i>dobTo</i> is not specified, an implicit <i>dobTo</i> value of <i>dobFrom</i> + 10 years will be applied. If <i>dobTo</i> is specified, it will be adjusted, if necessary, to ensure it is not more than 10 years after <i>dobFrom</i>. Cannot be used in conjunction with <i>dob</i>. Must be specified using YYYY-MM-DD format. */
        dobFrom?: string
        /** End date for offender date of birth search. If <i>dobFrom</i> is not specified, an implicit <i>dobFrom</i> value of <i>dobTo</i> - 10 years will be applied. Cannot be used in conjunction with <i>dob</i>. Must be specified using YYYY-MM-DD format. */
        dobTo?: string
        /** Offender's location filter (IN, OUT or ALL) - defaults to ALL. */
        location?: string
        /** Offender's gender code (F - Female, M - Male, NK - Not Known or NS - Not Specified). */
        gender?: string
        /** If <i>true</i>, the search will use partial, start-of-name matching of offender names (where provided). For example, if <i>lastName</i> criteria of 'AD' is specified, this will match an offender whose last name is 'ADAMS' but not an offender whose last name is 'HADAD'. This will typically increase the number of matching offenders found. This parameter can be used with any other search processing parameter (e.g. <i>prioritisedMatch</i> or <i>anyMatch</i>). */
        partialNameMatch?: boolean
        /** If <i>true</i>, search criteria prioritisation is used and searching/matching will stop as soon as one or more matching offenders are found. The criteria priority is:<br/><br/>1. <i>offenderNo</i><br/> 2. <i>pncNumber</i><br/>3. <i>croNumber</i><br/>4. <i>firstName</i>, <i>lastName</i>, <i>dob</i> <br/>5. <i>dobFrom</i>, <i>dobTo</i><br/><br/>As an example of how this works, if this parameter is set <i>true</i> and an <i>offenderNo</i> is specified and an offender having this offender number is found, searching will stop and that offender will be returned immediately. If no offender matching the specified <i>offenderNo</i> is found, the search will be repeated using the next priority criteria (<i>pncNumber</i>) and so on. Note that offender name and date of birth criteria have the same priority and will be used together to search for matching offenders (In this case the location filter will be ignored). */
        prioritisedMatch?: boolean
        /** If <i>true</i>, offenders that match any of the specified criteria will be returned. The default search behaviour is to only return offenders that match <i>all</i> of the specified criteria. If the <i>prioritisedMatch</i> parameter is also set <i>true</i>, this parameter will only impact the behaviour of searching using offender name and date of birth criteria. */
        anyMatch?: boolean
      }
      header: {
        /** Requested offset of first record in returned collection of prisoner records. */
        'Page-Offset'?: number
        /** Requested limit to number of prisoner records returned. */
        'Page-Limit'?: number
        /** Comma separated list of one or more of the following fields - <b>offenderNo, pncNumber, croNumber, firstName, lastName, dob</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerDetail'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of offenders matching specified criteria.<p>This endpoint uses the REPLICA database.</p> */
  getPrisoners: {
    parameters: {
      header: {
        /** Requested offset of first record in returned collection of prisoner records. */
        'Page-Offset'?: number
        /** Requested limit to number of prisoner records returned. */
        'Page-Limit'?: number
        /** Comma separated list of one or more of the following fields - <b>offenderNo, pncNumber, croNumber, firstName, lastName, dob</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerDetail'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerDetailSearchCriteria']
      }
    }
  }
  createPrisoner: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to create a prisoner. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToCreate']
      }
    }
  }
  newBooking: {
    parameters: {
      path: {
        /** The offenderNo of prisoner */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to receive prisoner on new bookings */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestForNewBooking']
      }
    }
  }
  /**
   * <h3>Algorithm</h3>
   * <ul>
   *   <li>If there is a confirmed release date, the offender release date is the confirmed release date.</li>
   *   <li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li>
   *   <li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li>
   * </ul>
   * <p>This endpoint uses the REPLICA database.</p>
   */
  getOffenderSentences: {
    parameters: {
      query: {
        /** agency/prison to restrict results, if none provided current active caseload will be used, unless offenderNo list is specified */
        agencyId?: string
        /** a list of offender numbers to search. */
        offenderNo?: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderSentenceDetail'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves list of offenders (with associated sentence detail) - POST version to allow large offender lists.<p>This endpoint uses the REPLICA database.</p> */
  postOffenderSentences: {
    responses: {
      /** The list of offenders is returned. */
      200: {
        content: {
          'application/json': components['schemas']['OffenderSentenceDetail'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getBatchLatestHomeDetentionCurfew: {
    responses: {
      /** List of HDC status information */
      200: {
        content: {
          'application/json': components['schemas']['HomeDetentionCurfew'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** Retrieves list of offenders (with associated sentence detail) - POST version using booking id lists.<p>This endpoint uses the REPLICA database.</p> */
  postOffenderSentencesBookings: {
    responses: {
      /** The list of offenders is returned. */
      200: {
        content: {
          'application/json': components['schemas']['OffenderSentenceDetail'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** Requires RELEASE_DATES_CALCULATOR */
  getOffenderKeyDates: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
      }
    }
    responses: {
      /** Offender key dates found */
      200: {
        content: {
          'application/json': components['schemas']['SentenceCalcDates']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to update an offender's dates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires RELEASE_DATES_CALCULATOR */
  updateOffenderKeyDates: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
      }
    }
    responses: {
      /** Offender key dates calculation created */
      201: {
        content: {
          'application/json': components['schemas']['SentenceCalcDates']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to update an offender's dates */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToUpdateOffenderDates']
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getOffenderAssessmentsAssessmentCode: {
    parameters: {
      path: {
        /** Assessment Type Code */
        assessmentCode: string
      }
      query: {
        /** The required offender numbers */
        offenderNo: string[]
        /** Returns only assessments for the current sentence if true, otherwise assessments for all previous sentences are included */
        latestOnly?: boolean
        /** Returns only active assessments if true, otherwise inactive and pending assessments are included */
        activeOnly?: boolean
        /** Returns only the last assessment per sentence if true, otherwise all assessments for the booking are included */
        mostRecentOnly?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Assessment'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  postOffenderAssessmentsAssessmentCode: {
    parameters: {
      path: {
        /** Assessment Type Code */
        assessmentCode: string
      }
      query: {
        /** Returns only assessments for the current sentence if true, otherwise assessments for all previous sentences are included */
        latestOnly?: boolean
        /** Returns only active assessments if true, otherwise inactive and pending assessments are included */
        activeOnly?: boolean
        /** Returns only the last assessment per sentence if true, otherwise all assessments for the booking are included */
        mostRecentOnly?: boolean
      }
    }
    responses: {
      /** The assessment list is returned. */
      200: {
        content: {
          'application/json': components['schemas']['Assessment'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  postOffenderAssessmentsCsraRatings: {
    responses: {
      /** The current CSRA rating for each offender. */
      200: {
        content: {
          'application/json': components['schemas']['AssessmentClassification'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  postOffenderAssessmentsCsraList: {
    responses: {
      /** The CSRA assessment list is returned, 1 per offender. */
      200: {
        content: {
          'application/json': components['schemas']['Assessment'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** Categorisation details for all supplied Offenders using SYSTEM access<p>This endpoint uses the REPLICA database.</p> */
  getOffenderCategorisationsSystem: {
    parameters: {
      query: {
        /** Only get the latest category for each booking */
        latestOnly?: boolean
      }
    }
    responses: {
      /** The list of offenders with categorisation details is returned if categorisation record exists */
      200: {
        content: {
          'application/json': components['schemas']['OffenderCategorise'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getOffenderCategorisations_1: {
    parameters: {
      path: {
        /** Prison id */
        agencyId: string
      }
      query: {
        /** Indicates which type of category information is required.<li>UNCATEGORISED: Offenders who need to be categorised,</li><li>CATEGORISED: Offenders who have an approved categorisation,</li><li>RECATEGORISATIONS: Offenders who will soon require recategorisation</li> */
        type: string
        /** For type CATEGORISED: The past date from which categorisations are returned.<br />For type RECATEGORISATIONS: the future cutoff date: list includes all prisoners who require re-categorisation on or before this date.<br />For type UNCATEGORISED: Ignored; do not set this parameter. */
        date?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderCategorise'][]
        }
      }
    }
  }
  /** Categorisation details for supplied Offenders where agencyId is their create agency and is in the caseload<p>This endpoint uses the REPLICA database.</p> */
  getOffenderCategorisations: {
    parameters: {
      path: {
        /** Prison id */
        agencyId: string
      }
      query: {
        /** Only get the latest category for each booking */
        latestOnly?: boolean
      }
    }
    responses: {
      /** The list of offenders with categorisation details is returned if categorisation record exists and their create agency is in the caseload */
      200: {
        content: {
          'application/json': components['schemas']['OffenderCategorise'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** Requires UPDATE_OFFENCE_SCHEDULES role */
  unlinkOffencesFromSchedules: {
    responses: {
      /** Offences unlinked from schedules successfully */
      200: unknown
      /** Unrecoverable error occurred whilst processing request. */
      500: unknown
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenceToScheduleMappingDto'][]
      }
    }
  }
  getOffencesByStatute: {
    parameters: {
      query: {
        /** Statute Code */
        code: string
        /** Zero-based page index (0..N) */
        page?: number
        /** The size of the page to be returned */
        size?: number
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageOffenceDto']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires OFFENCE_MAINTAINER role */
  createStatute: {
    responses: {
      /** Statutes created successfully */
      201: unknown
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['StatuteDto'][]
      }
    }
  }
  /** Requires UPDATE_OFFENCE_SCHEDULES role */
  linkOffencesToSchedules: {
    responses: {
      /** Offences linked to schedules successfully */
      201: unknown
      /** Unrecoverable error occurred whilst processing request. */
      500: unknown
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenceToScheduleMappingDto'][]
      }
    }
  }
  getOffencesByHoCode: {
    parameters: {
      query: {
        /** HO Code */
        code: string
        /** Zero-based page index (0..N) */
        page?: number
        /** The size of the page to be returned */
        size?: number
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageOffenceDto']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires OFFENCE_MAINTAINER role */
  createHomeOfficeCodes: {
    responses: {
      /** Home Office Notifiable Offence Codes created successfully */
      201: unknown
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HOCodeDto'][]
      }
    }
  }
  /** Returns a list of recently released or moved offender nos and the associated timestamp. */
  getRecentMovementsByDate: {
    parameters: {
      query: {
        /** A timestamp that indicates the earliest record required */
        fromDateTime: string
        /** The date for which movements are searched, defaults to today */
        movementDate?: string
        /** movement type codes to filter by, defaults to TRN, REL, ADM */
        movementTypes?: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Movement'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createExternalMovement: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderMovement']
        }
      }
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['OffenderMovement']
        }
      }
      /** Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateExternalMovement']
      }
    }
  }
  getMovementsByOffenders: {
    parameters: {
      query: {
        /** movement type codes to filter by */
        movementTypes?: string[]
        /** Returns only latest movement for the offenders specified */
        latestOnly?: boolean
        /** Returns all movements for this offender list from all bookings if true */
        allBookings?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Movement'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** Retrieves Specified key worker's currently assigned offenders - POST version to allow larger staff lists. */
  postKeyWorkerAgencyIdCurrentAllocations: {
    parameters: {
      path: {
        /** The agency (prison) identifier. */
        agencyId: string
      }
    }
    responses: {
      /** The allocations list is returned. */
      200: {
        content: {
          'application/json': components['schemas']['KeyWorkerAllocationDetail'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** Retrieves Specified key worker's currently assigned offenders - POST version to allow larger staff lists. */
  postKeyWorkerAgencyIdCurrentAllocationsOffenders: {
    parameters: {
      path: {
        /** The agency (prison) identifier. */
        agencyId: string
      }
    }
    responses: {
      /** The allocations list is returned. */
      200: {
        content: {
          'application/json': components['schemas']['KeyWorkerAllocationDetail'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** Retrieves Specified key worker's currently allocation history - POST version to allow larger staff lists. */
  postKeyWorkerStaffAllocationHistory: {
    responses: {
      /** The allocations history list is returned. */
      200: {
        content: {
          'application/json': components['schemas']['OffenderKeyWorker'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** Retrieves Specified prisoners allocation history - POST version to allow larger allocation lists.<p>This endpoint uses the REPLICA database.</p> */
  postKeyWorkerOffendersAllocationHistory: {
    responses: {
      /** The allocations history list is returned. */
      200: {
        content: {
          'application/json': components['schemas']['OffenderKeyWorker'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  getImagesByOffender: {
    parameters: {
      path: {
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ImageDetail'][]
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires ROLE_IMAGE_UPLOAD. */
  putImageMultiPart: {
    parameters: {
      path: {
        /** The offender number relating to this image. */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ImageDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** IMAGE_UPLOAD role required to access endpoint */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The offender number could not be found or has no bookings. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description The image as a file to upload
           */
          file: string
        }
      }
    }
  }
  /** Notes:<br/><ul><li>If the field X-Client-Name is present in the request header then the value is prepended to the client_unique_ref separated by a dash</li><li>The client_unique_ref can have a maximum of 64 characters, only alphabetic, numeric, ‘-’ and ‘_’ characters are allowed</li></ul> */
  transferToSavings: {
    parameters: {
      header: {
        /** If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway. */
        'X-Client-Name'?: string
      }
      path: {
        /** Prison ID */
        prisonId: string
        /** Offender Noms Id */
        offenderNo: string
      }
    }
    responses: {
      /** Transaction Created */
      201: {
        content: {
          'application/json': components['schemas']['TransferTransaction']
        }
      }
      /** One of: <ul><li>Insufficient Funds - The prisoner has insufficient funds in the required account to cover the cost of the debit transaction</li><li>Offender not in specified prison - prisoner identified by {noms_id} is not in prison {prison_id}</li><li>Finance Exception - An unexpected error has occurred. Details will have been logged in the nomis_api_logs table on the Nomis database.</li></ul> */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Duplicate post - The unique_client_ref has been used before */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TransferTransaction']
      }
    }
  }
  createSentence: {
    parameters: {
      path: {
        /** The required booking id (mandatory) */
        bookingId: number
      }
    }
    responses: {
      /** Sentence created. */
      201: {
        content: {
          'application/json': number
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Sentence']
      }
    }
  }
  createCourtCase: {
    parameters: {
      path: {
        /** The required booking id (mandatory) */
        bookingId: number
      }
    }
    responses: {
      /** Court case created. */
      201: {
        content: {
          'application/json': number
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourtCase']
      }
    }
  }
  createCharge: {
    parameters: {
      path: {
        /** The required booking id (mandatory) */
        bookingId: number
      }
    }
    responses: {
      /** Court case charge created. */
      201: {
        content: {
          'application/json': number
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Charge']
      }
    }
  }
  createAdjustment: {
    parameters: {
      path: {
        /** The required booking id (mandatory) */
        bookingId: number
      }
    }
    responses: {
      /** Sentence created. */
      201: {
        content: {
          'application/json': number
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Adjustment']
      }
    }
  }
  /** Count of case notes<p>This endpoint uses the REPLICA database.</p> */
  getCaseNoteUsageSummary: {
    parameters: {
      query: {
        /** a list of offender numbers to search. */
        offenderNo?: string[]
        /** Staff Id to filter by */
        staffId?: number
        /** Agency Id to filter by */
        agencyId?: string
        /** Number of month to look forward (if fromDate only defined), or back (if toDate only defined). Default is 1 month */
        numMonths?: number
        /** Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered.  If not defined then the numMonth before the current date, unless a toDate is defined when it will be numMonths before toDate */
        fromDate?: string
        /** Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered. If not defined then the current date will be used, unless a fromDate is defined when it will be numMonths after fromDate */
        toDate?: string
        /** Case note type. */
        type?: string
        /** Case note sub-type. */
        subType?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CaseNoteUsage'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves list of case notes grouped by type and offender<p>This endpoint uses the REPLICA database.</p> */
  getCaseNoteUsageSummaryByPost: {
    responses: {
      /** The case note usage list is returned. */
      200: {
        content: {
          'application/json': components['schemas']['CaseNoteUsage'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CaseNoteUsageRequest']
      }
    }
  }
  /** Count of case notes<p>This endpoint uses the REPLICA database.</p> */
  getCaseNoteStaffUsageSummary: {
    parameters: {
      query: {
        /** a list of staffId numbers to use. */
        staffId: string[]
        /** Number of month to look forward (if fromDate only defined), or back (if toDate only defined). Default is 1 month */
        numMonths?: number
        /** Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered.  If not defined then the numMonth before the current date, unless a toDate is defined when it will be numMonths before toDate */
        fromDate?: string
        /** Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered. If not defined then the current date will be used, unless a fromDate is defined when it will be numMonths after fromDate */
        toDate?: string
        /** Case note type. */
        type?: string
        /** Case note sub-type. */
        subType?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CaseNoteStaffUsage'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves list of case notes grouped by type/sub-type and staff<p>This endpoint uses the REPLICA database.</p> */
  getCaseNoteStaffUsageSummaryByPost: {
    responses: {
      /** The case note usage list is returned. */
      200: {
        content: {
          'application/json': components['schemas']['CaseNoteStaffUsage'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CaseNoteStaffUsageRequest']
      }
    }
  }
  /** The contact details and their relationship to the offender */
  getRelationships: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      query: {
        /** filter by the relationship type */
        relationshipType?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Contact'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Create a relationship with an offender */
  createRelationship: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** If successful the Contact object is returned. */
      201: {
        content: {
          'application/json': components['schemas']['Contact']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenderRelationship']
      }
    }
  }
  /** Schedules a future prison to prison move for an offender. */
  prisonToPrison: {
    parameters: {
      path: {
        /** The offender booking to associate the prison to prison move with. */
        bookingId: number
      }
    }
    responses: {
      /** The scheduled prison move. */
      201: {
        content: {
          'application/json': components['schemas']['ScheduledPrisonToPrisonMove']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SchedulePrisonToPrisonMove']
      }
    }
  }
  /** Schedules a prison to court hearing for an offender. */
  prisonToCourt: {
    parameters: {
      path: {
        /** The offender booking to associate the court hearing with. */
        bookingId: number
      }
    }
    responses: {
      /** Court hearing created. */
      201: {
        content: {
          'application/json': components['schemas']['CourtHearing']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonToCourtHearing']
      }
    }
  }
  /** Personal Care Need */
  getPersonalCareNeeds_1: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      query: {
        /** a list of types and optionally subtypes (joined with +) to search. */
        type: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PersonalCareNeeds']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Personal Care Need */
  addPersonalCareNeed: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** If successful the Personal Care Need is returned. */
      201: unknown
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePersonalCareNeed']
      }
    }
  }
  /** Schedules a prison to court hearing for an offender and given court case. */
  prisonToCourt_1: {
    parameters: {
      path: {
        /** The offender booking to associate the court hearing with. */
        bookingId: number
        /** The court case to associate the hearing with. */
        courtCaseId: number
      }
    }
    responses: {
      /** Court hearing created. */
      201: {
        content: {
          'application/json': components['schemas']['CourtHearing']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonToCourtHearing']
      }
    }
  }
  /** All scheduled appointments for offender. */
  getBookingsBookingIdAppointments: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      query: {
        /** Returned appointments must be scheduled on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** Returned appointments must be scheduled on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
      header: {
        /** Requested offset of first record in returned collection of appointment records. */
        'Page-Offset'?: number
        /** Requested limit to number of appointment records returned. */
        'Page-Limit'?: number
        /** Comma separated list of one or more of the following fields - <b>eventDate, startTime, endTime, eventLocation</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
    }
  }
  /** Create appointment for offender. */
  postBookingsBookingIdAppointments: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** The appointment has been recorded. The updated object is returned including the status. */
      201: {
        content: {
          'application/json': components['schemas']['ScheduledEvent']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NewAppointment']
      }
    }
  }
  postAlert: {
    parameters: {
      path: {
        /** bookingId */
        bookingId: number
      }
    }
    responses: {
      /** Alert id. */
      201: {
        content: {
          'application/json': components['schemas']['AlertCreated']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAlert']
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getProvenAdjudicationSummaryForBookings: {
    parameters: {
      query: {
        /** Only proved adjudications ending on or after this date (in YYYY-MM-DD format) will be counted. Default is 3 months */
        adjudicationCutoffDate?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ProvenAdjudicationSummary'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** Offender detail for offenders<p>This endpoint uses the REPLICA database.</p> */
  getBasicInmateDetailsForOffenders: {
    parameters: {
      query: {
        /** Returns only Offender details with an active booking if true, otherwise Offenders without an active booking are included */
        activeOnly?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateBasicDetails'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** Basic offender details by booking ids<p>This endpoint uses the REPLICA database.</p> */
  getBasicInmateDetailsByBookingIds: {
    parameters: {
      path: {
        /** The prison where the offenders are booked - the response is restricted to bookings at this prison */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateBasicDetails'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** The contact details and their relationship to the offender */
  getRelationshipsByOffenderNo: {
    parameters: {
      path: {
        /** The offender Offender No */
        offenderNo: string
      }
      query: {
        /** filter by the relationship type */
        relationshipType: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Contact'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Create a relationship with an offender */
  createRelationshipByOffenderNo: {
    parameters: {
      path: {
        /** The offender Offender No */
        offenderNo: string
      }
    }
    responses: {
      /** If successful the Contact object is returned. */
      201: {
        content: {
          'application/json': components['schemas']['Contact']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenderRelationship']
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getAlertsByOffenderNosAtAgency: {
    parameters: {
      path: {
        /** The prison where the offenders are booked */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Alert'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** Personal Care Needs */
  getPersonalCareNeeds: {
    parameters: {
      query: {
        /** a list of types and optionally subtypes (joined with +) to search. */
        type: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PersonalCareNeeds'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** Personal Care Needs */
  countPersonalCareNeeds: {
    parameters: {
      query: {
        /** problem type */
        type: string
        /** Personal needs care must be on or after this date (in YYYY-MM-DD format). */
        fromStartDate: string
        /** Personal needs care must be on or before this date (in YYYY-MM-DD format). */
        toStartDate: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PersonalCareCounterDto'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getAlertsByOffenderNos: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Alert'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
  }
  /** Post version to allow specifying a large number of bookingIds.<p>This endpoint uses the REPLICA database.</p> */
  getMainOffence: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenceDetail'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** Create multiple appointments */
  createAppointments: {
    responses: {
      /** The appointments have been created. */
      200: {
        content: {
          'application/json': components['schemas']['CreatedAppointmentDetails'][]
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentsToCreate']
      }
    }
  }
  /** Delete multiple appointments. */
  deleteAppointments: {
    responses: {
      /** OK */
      200: unknown
      /** No Content */
      204: never
      /** The client is not authorised for this operation */
      403: unknown
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
  }
  /** List of active agencies. */
  getAgencies: {
    parameters: {
      header: {
        /** Requested offset of first record in returned collection of agency records. */
        'Page-Offset'?: number
        /** Requested limit to number of agency records returned. */
        'Page-Limit'?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Agency'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires MAINTAIN_REF_DATA */
  createAgency: {
    responses: {
      /** The Agency location created */
      201: {
        content: {
          'application/json': components['schemas']['Agency']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to create an agency location */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToCreateAgency']
      }
    }
  }
  /** Requires MAINTAIN_REF_DATA */
  createAgencyAddress: {
    parameters: {
      path: {
        /** The ID of the agency */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AddressDto']
        }
      }
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['AddressDto']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to create a agency address */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToUpdateAddress']
      }
    }
  }
  /** Requires MAINTAIN_REF_DATA */
  createAgencyAddressPhoneContact: {
    parameters: {
      path: {
        /** The ID of the agency */
        agencyId: string
        /** The ID of the address */
        addressId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Telephone']
        }
      }
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['Telephone']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden - user not authorised to create a agency address */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestToUpdatePhone']
      }
    }
  }
  /** returns list slots with capacity details<p>This endpoint uses the REPLICA database.</p> */
  getVisitSlotsWithCapacity: {
    parameters: {
      path: {
        /** Prison ID */
        prison_id: string
      }
      query: {
        /** Start date */
        start_date: string
        /** End date */
        end_date: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['VisitSlots']
        }
      }
      /** Invalid start and end date range */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Prison Not Found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** All transaction amounts are represented as pence values.<p>This endpoint uses the REPLICA database.</p> */
  getTransactionByClientUniqueRef: {
    parameters: {
      header: {
        /** If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway. */
        'X-Client-Name'?: string
      }
      path: {
        /** Prison ID */
        prison_id: string
        /** Offender Noms Id */
        noms_id: string
        /** Client unique reference */
        client_unique_ref: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AccountTransaction']
        }
      }
      /** Not a digital prison.  Prison not found. Offender has no account at this prison. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Prison, offender or accountType not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Gets every hold on an offender’s account or just the hold identified by the client_unique_ref<p>This endpoint uses the REPLICA database.</p> */
  getHolds: {
    parameters: {
      header: {
        /** If present then the value is prepended to the client_unique_ref separated by a dash. When this API is invoked via the Nomis gateway this will already have been created by the gateway. */
        'X-Client-Name'?: string
      }
      path: {
        /** Prison ID */
        prison_id: string
        /** Offender Noms Id */
        noms_id: string
      }
      query: {
        /** Client unique reference */
        client_unique_ref?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Hold'][]
        }
      }
      /** Offender Not Found - No offender matching the specified offender_id has been found on nomis. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Offender not in specified prison */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns balances for the offender’s three sub accounts (spends, savings and cash) at the specified prison.<br/>All balance values are represented as pence values.<p>This endpoint uses the REPLICA database.</p> */
  getAccountBalance: {
    parameters: {
      path: {
        /** Prison ID */
        prison_id: string
        /** Offender Noms Id */
        noms_id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AccountBalance']
        }
      }
      /** Not a digital prison.  Prison not found. Offender has no account at this prison. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Prison or offender was not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Transactions are returned in NOMIS ordee (Descending date followed by id).<br/>All transaction amounts are represented as pence values.<p>This endpoint uses the REPLICA database.</p> */
  getAccountTransactions: {
    parameters: {
      path: {
        /** Prison ID */
        prison_id: string
        /** Offender Noms Id */
        noms_id: string
        /** Account code */
        account_code: string
      }
      query: {
        /** Start date for transactions (defaults to today if not supplied) */
        from_date?: string
        /** To date for transactions (defaults to today if not supplied) */
        to_date?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AccountTransactions']
        }
      }
      /** Not a digital prison.  Prison not found. Offender has no account at this prison. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Prison, offender or accountType not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getLiveRoll: {
    parameters: {
      path: {
        /** Prison ID */
        prison_id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['LiveRoll']
        }
      }
      /** Not a digital prison.  Prison not found. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** returns list of reason if unavailable date<p>This endpoint uses the REPLICA database.</p> */
  getVisitUnavailability: {
    parameters: {
      path: {
        /** Offender Id */
        offender_id: number
      }
      query: {
        /** dates */
        dates: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            [key: string]: components['schemas']['UnavailabilityReason']
          }
        }
      }
      /** Dates requested must be in future */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Offender not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** returns list of contacts<p>This endpoint uses the REPLICA database.</p> */
  getVisitContactList: {
    parameters: {
      path: {
        /** Offender Id */
        offender_id: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ContactList']
        }
      }
      /** Invalid start and end date range */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Offender not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** returns list of dates<p>This endpoint uses the REPLICA database.</p> */
  getVisitAvailableDates: {
    parameters: {
      path: {
        /** Offender Id */
        offender_id: number
      }
      query: {
        /** Start date */
        start_date: string
        /** To date */
        end_date: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AvailableDates']
        }
      }
      /** Invalid start and end date range */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Offender not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getOffender: {
    parameters: {
      path: {
        /** Offender Noms ID */
        noms_id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Offender']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns the PSS detail information for the specified offender including personal data, warnings, sentence details and location information.<br/><ul><li>The 'type' field is always OFFENDER_DETAILS_REQUEST</li><br/><li>The field 'offender_details_request' contains a JSON block of data containing the offender data.</li></ul>The format of 'offender_details_request' is not specified here.<p>This endpoint uses the REPLICA database.</p> */
  getOffenderPssDetail: {
    parameters: {
      path: {
        /** Offender Noms Id */
        noms_id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Event']
        }
      }
      /** Invalid Noms ID */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Offender not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** The levels shows the type of each level of the location address as defined on the Agency Details tab in Maintain Agency Locations screen (OUMAGLOC).<br/><br/>Since the offender's location can change often and is fairly sensitive (and therefore should not automatically be exposed to all services), this information is not included in the general offender information call.<p>This endpoint uses the REPLICA database.</p> */
  getLatestBookingLocation: {
    parameters: {
      path: {
        /** Offender Noms ID */
        noms_id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns a 480wx600h JPEG photograph of the offender. The data is base64 encoded within the image key.<p>This endpoint uses the REPLICA database.</p> */
  getOffenderImage: {
    parameters: {
      path: {
        /** Offender Noms ID */
        noms_id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Image']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns all the bookings, the legal cases for each booking and charges within each legal case.<br/>The ordering is as follows:<ul><li><strong>bookings</strong>: Current or latest booking first, others in descending order of booking date</li><li><strong>legal_cases</strong>: Active cases followed by inactive cases, further ordered by begin_date, latest first</li><li><strong>charges</strong>: Most serious active charge first, then remaining active charges, followed by inactive charges</li></ul><p>This endpoint uses the REPLICA database.</p> */
  getBookings: {
    parameters: {
      path: {
        /** Offender Noms ID */
        noms_id: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Bookings']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns all active alerts for the specified offender or those that meet the optional criteria. Active alerts are listed first, followed by inactive alerts, both sorted by ascending order of alert date.<br/><ul><li>if alert_type is specified then only alerts of that type are returned</li><li>if modified_since is specified then only those alerts created or modified on or after the specified date time. The following formats are supported: 2018-01-10, 2018-01-10 03:34, 2018-01-10 03:34:12, 2018-01-10 03:34:12.123</li><li>If include_inactive=true is specified then inactive alerts are also returned.</li></ul><p>This endpoint uses the REPLICA database.</p> */
  getAlerts: {
    parameters: {
      path: {
        /** Offender Noms Id */
        noms_id: string
      }
      query: {
        /** Alert Type, if alert_type is specified then only alerts of that type are returned */
        alert_type?: string
        /** Modified Since - if modified_since is specified then only those alerts created or modified on or after the specified date time. The following formats are supported: 2018-01-10, 2018-01-10 03:34, 2018-01-10 03:34:12, 2018-01-10 03:34:12.123 */
        modified_since?: string
        /** Include Inactive alerts, If include_inactive=true is specified then inactive alerts are also returned. */
        include_inactive?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Alerts']
        }
      }
      /** Invalid Noms ID */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Offender not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns all events that required to update the prisoner self service application. Currently these are:<ul><li>ALERT</li><li>DISCHARGE</li><li>IEP_CHANGED</li><li>INTERNAL_LOCATION_CHANGED</li><li>NOMS_ID_CHANGED</li><li>PERSONAL_DETAILS_CHANGED</li><li>PERSONAL_OFFICER_CHANGED</li><li>RECEPTION</li><li>SENTENCE_INFORMATION_CHANGED</li><li>BALANCE_UPDATE</li></ul><p>This endpoint uses the REPLICA database.</p> */
  getOffenderEvents: {
    parameters: {
      query: {
        /** Prison ID */
        prison_id: string
        /** Offender Noms Id */
        offender_id?: string
        /** Event Type */
        event_type?: string
        /** From Date Time. The following formats are supported: 2018-01-10, 2018-01-10 03:34, 2018-01-10 03:34:12, 2018-01-10 03:34:12.123 */
        from_datetime: string
        /** Number of events to return */
        limit?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Events']
        }
      }
      /** Invalid Noms ID */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Offender not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** offender id will be returned if offender is found<p>This endpoint uses the REPLICA database.</p> */
  getActiveOffender: {
    parameters: {
      query: {
        /** Offender Noms Id */
        noms_id: string
        /** date of birth */
        date_of_birth: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ActiveOffender']
        }
      }
      /** Invalid Noms ID */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Parameter exception (invalid date, time, format, type) */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** User detail.<p>This endpoint uses the REPLICA database.</p> */
  getUserDetails: {
    parameters: {
      path: {
        /** The username of the user. */
        username: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Current user detail. */
  getMyUserInformation: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['UserDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of roles for current user. */
  getMyRoles: {
    parameters: {
      query: {
        /** If set to true then all roles are returned rather than just API roles */
        allRoles?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['UserRole'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of locations accessible to current user.<p>This endpoint uses the REPLICA database.</p> */
  getMyLocations: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of all case note types (with sub-types) accessible to current user (and based on working caseload). */
  getMyCaseNoteTypes: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of caseloads accessible to current user.<p>This endpoint uses the REPLICA database.</p> */
  getMyCaseLoads: {
    parameters: {
      query: {
        /** If set to true then all caseloads are returned */
        allCaseloads?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CaseLoad'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Staff detail. */
  getStaffDetail: {
    parameters: {
      path: {
        /** The staff id of the staff member. */
        staffId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['StaffDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of job roles for specified staff and agency Id */
  getAllRolesForAgency: {
    parameters: {
      path: {
        /** The staff id of the staff member. */
        staffId: number
        /** Agency Id. */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['StaffRole'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of email addresses for a specified staff user */
  getStaffEmailAddresses: {
    parameters: {
      path: {
        /** The staff id of the staff user. */
        staffId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': string[]
        }
      }
      /** No email addresses were found for this staff member. */
      204: {
        content: {
          'application/json': string[]
        }
      }
      /** The staffId supplied was not valid. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of caseloads for a specified staff user */
  getStaffCaseloads: {
    parameters: {
      path: {
        /** The staff id of the staff user. */
        staffId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CaseLoad'][]
        }
      }
      /** No caseloads were found for this staff member. */
      204: {
        content: {
          'application/json': components['schemas']['CaseLoad'][]
        }
      }
      /** The staffId supplied was not valid or not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get staff members within agency who are currently assigned the specified role.<p>This endpoint uses the REPLICA database.</p> */
  getStaffByAgencyRole: {
    parameters: {
      path: {
        /** The agency (prison) id. */
        agencyId: string
        /** The staff role. */
        role: string
      }
      query: {
        /** Filter results by first name and/or last name of staff member. Supplied filter term is matched to start of staff member's first and last name. */
        nameFilter?: string
        /** The staff id of a staff member. */
        staffId?: number
        /** Filters results by activeOnly staff members. */
        activeOnly?: boolean
      }
      header: {
        /** Requested offset of first record in returned collection of role records. */
        'Page-Offset'?: number
        /** Requested limit to number of role records returned. */
        'Page-Limit'?: number
        /** Comma separated list of one or more of the following fields - <b>firstName, lastName</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['StaffLocationRole'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get all Prisoner activities for given date range<p>This endpoint uses the REPLICA database.</p> */
  getSuspendedActivitiesAtAllLocationsByDateRange: {
    parameters: {
      path: {
        /** The prison. */
        agencyId: string
      }
      query: {
        /** From date of whereabouts list, default today */
        fromDate?: string
        /** To Date of whereabouts list, default from date */
        toDate?: string
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get all Prisoner events for given date at location.<p>This endpoint uses the REPLICA database.</p> */
  getLocationEvents: {
    parameters: {
      path: {
        /** The prison. */
        agencyId: string
        /** The location id where event is held. */
        locationId: number
        /** The locationUsage code from the location object - one of the INTERNAL_LOCATION_USAGE reference codes. */
        usage: string
      }
      query: {
        /** Date of whereabouts list, default today */
        date?: string
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header: {
        /** Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get all Prisoner activities for given date range<p>This endpoint uses the REPLICA database.</p> */
  getActivitiesAtAllLocationsByDateRange: {
    parameters: {
      path: {
        /** The prison. */
        agencyId: string
      }
      query: {
        /** From date of whereabouts list, default today */
        fromDate?: string
        /** To Date of whereabouts list, default from date */
        toDate?: string
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
        /** Include suspended scheduled activity - defaults to false */
        includeSuspended?: boolean
      }
      header: {
        /** Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get all Prisoner activities for given date at location.<p>This endpoint uses the REPLICA database.</p> */
  getActivitiesAtLocation: {
    parameters: {
      path: {
        /** The location id where activity is held. */
        locationId: number
      }
      query: {
        /** Date of whereabouts list, default today */
        date?: string
        /** AM, PM or ED */
        timeSlot?: 'AM' | 'PM' | 'ED'
        /** Include suspended scheduled activity - defaults to false */
        includeSuspended?: boolean
      }
      header: {
        /** Comma separated list of one or more of the following fields - <b>cellLocation or lastName</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerSchedule'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLastRestoreDate: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': string
        }
      }
      /** No restore information found - this endpoint is only guaranteed to return information when run on pre-prod. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get possible reason codes for created event.<p>This endpoint uses the REPLICA database.</p> */
  getScheduleReasons: {
    parameters: {
      query: {
        /** Specify event type. */
        eventType: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** A reference domain can be used to retrieve all codes related to that domain. Ordered by domain ascending<p>This endpoint uses the REPLICA database.</p> */
  getAllReferenceDomains: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceDomain'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of reference codes for reference domain paged. Please note this API has the incorrect name so the non-paged /domains/{domain}/codes version is preferred.<p>This endpoint uses the REPLICA database.</p> */
  getReferenceCodesByDomain: {
    parameters: {
      path: {
        /** The domain identifier/name. */
        domain: string
      }
      query: {
        /** Specify whether or not to return reference codes with their associated sub-codes. */
        withSubCodes?: boolean
      }
      header: {
        /** Requested offset of first record in returned collection of domain records. */
        'Page-Offset'?: number
        /** Requested limit to number of domain records returned. */
        'Page-Limit'?: number
        /** Comma separated list of one or more of the following fields - <b>code, description</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Wild card can be specified<p>This endpoint uses the REPLICA database.</p> */
  getReferenceCodeByDomainAndDescription: {
    parameters: {
      path: {
        /** The domain identifier/name. */
        domain: string
      }
      query: {
        /** decription of a reference code to find */
        description: string
        /** Specify whether or not to wild card the results */
        wildcard?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of reference codes for reference domain ordered by code ascending. The list is an un-paged flat list<p>This endpoint uses the REPLICA database.</p> */
  getReferenceCodesByDomain_1: {
    parameters: {
      path: {
        /** The domain identifier/name. */
        domain: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of all used case note types (with sub-types).<p>This endpoint uses the REPLICA database.</p> */
  getCaseNoteTypes: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of case note source codes.<p>This endpoint uses the REPLICA database.</p> */
  getCaseNoteSources: {
    parameters: {
      header: {
        /** Requested offset of first record in returned collection of caseNoteSource records. */
        'Page-Offset'?: number
        /** Requested limit to number of caseNoteSource records returned. */
        'Page-Limit'?: number
        /** Comma separated list of one or more of the following fields - <b>code, description</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of alert types (with alert codes).<p>This endpoint uses the REPLICA database.</p> */
  getAlertTypes: {
    parameters: {
      header: {
        /** Requested offset of first record in returned collection of alertType records. */
        'Page-Offset'?: number
        /** Requested limit to number of alertType records returned. */
        'Page-Limit'?: number
        /** Comma separated list of one or more of the following fields - <b>code, description</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getQuestionnaire: {
    parameters: {
      path: {
        /** Category */
        category: string
        /** Code */
        code: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Questionnaire']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of offenders globally matching the offenderNo. */
  getPrisonersOffenderNo: {
    parameters: {
      path: {
        /** The offenderNo to search for */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerDetail'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerInformationById: {
    parameters: {
      path: {
        /** Offender No (NOMS ID) */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerInformation']
        }
      }
      /** Unauthorized. */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** User not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerDetailAtLocation: {
    parameters: {
      path: {
        /** Establishment Code */
        establishmentCode: string
      }
      query: {
        /** Zero-based page index (0..N) */
        page?: number
        /** The size of the page to be returned */
        size?: number
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PagePrisonerInformation']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Pagination In Headers */
  getPrisonerDetailAtLocationOld: {
    parameters: {
      path: {
        /** Establishment Code */
        establishmentCode: string
      }
      header: {
        /** Requested offset of first record in returned collection of prisoner records. */
        'Page-Offset'?: number
        /** Requested limit to number of prisoner records returned. */
        'Page-Limit'?: number
        /** Comma separated list of one or more of the following fields - <b>bookingId, nomsId, cellLocation</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerInformation'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** The phone numbers for person */
  getPersonPhones: {
    parameters: {
      path: {
        /** The persons NOMIS identifier (personId). */
        personId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Telephone'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** The most recent value of each type of person identifier */
  getPersonIdentifiers: {
    parameters: {
      path: {
        /** The persons NOMIS identifier (personId). */
        personId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PersonIdentifier'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** The emails for person */
  getPersonEmails: {
    parameters: {
      path: {
        /** The persons NOMIS identifier (personId). */
        personId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Email'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** The addresses for person */
  getPersonAddresses: {
    parameters: {
      path: {
        /** The persons NOMIS identifier (personId). */
        personId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AddressDto'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffender_1: {
    parameters: {
      header: {
        /** Version of Offender details, default is 1.0, Beta is version 1.1_beta and is WIP (do not use in production) */
        version?: string
      }
      path: {
        /** The offenderNo of offender */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Transactions are returned in order of entryDate descending and sequence ascending).<br/>All transaction amounts are represented as pence values.<p>This endpoint uses the REPLICA database.</p> */
  getTransactionsHistory: {
    parameters: {
      path: {
        /** Offender No */
        offenderNo: string
      }
      query: {
        /** Account code */
        account_code?: string
        /** Start date for transactions, format yyyy-MM-dd */
        from_date?: string
        /** To date for transactions, format yyyy-MM-dd */
        to_date?: string
        /** Transaction type */
        transaction_type?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderTransactionHistoryDto'][]
        }
      }
      /** Not a digital offender. Offender has no account at this prison. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Prison, offender or accountType not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieve an single offender sentence details */
  getOffenderSentenceDetail: {
    parameters: {
      path: {
        /** Noms ID or Prisoner number (also called offenderNo) */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderSentenceDetail']
        }
      }
    }
  }
  /** All future events for offender that are in a scheduled and not cancelled state. */
  getScheduledEvents: {
    parameters: {
      path: {
        /** Offender No */
        offenderNo: string
      }
      query: {
        /** Returned events must be scheduled on or after this date (in YYYY-MM-DD format).  The from date must be on or after today. */
        fromDate?: string
        /** Returned events must be scheduled on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderPrisonPeriods: {
    parameters: {
      path: {
        /** The offenderNo of offender */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerInPrisonSummary']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get offender visit restrictions by offender No */
  getVisitRestrictions: {
    parameters: {
      path: {
        /** Offender No */
        offenderNo: string
      }
      query: {
        /** return only restriction that are active (derived from startDate and expiryDate) */
        activeRestrictionsOnly?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderRestrictions']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get offender non-association details by offender No */
  getNonAssociationDetails: {
    parameters: {
      path: {
        /** Offender No */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderNonAssociationDetails']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Military Records */
  getMilitaryRecords: {
    parameters: {
      path: {
        /** Offender No */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['MilitaryRecords']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Can be filtered by participation type and incident type */
  getIncidentsByOffenderNo: {
    parameters: {
      path: {
        /** offenderNo */
        offenderNo: string
      }
      query: {
        /** incidentType */
        incidentType: string[]
        /** participationRoles */
        participationRoles: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['IncidentCase'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** All scheduled events for offender. */
  getEvents: {
    parameters: {
      path: {
        /** Offender No */
        offenderNo: string
      }
      query: {
        /** Returned events must be scheduled on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** Returned events must be scheduled on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderDamageObligations: {
    parameters: {
      path: {
        /** offenderNo */
        offenderNo: string
      }
      query: {
        /** Filter by obligation status. Leave blank to return all */
        status?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderDamageObligationResponse']
        }
      }
      /** Offender does not exists or is in a different caseload to the user */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Active Contacts including restrictions, using latest offender booking  and including inactive contacts by default */
  getOffenderContacts: {
    parameters: {
      path: {
        /** Offender No */
        offenderNo: string
      }
      query: {
        /** return only contacts approved for visits */
        approvedVisitorsOnly?: boolean
        /** return only active contacts, nb visitors can be inactive contacts */
        activeOnly?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderContacts']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieve an single offender case note */
  getOffenderCaseNote: {
    parameters: {
      path: {
        /** Noms ID or Prisoner number (also called offenderNo) */
        offenderNo: string
        /** The case note id */
        caseNoteId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CaseNote']
        }
      }
    }
  }
  /** Retrieve an offenders case notes for latest booking<p>This endpoint uses the REPLICA database.</p> */
  getOffenderCaseNotes: {
    parameters: {
      path: {
        /** Noms ID or Prisoner number (also called offenderNo) */
        offenderNo: string
      }
      query: {
        /** start contact date to search from */
        from?: string
        /** end contact date to search up to (including this date) */
        to?: string
        /** Filter by case note type */
        type?: string
        /** Filter by case note sub-type */
        subType?: string
        /** Filter by the ID of the prison */
        prisonId?: string
        /** Zero-based page index (0..N) */
        page?: number
        /** The size of the page to be returned */
        size?: number
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CaseNote']
        }
      }
    }
  }
  /** System or cat tool access only */
  getAlertsForLatestBookingByOffenderNo: {
    parameters: {
      path: {
        /** Noms ID or Prisoner number */
        offenderNo: string
      }
      query: {
        /** Comma separated list of alertCodes to filter by */
        alertCodes?: string
        /** Comma separated list of one or more Alert fields */
        sort?: string
        /** Sort order */
        direction?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Alert'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieve an single offender sentence details */
  getLatestSentenceSummary: {
    parameters: {
      path: {
        /** Noms ID or Prisoner number (also called offenderNo) */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['SentenceSummary']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** System or cat tool access only */
  getAlertsForAllBookingByOffenderNo: {
    parameters: {
      path: {
        /** Noms ID or Prisoner number */
        offenderNo: string
      }
      query: {
        /** Comma separated list of alertCodes to filter by */
        alertCodes?: string
        /** Comma separated list of one or more Alert fields */
        sort?: string
        /** Sort order */
        direction?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Alert'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAdjudicationsByOffenderNo: {
    parameters: {
      path: {
        /** offenderNo */
        offenderNo: string
      }
      query: {
        /** An offence id to allow optionally filtering by type of offence */
        offenceId?: string
        /** An agency id to allow optionally filtering by the agency in which the offence occurred */
        agencyId?: string
        /** Finding code to allow optionally filtering by type of finding */
        finding?: string
        /** Adjudications must have been reported on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** Adjudications must have been reported on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
      header: {
        /** Requested offset of first record in returned collection of adjudications. */
        'Page-Offset'?: number
        /** Requested limit to number of adjudications returned. */
        'Page-Limit'?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AdjudicationSearchResponse']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAdjudication: {
    parameters: {
      path: {
        /** offenderNo */
        offenderNo: string
        /** adjudicationNo */
        adjudicationNo: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AdjudicationDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAddressesByOffenderNo: {
    parameters: {
      path: {
        /** offenderNo */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AddressDto'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNextPrisonerIdentifier: {
    responses: {
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** This query is slow and can take several minutes */
  getIncidentCandidates: {
    parameters: {
      query: {
        /** A recent timestamp that indicates the earliest time to consider. NOTE More than a few days in the past can result in huge amounts of data. */
        fromDateTime: string
      }
      header: {
        /** Requested offset of first offender in returned list. */
        'Page-Offset'?: number
        /** Requested limit to number of offenders returned. */
        'Page-Limit'?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': string[]
        }
      }
    }
  }
  getOffenderNumbers: {
    parameters: {
      header: {
        /** Requested offset of first Noms ID in returned list. */
        'Page-Offset'?: number
        /** Requested limit to the Noms IDs returned. */
        'Page-Limit'?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderNumber'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** This query is slow and can take several minutes<p>This endpoint uses the REPLICA database.</p> */
  getAlertCandidates: {
    parameters: {
      query: {
        /** A recent timestamp that indicates the earliest time to consider. NOTE More than a few days in the past can result in huge amounts of data. */
        fromDateTime: string
      }
      header: {
        /** Requested offset of first offender in returned list. */
        'Page-Offset'?: number
        /** Requested limit to number of offenders returned. */
        'Page-Limit'?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': string[]
        }
      }
    }
  }
  /** Version 1<p>This endpoint uses the REPLICA database.</p> */
  getOffenderSentencesHomeDetentionCurfewCandidates: {
    responses: {
      /** Sentence details for offenders who are candidates for Home Detention Curfew. */
      200: {
        content: {
          'application/json': components['schemas']['OffenderSentenceCalcBaseSentenceCalcDates'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSentenceAndOffenceDetails: {
    parameters: {
      path: {
        /** The required booking id (mandatory) */
        bookingId: number
      }
    }
    responses: {
      /** Sentence and offence details for a prisoner. */
      200: {
        content: {
          'application/json': components['schemas']['OffenderSentenceAndOffences']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderSentenceTerms: {
    parameters: {
      path: {
        /** The required booking id (mandatory) */
        bookingId: number
      }
      query: {
        filterBySentenceTermCodes?: string[]
      }
    }
    responses: {
      /** Sentence term details for a prisoner. */
      200: {
        content: {
          'application/json': components['schemas']['OffenderSentenceTerms']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestHomeDetentionCurfew: {
    parameters: {
      path: {
        bookingId: number
      }
    }
    responses: {
      /** HDC information */
      200: {
        content: {
          'application/json': components['schemas']['HomeDetentionCurfew']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of offenders that are related to this person Id and relationship type */
  getBookingsByPersonIdAndType: {
    parameters: {
      path: {
        /** Person Id of the contact person */
        personId: number
        /** Relationship Type */
        relationshipType: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderSummary'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of offenders */
  getBookingsByExternalRefAndType: {
    parameters: {
      path: {
        /** External Unique Reference to Contact Person */
        externalRef: string
        /** Relationship Type */
        relationshipType: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderSummary'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderFinePayments: {
    parameters: {
      path: {
        /** The required booking id (mandatory) */
        bookingId: number
      }
    }
    responses: {
      /** Offender fine payment details for a prisoner. */
      200: {
        content: {
          'application/json': components['schemas']['OffenderFinePaymentDto']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderCsraAssessments: {
    parameters: {
      path: {
        /** The offender number */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AssessmentSummary'][]
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderCsraAssessment: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
        /** The assessment sequence number for the given offender booking */
        assessmentSeq: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AssessmentDetail']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getAssessments: {
    parameters: {
      query: {
        /** The required offender numbers Ids (mandatory) */
        offenderNo: string[]
        /** Returns only assessments for the current sentence if true, otherwise assessments for all previous sentences are included */
        latestOnly?: boolean
        /** Returns only active assessments if true, otherwise inactive and pending assessments are included */
        activeOnly?: boolean
        /** Returns only the last assessment per sentence if true, otherwise all assessments for the booking are included */
        mostRecentOnly?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Assessment'][]
        }
      }
      /** Invalid request - e.g. no offender numbers provided. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getHistoricalAttendances: {
    parameters: {
      path: {
        /** The offenderNo of the prisoner */
        offenderNo: string
      }
      query: {
        /** Only include attendences on or after this date */
        fromDate: string
        /** Only include attendences on or before this date */
        toDate: string
        /** Only include attendences which have this outcome (default all) */
        outcome?: string
        /** Zero-based page index (0..N) */
        page?: number
        /** The size of the page to be returned */
        size?: number
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    responses: {
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** This includes suspended activities<p>This endpoint uses the REPLICA database.</p> */
  getRecentStartedActivities: {
    parameters: {
      path: {
        /** The offenderNo of the prisoner */
        offenderNo: string
      }
      query: {
        /** Only include activities that have not ended or have an end date after the given date */
        earliestEndDate: string
        /** Zero-based page index (0..N) */
        page?: number
        /** The size of the page to be returned */
        size?: number
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    responses: {
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActiveOffences: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number
        /** The size of the page to be returned */
        size?: number
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageOffenceDto']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffencesByDescription: {
    parameters: {
      query: {
        /** Search text of the offence */
        searchText: string
        pageable: components['schemas']['Pageable']
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageOffenceDto']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffencesThatStartWith: {
    parameters: {
      path: {
        /** The offence code */
        offenceCode: string
      }
      query: {
        /** Zero-based page index (0..N) */
        page?: number
        /** The size of the page to be returned */
        size?: number
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageOffenceDto']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffences: {
    parameters: {
      query: {
        /** Zero-based page index (0..N) */
        page?: number
        /** The size of the page to be returned */
        size?: number
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageOffenceDto']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffendersOutToday: {
    parameters: {
      path: {
        /** The prison id */
        agencyId: string
        /** date */
        isoDate: string
      }
      query: {
        /** The optional movement type to filter by e.g CRT, REL, TAP, TRN */
        movementType?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderOutTodayDto'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Offenders who entered a prison during a time period.<p>This endpoint uses the REPLICA database.</p> */
  getMovementsIn: {
    parameters: {
      path: {
        /** The prison id */
        agencyId: string
      }
      query: {
        /** Returns movements for inactive prisoners */
        allMovements?: boolean
        /** fromDateTime */
        fromDateTime: string
        /** toDateTime */
        toDateTime?: string
      }
      header: {
        /** Requested offset of first record in returned collection of prisoner records. */
        'Page-Offset'?: number
        /** Requested limit to number of records returned. */
        'Page-Limit'?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderIn'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Information on offenders in on given date. */
  getMovementsIn_1: {
    parameters: {
      path: {
        /** The prison id */
        agencyId: string
        /** date */
        isoDate: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderIn'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Enroute to reception */
  getEnrouteOffenderMovements: {
    parameters: {
      path: {
        /** The prison id */
        agencyId: string
      }
      query: {
        /** Optional filter on date of movement */
        movementDate?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderMovement'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getUpcomingCourtAppearances: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CourtEventBasic'][]
        }
      }
    }
  }
  /** Planned movements are recorded as events of type court, release or transfers/appointments. When these events are started they are actualised as external movements.<p>This endpoint uses the REPLICA database.</p> */
  getTransfers: {
    parameters: {
      query: {
        /** One or more agencyId values eg.agencyId=LEI&agencyId=MDI */
        agencyId: string[]
        /** From date and time ISO 8601 format without timezone e.g. YYYY-MM-DDTHH:MM:SS */
        fromDateTime: string
        /** To date and time in ISO 8601 format without timezone e.g. YYYY-MM-DDTHH:MM:SS */
        toDateTime: string
        /** Set to true to include planned court events */
        courtEvents?: boolean
        /** Set to true to include planned release events */
        releaseEvents?: boolean
        /** Set to true to include planned transfer/appointment events */
        transferEvents?: boolean
        /** Set to true to include confirmed movements */
        movements?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['TransferSummary']
        }
      }
      /** Invalid agency identifiers, or from time after the to time, or a time period greater than 24 hours specified, or parameter format not correct. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The token presented did not contain the necessary role to access this resource. */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The token presented has expired. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Current establishment rollcount numbers.<p>This endpoint uses the REPLICA database.</p> */
  getRollcount: {
    parameters: {
      path: {
        /** The prison id */
        agencyId: string
      }
      query: {
        /** If false return data for prisoners in cell locations, if true return unassigned prisoners, i.e. those in non-cell locations. */
        unassigned?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['RollCount'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Rollcount movement numbers.<p>This endpoint uses the REPLICA database.</p> */
  getRollcountMovements: {
    parameters: {
      path: {
        /** The prison id */
        agencyId: string
      }
      query: {
        /** The date for which movements are counted, default today. */
        movementDate?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['MovementCount']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffendersInReception: {
    parameters: {
      path: {
        /** The prison id */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderInReception'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Enroute to reception count */
  getEnrouteOffenderMovementCount: {
    parameters: {
      path: {
        /** The prison id */
        agencyId: string
      }
      query: {
        /** Optional filter on date of movement. Defaults to today */
        movementDate?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': number
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Information on offenders currently out.<p>This endpoint uses the REPLICA database.</p> */
  getOffendersCurrentlyOut: {
    parameters: {
      path: {
        /** The identifier of a living unit, otherwise known as an internal location. */
        livingUnitId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderOut'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getTemporaryAbsences: {
    parameters: {
      path: {
        /** The prison id */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OutOnTemporaryAbsenceSummary'][]
        }
      }
      /** The token presented did not contain the necessary role to access this resource. */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The token presented has expired. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Information on offenders currently out. */
  getOffendersCurrentlyOut_1: {
    parameters: {
      path: {
        /** The prison id */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderOut'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Location detail. */
  getLocation: {
    parameters: {
      path: {
        /** The location id of location */
        locationId: number
      }
      query: {
        /** Match a location that is inactive? */
        includeInactive?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of offenders at location.<p>This endpoint uses the REPLICA database.</p> */
  getOffendersAtLocation: {
    parameters: {
      path: {
        /** The location id of location */
        locationId: number
      }
      header: {
        /** Requested offset of first record in returned collection of inmate records. */
        'Page-Offset'?: number
        /** Requested limit to number of inmate records returned. */
        'Page-Limit'?: number
        /** Comma separated list of one or more of the following fields - <b>bookingNo, bookingId, offenderNo, firstName, lastName, agencyId, or assignedLivingUnitId</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderBooking'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of offenders at location.<p>This endpoint uses the REPLICA database.</p> */
  getOffendersAtLocationDescription: {
    parameters: {
      path: {
        locationPrefix: string
      }
      query: {
        /** offender name or id to match */
        keywords?: string
        /** Offenders with a DOB >= this date */
        fromDob?: string
        /** Offenders with a DOB <= this date */
        toDob?: string
        /** alert flags to filter by */
        alerts?: string[]
        /** return Alert data */
        returnAlerts?: boolean
        /** retrieve category classification from assessments */
        returnCategory?: boolean
        /** retrieve inmates with a specific convicted status (Convicted, Remand, default: All) */
        convictedStatus?: string
      }
      header: {
        /** Requested offset of first record in returned collection of inmate records. */
        'Page-Offset'?: number
        /** Requested limit to number of inmate records returned. */
        'Page-Limit'?: number
        /** Comma separated list of one or more of the following fields - <b>bookingNo, bookingId, offenderNo, firstName, lastName, agencyId, or assignedLivingUnitId</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderBooking'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationByCode: {
    parameters: {
      path: {
        code: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Location']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Specified key worker's currently assigned offenders. */
  getAllocationsForKeyworker: {
    parameters: {
      path: {
        /** The key worker staff id */
        staffId: number
        /** The agency (prison) identifier. */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['KeyWorkerAllocationDetail'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Key workers available for allocation at specified agency.<p>This endpoint uses the REPLICA database.</p> */
  getAvailableKeyworkers: {
    parameters: {
      path: {
        /** The agency (prison) identifier. */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Keyworker'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** All allocations in specified agency. */
  getAllocationHistory: {
    parameters: {
      path: {
        /** The agency (prison) identifier. */
        agencyId: string
      }
      header: {
        /** Requested offset of first record in returned collection of allocationHistory records. */
        'Page-Offset'?: number
        /** Requested limit to number of allocationHistory records returned. */
        'Page-Limit'?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderKeyWorker'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** System access only */
  getIncident: {
    parameters: {
      path: {
        /** Incident Id */
        incidentId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['IncidentCase']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Image detail (with image data). */
  getImage: {
    parameters: {
      path: {
        /** The image id of offender */
        imageId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ImageDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Image data (as bytes). */
  getImageData: {
    parameters: {
      path: {
        /** The image id of offender */
        imageId: number
      }
      query: {
        /** Return full size image */
        fullSizeImage?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'image/jpeg': string
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'image/jpeg': string
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'image/jpeg': string
        }
      }
    }
  }
  getOffendersWithImagesCapturedInRange: {
    parameters: {
      query: {
        /** fromDateTime */
        fromDateTime: string
        /** Zero-based page index (0..N) */
        page?: number
        /** The size of the page to be returned */
        size?: number
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageOffenderNumber']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Empty list will be returned for no matches<p>This endpoint uses the REPLICA database.</p> */
  getOffenderIdentifiersByTypeAndValue: {
    parameters: {
      path: {
        /** Identifier Type */
        type: string
        /** Identifier Value */
        value: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderIdentifier'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * **from** and **to** query params are optional.
   * An awful lot of events occur every day. To guard against unintentionally heavy queries, the following rules are applied:
   * If **both** are absent, scope will be limited to 24 hours starting from midnight yesterday.
   * If **to** is present but **from** is absent, **from** will be defaulted to 24 hours before **to**.
   * If **from** is present but **to** is absent, **to** will be defaulted to 24 hours after **from**.
   */
  getEvents_1: {
    parameters: {
      query: {
        from?: string
        to?: string
        type?: string[]
        sortBy?: 'TIMESTAMP_ASC' | 'TIMESTAMP_DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderEvent'][]
        }
      }
    }
  }
  /** A list of offender employments. */
  getPrisonerEmployments: {
    parameters: {
      path: {
        /** List of offender NOMS numbers. NOMS numbers have the format:<b>ANNNNAA</b> */
        offenderNo: string
      }
      query: {
        /** The page number of the paged results */
        page?: number
        /** Requested limit to number of results returned. */
        size?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageEmployment']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** A list of offender educations. */
  getPrisonerEducations: {
    parameters: {
      path: {
        /** List of offender NOMS numbers. NOMS numbers have the format:<b>G0364GX</b> */
        offenderNo: string
      }
      query: {
        /** The page number of the paged results */
        page?: number
        /** Requested limit to number of results returned. */
        size?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageEducation']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getBedAssignmentsHistory: {
    parameters: {
      path: {
        /** The location id. */
        locationId: number
      }
      query: {
        /** From date */
        fromDate: string
        /** To date */
        toDate: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BedAssignment'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCellAttributes: {
    parameters: {
      path: {
        /** The location id. */
        locationId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderCell']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** <p>This endpoint uses the REPLICA database.</p> */
  getBedAssignmentsHistoryByDateForAgency: {
    parameters: {
      path: {
        /** Agency Id */
        agencyId: string
        /** Assignment date (2020-03-24) */
        assignmentDate: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BedAssignment'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns all case notes - consumed by Delius<br/>These are generated by  whenever a case note is created or amended for an offender.<br/>*Note:* An alternative call [GET /case_notes/for_delius](#case-notes-feed-fetch-case-notes-direct-get) has been created for performance reasons.<br/>Some case notes are automatically generated by the system in response to an action relating to the offender e.g. An alert being raised or a prison transfer.<br/>The note type only filters at the top note type level not the sub type.<br/>note_type can be presented multiples times in the URL to filter by multiple note types. */
  getCaseNotesEvents: {
    parameters: {
      query: {
        /** a list of types and optionally subtypes (joined with +) to search. */
        type: string[]
        /** Only case notes occurring on or after this date and time (ISO 8601 format without timezone e.g. YYYY-MM-DDTHH:MM:SS) will be considered. */
        createdDate: string
        /** Number of events to return */
        limit: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CaseNoteEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Offender detail. */
  getOffenderBooking: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
      }
      query: {
        /** If set to true then only basic data is returned */
        basicInfo?: boolean
        /** Only used when requesting more than basic data, returns identifiers,offences,aliases,sentence dates,convicted status */
        extraInfo?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** All scheduled visits for offender. */
  getBookingVisits: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      query: {
        /** Returned visits must be scheduled on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** Returned visits must be scheduled on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
      header: {
        /** Requested offset of first record in returned collection of visit records. */
        'Page-Offset'?: number
        /** Requested limit to number of visit records returned. */
        'Page-Limit'?: number
        /** Comma separated list of one or more of the following fields - <b>eventDate, startTime, endTime, eventLocation</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Today's scheduled visits for offender. */
  getBookingVisitsForToday: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      header: {
        /** Comma separated list of one or more of the following fields - <b>eventDate, startTime, endTime, eventLocation</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Will return whether there are any visits and also the date of the next scheduled visit<p>This endpoint uses the REPLICA database.</p> */
  getBookingVisitsSummary: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['VisitSummary']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found or no permissions to see it. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** To be used for filtering visits by prison */
  getBookingVisitsPrisons: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** Invalid request. */
      204: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** The next visit for the offender. Will return 200 with no body if no next visit is scheduled<p>This endpoint uses the REPLICA database.</p> */
  getBookingVisitsNext: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      query: {
        /** Toggle to return Visitors in response (or not). */
        withVisitors?: boolean
      }
    }
    responses: {
      /** Invalid request. */
      204: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** visits with visitor list for offender.<p>This endpoint uses the REPLICA database.</p> */
  getBookingVisitsWithVisitor: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      query: {
        /** Returned visits must be scheduled on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** Returned visits must be scheduled on or before this date (in YYYY-MM-DD format). */
        toDate?: string
        /** Type of visit */
        visitType?: string
        'Status of visit. code from VIS_COMPLETE domain, e.g: CANC (Cancelled) or SCH (Scheduled)'?: string
        'Reason for cancellation. code from MOVE_CANC_RS domain, e.g: VISCANC (Visitor Cancelled) or NO_VO (No Visiting Order)'?: string
        /** The prison id */
        prisonId?: string
        /** Target page number, zero being the first page */
        page?: number
        /** The number of results per page */
        size?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageVisitWithVisitors']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * <h3>Algorithm</h3>
   * <ul>
   *   <li>If there is a confirmed release date, the offender release date is the confirmed release date.</li>
   *   <li>If there is no confirmed release date for the offender, the offender release date is either the actual parole date or the home detention curfew actual date.</li>
   *   <li>If there is no confirmed release date, actual parole date or home detention curfew actual date for the offender, the release date is the later of the nonDtoReleaseDate or midTermDate value (if either or both are present)</li>
   * </ul>
   * <p>This endpoint uses the REPLICA database.</p>
   */
  getBookingSentenceDetail: {
    parameters: {
      header: {
        /** Version of Sentence Calc Dates, 1.0 is default */
        version?: string
      }
      path: {
        /** The booking id of offender */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['SentenceCalcDates']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBookingSentenceAdjustments: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['SentenceAdjustmentDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get secondary languages */
  getSecondaryLanguages: {
    parameters: {
      path: {
        /** bookingId */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['SecondaryLanguage'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Reasonable Adjustment Information */
  getReasonableAdjustments: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      query: {
        /** a list of treatment codes to search. */
        type: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ReasonableAdjustments']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of active property containers */
  getOffenderPropertyContainers: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PropertyContainer'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Profile Information */
  getProfileInformation: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ProfileInformation'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Physical Mark Information */
  getPhysicalMarks: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PhysicalMark'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Physical Characteristics */
  getPhysicalCharacteristics: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PhysicalCharacteristic'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Offender Physical Attributes. */
  getPhysicalAttributes: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PhysicalAttributes']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get offender non-association details */
  getNonAssociationDetails_1: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderNonAssociationDetails']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Must booking in user caseload or have system privilege */
  getMovementByBookingIdAndSequence: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
        /** The sequence Number of the movement */
        sequenceNumber: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Movement']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Military Records */
  getMilitaryRecords_1: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['MilitaryRecords']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Offender main offence detail. */
  getMainOffence_1: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenceDetail'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Can be filtered by participation type and incident type */
  getIncidentsByBookingId: {
    parameters: {
      path: {
        /** bookingId */
        bookingId: number
      }
      query: {
        /** incidentType */
        incidentType: string[]
        /** participationRoles */
        participationRoles:
          | 'ACTINV'
          | 'ASSIAL'
          | 'FIGHT'
          | 'IMPED'
          | 'PERP'
          | 'SUSASS'
          | 'SUSINV'
          | 'VICT'
          | 'AI'
          | 'PAS'
          | 'AO'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['IncidentCase'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Image detail (without image data).<p>This endpoint uses the REPLICA database.</p> */
  getMainImageForBookings: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ImageDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Image data (as bytes).<p>This endpoint uses the REPLICA database.</p> */
  getMainBookingImageData: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
      }
      query: {
        /** Return full size image */
        fullSizeImage?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'image/jpeg': string
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'image/jpeg': string
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'image/jpeg': string
        }
      }
    }
  }
  /** Identifiers for this booking */
  getOffenderIdentifiers: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      query: {
        /** Filter By Type */
        type?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderIdentifier'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getFixedTermRecallDetails: {
    parameters: {
      path: {
        /** The offenders bookingID */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['FixedTermRecallDetails']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** No Fixed Term Recall exists for this booking */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** All scheduled events for offender. */
  getEvents_2: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      query: {
        /** Returned events must be scheduled on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** Returned events must be scheduled on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Today's scheduled events for offender. */
  getEventsToday: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Scheduled events for offender for coming week (from current day). */
  getEventsThisWeek: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Scheduled events for offender for following week. */
  getEventsNextWeek: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtHearings: {
    parameters: {
      path: {
        /** The offender booking linked to the court hearings. */
        bookingId: number
      }
      query: {
        /** Return court hearings on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** Return court hearings on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CourtHearings']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Court Cases */
  getCourtCases: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      query: {
        /** Only return active court cases */
        activeOnly?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CourtCase'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Offender contacts (e.g. next of kin). */
  getContacts: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ContactDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Default sort order is by assignment date descending<p>This endpoint uses the REPLICA database.</p> */
  getBedAssignmentsHistory_1: {
    parameters: {
      path: {
        /** The offender booking linked to the court hearings. */
        bookingId: number
      }
      query: {
        /** The page number to return. Index starts at 0 */
        page?: number
        /** The number of results per page. Defaults to 20. */
        size?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageBedAssignment']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Offender case notes.<p>This endpoint uses the REPLICA database.</p> */
  getOffenderCaseNotes_1: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
      }
      query: {
        /** start contact date to search from */
        from?: string
        /** end contact date to search up to (including this date) */
        to?: string
        /** Filter by case note type */
        type?: string
        /** Filter by case note sub-type */
        subType?: string
        /** Filter by the ID of the prison */
        prisonId?: string
        /** Zero-based page index (0..N) */
        page?: number
        /** The size of the page to be returned */
        size?: number
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageCaseNote']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Count of case notes<p>This endpoint uses the REPLICA database.</p> */
  getCaseNoteCount: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
        /** Case note type. */
        type: string
        /** Case note sub-type. */
        subType: string
      }
      query: {
        /** Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered. */
        fromDate?: string
        /** Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered. */
        toDate?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CaseNoteCount']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Offender case note detail. */
  getOffenderCaseNote_1: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
        /** The case note id */
        caseNoteId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['CaseNote']
        }
      }
    }
  }
  /** Offender account balances. */
  getBalances: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Account']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Assessment Information */
  getAssessments_1: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Assessment'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Offender assessment detail. */
  getAssessmentByCode: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
        /** Assessment Type Code */
        assessmentCode: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Assessment']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Today's scheduled appointments for offender. */
  getBookingAppointmentsForToday: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      header: {
        /** Comma separated list of one or more of the following fields - <b>eventDate, startTime, endTime, eventLocation</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Scheduled appointments for offender for coming week (from current day). */
  getBookingAppointmentsForThisWeek: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      header: {
        /** Comma separated list of one or more of the following fields - <b>eventDate, startTime, endTime, eventLocation</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Scheduled appointments for offender for following week. */
  getBookingAppointmentsForNextWeek: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      header: {
        /** Comma separated list of one or more of the following fields - <b>eventDate, startTime, endTime, eventLocation</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Offender aliases. */
  getOffenderAliases: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
      }
      header: {
        /** Requested offset of first record in returned collection of alias records. */
        'Page-Offset'?: number
        /** Requested limit to number of alias records returned. */
        'Page-Limit'?: number
        /** Comma separated list of one or more of the following fields - <b>firstName, lastName, age, dob, middleName, nameType, createDate</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Alias'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Offender alert detail. */
  getOffenderAlert: {
    parameters: {
      path: {
        /** The booking id of offender */
        bookingId: number
        /** The Alert Id */
        alertId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Alert']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Offender alerts. */
  getOffenderAlertsV2: {
    parameters: {
      path: {
        /** The booking id for the booking */
        bookingId: number
      }
      query: {
        /** start alert date to search from */
        from?: string
        /** end alert date to search up to (including this date) */
        to?: string
        /** Filter by alert type */
        alertType?: string
        /** Filter by alert active status */
        alertStatus?: string
        /** Zero-based page index (0..N) */
        page?: number
        /** The size of the page to be returned */
        size?: number
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageAlert']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Offender adjudications (awards and sanctions). */
  getAdjudicationSummary: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      query: {
        /** Only awards ending on or after this date (in YYYY-MM-DD format) will be considered. */
        awardCutoffDate?: string
        /** Only proved adjudications ending on or after this date (in YYYY-MM-DD format) will be counted. */
        adjudicationCutoffDate?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AdjudicationSummary']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** All scheduled activities for offender.<p>This endpoint uses the REPLICA database.</p> */
  getBookingActivities: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      query: {
        /** Returned activities must be scheduled on or after this date (in YYYY-MM-DD format). */
        fromDate?: string
        /** Returned activities must be scheduled on or before this date (in YYYY-MM-DD format). */
        toDate?: string
      }
      header: {
        /** Requested offset of first record in returned collection of activity records. */
        'Page-Offset'?: number
        /** Requested limit to number of activity records returned. */
        'Page-Limit'?: number
        /** Comma separated list of one or more of the following fields - <b>eventDate, startTime, endTime, eventLocation</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Today's scheduled activities for offender.<p>This endpoint uses the REPLICA database.</p> */
  getBookingActivitiesForToday: {
    parameters: {
      path: {
        /** The offender booking id */
        bookingId: number
      }
      header: {
        /** Comma separated list of one or more of the following fields - <b>eventDate, startTime, endTime, eventLocation</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Returns data that is available to the users caseload privileges, at least one attribute of a prisonId, bookingId or offenderNo must be specified */
  getPrisonerBookingsV2: {
    parameters: {
      query: {
        /** Filter by prison Id */
        prisonId?: string
        /** Filter by a list of booking ids */
        bookingId?: number[]
        /** Filter by a list of offender numbers */
        offenderNo?: string[]
        /** Return additional legal information (imprisonmentStatus, legalStatus, convictedStatus) */
        legalInfo?: boolean
        /** Return facial ID for latest prisoner image */
        image?: boolean
        /** Zero-based page index (0..N) */
        page?: number
        /** The size of the page to be returned */
        size?: number
        /** Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PagePrisonerBookingSummary']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Offender detail. */
  getOffenderBookingByOffenderNo: {
    parameters: {
      path: {
        /** The offenderNo of offender */
        offenderNo: string
      }
      query: {
        /** If set to true then full data is returned */
        fullInfo?: boolean
        /** Only used when fullInfo=true, returns identifiers,offences,aliases,sentence dates,convicted status */
        extraInfo?: boolean
        /** Only used when fullInfo=true, returns the applicable CSRA classification for this offender */
        csraSummary?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['InmateDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Balances visit orders and privilege visit orders for offender.<p>This endpoint uses the REPLICA database.</p> */
  getBookingVisitBalances: {
    parameters: {
      path: {
        /** The offenderNo of offender */
        offenderNo: string
      }
      query: {
        /** Allow no content (204) response if no data rather than returning a not found (404) */
        allowNoContent?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['VisitBalances']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** All Offences recorded for this offender.<p>This endpoint uses the REPLICA database.</p> */
  getOffenceHistory: {
    parameters: {
      path: {
        /** The offender number */
        offenderNo: string
      }
      query: {
        /** include offences with convictions only */
        convictionsOnly?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenceHistoryDetail'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Key worker details. This should not be used - call keywork API instead */
  getKeyworkerByOffenderNo: {
    parameters: {
      path: {
        /** The offenderNo of offender */
        offenderNo: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Keyworker']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Image data (as bytes). */
  getMainBookingImageDataByNo: {
    parameters: {
      path: {
        /** The offender No of offender */
        offenderNo: string
      }
      query: {
        /** Return full size image */
        fullSizeImage?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'image/jpeg': string
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'image/jpeg': string
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'image/jpeg': string
        }
      }
    }
  }
  /** Get appointment byId. */
  getAppointment: {
    parameters: {
      path: {
        /** The unique identifier for the appointment */
        appointmentId: number
      }
    }
    responses: {
      /** The appointment has been returned */
      200: {
        content: {
          'application/json': components['schemas']['ScheduledEvent']
        }
      }
      /** The client is not authorised for this operation */
      403: {
        content: {
          'application/json': components['schemas']['ScheduledEvent']
        }
      }
      /** The appointment was not found */
      404: {
        content: {
          'application/json': components['schemas']['ScheduledEvent']
        }
      }
    }
  }
  /** Delete appointment. */
  deleteAppointment: {
    parameters: {
      path: {
        /** The unique identifier for the appointment */
        appointmentId: number
      }
    }
    responses: {
      /** The appointment has been deleted */
      204: never
      /** The client is not authorised for this operation */
      403: unknown
      /** The appointment was not found */
      404: unknown
    }
  }
  /** List of active internal locations for agency.<p>This endpoint uses the REPLICA database.</p> */
  getAgencyLocations: {
    parameters: {
      path: {
        agencyId: string
      }
      query: {
        /** Restricts list of locations returned to those that can be used for the specified event type. */
        eventType?: string
      }
      header: {
        /** Comma separated list of one or more of the following fields - <b>description, userDescription</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of active internal locations for agency by type. */
  getAgencyLocationsByType: {
    parameters: {
      path: {
        /** The prison */
        agencyId: string
        /** Restricts list of locations returned to those of the passed type. */
        type: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of all available Location Groups at agency. */
  getAvailableLocationGroups: {
    parameters: {
      path: {
        /** The prison */
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['LocationGroup'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of locations for agency where events (appointments, visits, activities) could be held. */
  getAgencyEventLocations: {
    parameters: {
      path: {
        agencyId: string
      }
      header: {
        /** Comma separated list of one or more of the following fields - <b>description, userDescription</b> */
        'Sort-Fields'?: string
        /** Sort order (ASC or DESC) - defaults to ASC. */
        'Sort-Order'?: 'ASC' | 'DESC'
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of locations for agency where events (appointments, visits, activities) are being held.<p>This endpoint uses the REPLICA database.</p> */
  getAgencyEventLocationsBooked: {
    parameters: {
      path: {
        agencyId: string
      }
      query: {
        /** Filter list to only return locations which prisoners will be attending on this day */
        bookedOnDay: string
        /** Only return locations which prisoners will be attending in this time slot (AM, PM or ED, and bookedOnDay must be specified) */
        timeSlot?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** An agency can have one to many establishment types. For example a prison could be both a youth and adult establishment. */
  getAgencyEstablishmentTypes: {
    parameters: {
      path: {
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['AgencyEstablishmentTypes']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of active cells with capacity for agency.<p>This endpoint uses the REPLICA database.</p> */
  getAgencyActiveCellsWithCapacity: {
    parameters: {
      path: {
        agencyId: string
      }
      query: {
        /** Restricts list of cells returned to those that have a specified attribute. */
        attribute?: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['OffenderCell'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of active agencies by type */
  getAgenciesByType: {
    parameters: {
      path: {
        /** Agency Type */
        type: string
      }
      query: {
        /** Only return active agencies */
        activeOnly?: boolean
        /** @deprecated Only return agencies that match the supplied Jurisdiction Code(s), NOTE: Deprecated, please use courtType param */
        jurisdictionCode?: string[]
        /** Only return courts that match the supplied court types(s) */
        courtType?: string[]
        /** Returns Address Information */
        withAddresses?: boolean
        /** Don't format the location */
        skipFormatLocation?: boolean
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Agency'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of prison contact details.<p>This endpoint uses the REPLICA database.</p> */
  getPrisonContactDetailList: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonContactDetail'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Prison contact detail. */
  getPrisonContactDetail: {
    parameters: {
      path: {
        agencyId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonContactDetail']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of agencies for caseload. */
  getAgenciesByCaseload: {
    parameters: {
      path: {
        caseload: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['Agency'][]
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBookingAndSentenceAdjustments: {
    parameters: {
      path: {
        /** The booking id of the offender */
        bookingId: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['BookingAndSentenceAdjustments']
        }
      }
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Cancels the scheduled court hearing for an offender. */
  cancelCourtHearing: {
    parameters: {
      path: {
        /** The offender booking to linked to the scheduled event. */
        bookingId: number
        /** The identifier of the scheduled event to be cancelled. */
        hearingId: number
      }
    }
    responses: {
      /** OK */
      200: unknown
      /** Invalid request. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Requested resource not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unrecoverable error occurred whilst processing request. */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
